{"version":3,"file":"binding-object.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/binding-object.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAiG;AACjG,4CAAqF;AAErF,0CAAyC;AAGzC;IAA4C,0CAAsB;IAAlE;;IA+BA,CAAC;IA3BG,6CAAY,GAAZ,UAAa,OAAgB,EAAE,IAAuB;QAClD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,oBAAoB,CAAC;IAC5D,CAAC;IASD,4CAAW,GAAX,UAAY,OAAgB,EAAE,IAAuB;QAArD,iBAeC;QAdG,IAAM,WAAW,GAAG,IAAI,6BAAqB,EAAE,CAAC;QAChD,WAAW,CAAC,IAAI,GAAG,sBAAc,CAAC,WAAW,CAAC;QAC9C,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;QAEnC,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC9C,OAAO,CAAC,OAAO,CAAC,qBAAS,CAAC,wBAAwB,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACvE,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,QAA4C,CAAC,OAAO,CAAC,UAAC,OAAO;gBAC/D,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,sBAAc,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IA9BQ,sBAAsB;QADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;OAC5B,sBAAsB,CA+BlC;IAAD,6BAAC;CAAA,AA/BD,CAA4C,mCAAsB,GA+BjE;AA/BY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, ReflectionKind, DeclarationReflection, ReflectionType } from '../../models/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\nimport { Converter } from '../converter';\n\n@Component({name: 'type:binding-object'})\nexport class BindingObjectConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.BindingPattern> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.BindingPattern): boolean {\n        return node.kind === ts.SyntaxKind.ObjectBindingPattern;\n    }\n\n    /**\n     * Convert the given binding pattern to its type reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The binding pattern that should be converted.\n     * @returns The type reflection representing the given binding pattern.\n     */\n    convertNode(context: Context, node: ts.BindingPattern): Type {\n        const declaration = new DeclarationReflection();\n        declaration.kind = ReflectionKind.TypeLiteral;\n        declaration.name = '__type';\n        declaration.parent = context.scope;\n\n        context.registerReflection(declaration, null);\n        context.trigger(Converter.EVENT_CREATE_DECLARATION, declaration, node);\n        context.withScope(declaration, () => {\n            (node.elements as ts.NodeArray<ts.BindingElement>).forEach((element) => {\n                this.owner.convertNode(context, element);\n            });\n        });\n\n        return new ReflectionType(declaration);\n    }\n}\n"]}