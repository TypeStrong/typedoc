{"version":3,"file":"binding-array.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/binding-array.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAqD;AACrD,8CAAqF;AAIrF,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,mCAAsB;IAI7D,YAAY,CAAC,OAAgB,EAAE,IAAuB;QAClD,OAAO,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC;IAC3D,CAAC;IASD,WAAW,CAAC,OAAgB,EAAE,IAAuB;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,OAAO,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;CACJ,CAAA;AAnBY,qBAAqB;IADjC,sBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;GAC3B,qBAAqB,CAmBjC;AAnBY,sDAAqB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, TupleType } from '../../models/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:binding-array'})\nexport class BindingArrayConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.BindingPattern> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.BindingPattern): boolean {\n        return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n    }\n\n    /**\n     * Convert the given binding pattern to its type reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The binding pattern that should be converted.\n     * @returns The type reflection representing the given binding pattern.\n     */\n    convertNode(context: Context, node: ts.BindingPattern): Type {\n        const types = this.owner.convertTypes(context, node.elements);\n        return new TupleType(types);\n    }\n}\n"]}