{"version":3,"file":"binding-array.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/binding-array.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAqD;AACrD,4CAAqF;AAIrF;IAA2C,yCAAsB;IAAjE;;IAwBA,CAAC;IApBG,4CAAY,GAAZ,UAAa,OAAgB,EAAE,IAAuB;QAClD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC;IAC3D,CAAC;IASD,2CAAW,GAAX,UAAY,OAAgB,EAAE,IAAuB;QAArD,iBAQC;QAPG,IAAM,KAAK,GAAW,EAAE,CAAC;QAExB,IAAI,CAAC,QAA4C,CAAC,OAAO,CAAC,UAAC,OAAO;YAC/D,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAvBQ,qBAAqB;QADjC,sBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;OAC3B,qBAAqB,CAwBjC;IAAD,4BAAC;CAAA,AAxBD,CAA2C,mCAAsB,GAwBhE;AAxBY,sDAAqB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, TupleType } from '../../models/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:binding-array'})\nexport class BindingArrayConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.BindingPattern> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.BindingPattern): boolean {\n        return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n    }\n\n    /**\n     * Convert the given binding pattern to its type reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The binding pattern that should be converted.\n     * @returns The type reflection representing the given binding pattern.\n     */\n    convertNode(context: Context, node: ts.BindingPattern): Type {\n        const types: Type[] = [];\n\n        (node.elements as ts.NodeArray<ts.BindingElement>).forEach((element) => {\n            types.push(this.owner.convertType(context, element));\n        });\n\n        return new TupleType(types);\n    }\n}\n"]}