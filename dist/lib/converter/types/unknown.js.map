{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/unknown.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,kDAA6D;AAC7D,4CAAqF;AAIrF;IAAsC,oCAAsB;IAD5D;QAAA,qEAgCC;QA1BG,cAAQ,GAAG,CAAC,GAAG,CAAC;;IA0BpB,CAAC;IArBG,uCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAa;QACxC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAeD,sCAAW,GAAX,UAAY,OAAgB,EAAE,IAAa;QACvC,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,mBAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IA9BQ,gBAAgB;QAD5B,sBAAS,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC;OACrB,gBAAgB,CA+B5B;IAAD,uBAAC;CAAA,AA/BD,CAAsC,mCAAsB,GA+B3D;AA/BY,4CAAgB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, UnknownType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:unknown'})\nexport class UnknownConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.Type> {\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority = -100;\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.Type): boolean {\n        return true;\n    }\n\n    /**\n     * Convert the given type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * If no other converter is able to reflect a type, this converter will produce a\n     * reflection by utilising ts.typeToString() to generate a string representation of the\n     * given type.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The type that should be converted.\n     * @returns The type reflection representing the given type.\n     */\n    convertType(context: Context, type: ts.Type): Type {\n        const name = context.checker.typeToString(type);\n        return new UnknownType(name);\n    }\n}\n"]}