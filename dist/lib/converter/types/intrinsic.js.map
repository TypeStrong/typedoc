{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/intrinsic.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAmD;AACnD,8CAAqF;AAOrF,MAAM,kBAAkB,GAAI,EAAE,CAAC,SAAiB,CAAC,SAAS,CAAC;AAC3D,IAAI,kBAAkB,KAAK,SAAS,EAAE;IAClC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;CAC3E;AAGD,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,mCAAsB;IAI1D,YAAY,CAAC,OAAgB,EAAE,IAAa;QACxC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,CAAC;IAC/C,CAAC;IAcD,WAAW,CAAC,OAAgB,EAAE,IAAa;QACvC,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxE,OAAO,IAAI,qBAAa,CAAC,aAAa,CAAC,CAAC;IAC5C,CAAC;CACJ,CAAA;AAxBY,kBAAkB;IAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;GACvB,kBAAkB,CAwB9B;AAxBY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\n\nimport { IntrinsicType } from '../../models/index';\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\nimport { Context } from '../context';\n\n// TypeScript has an @internal enum set for the intrinsic types:\n// https://github.com/Microsoft/TypeScript/blob/v2.0.5/src/compiler/types.ts#L2297-L2298\n// It is not included in the typescript typings, so the enum is cast as `any` to access the `Intrinsic` set.\n// tslint:disable-next-line:variable-name\nconst IntrinsicTypeFlags = (ts.TypeFlags as any).Intrinsic;\nif (IntrinsicTypeFlags === undefined) {\n    throw new Error('Internal TypeScript API missing: TypeFlags.Intrinsic');\n}\n\n@Component({name: 'type:intrinsic'})\nexport class IntrinsicConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.Type> {\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.Type): boolean {\n        return !!(type.flags & IntrinsicTypeFlags);\n    }\n\n    /**\n     * Convert the given intrinsic type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * ```\n     * let someValue: string;\n     * ```\n     *\n     * @param type  The intrinsic type that should be converted.\n     * @returns The type reflection representing the given intrinsic type.\n     */\n    convertType(context: Context, type: ts.Type): IntrinsicType {\n        let intrinsicName = context.program.getTypeChecker().typeToString(type);\n        return new IntrinsicType(intrinsicName);\n    }\n}\n"]}