{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/string-literal.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAAmE;AACnE,8CAAiF;AAIjF,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,mCAAsB;IAI9D,YAAY,CAAC,OAAgB,EAAE,IAAsB;QACjD,OAAO,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;IACrD,CAAC;IAKD,YAAY,CAAC,OAAgB,EAAE,IAAoB;QAC/C,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAcD,WAAW,CAAC,OAAgB,EAAE,IAAsB;QAChD,OAAO,IAAI,yBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAcD,WAAW,CAAC,OAAgB,EAAE,IAAoB;QAC9C,OAAO,IAAI,yBAAiB,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;CACJ,CAAA;AA9CY,sBAAsB;IADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;GAC5B,sBAAsB,CA8ClC;AA9CY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, StringLiteralType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:string-literal'})\nexport class StringLiteralConverter extends ConverterTypeComponent implements TypeConverter<ts.LiteralType, ts.StringLiteral> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.StringLiteral): boolean {\n        return node.kind === ts.SyntaxKind.StringLiteral;\n    }\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.LiteralType): boolean {\n        return !!(type.flags & ts.TypeFlags.StringLiteral);\n    }\n\n    /**\n     * Convert the given string literal expression node to its type reflection.\n     *\n     * This is a node based converter, see [[convertStringLiteralType]] for the type equivalent.\n     *\n     * ```\n     * createElement(tagName: \"a\"): HTMLAnchorElement;\n     * ```\n     *\n     * @param node  The string literal node that should be converted.\n     * @returns The type reflection representing the given string literal node.\n     */\n    convertNode(context: Context, node: ts.StringLiteral): Type {\n        return new StringLiteralType(node.text);\n    }\n\n    /**\n     * Convert the given string literal type to its type reflection.\n     *\n     * This is a type based converter, see [[convertStringLiteralExpression]] for the node equivalent.\n     *\n     * ```\n     * createElement(tagName: \"a\"): HTMLAnchorElement;\n     * ```\n     *\n     * @param type  The intrinsic type that should be converted.\n     * @returns The type reflection representing the given string literal type.\n     */\n    convertType(context: Context, type: ts.LiteralType): Type {\n        return new StringLiteralType(<string> type.value);\n    }\n}\n"]}