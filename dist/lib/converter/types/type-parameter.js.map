{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAAmE;AACnE,8CAAqF;AAIrF,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,mCAAsB;IADlE;;QAMI,aAAQ,GAAG,CAAC,EAAE,CAAC;IAkCnB,CAAC;IA7BG,YAAY,CAAC,OAAgB,EAAE,IAA0B,EAAE,IAAa;QACpE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAiBD,WAAW,CAAC,OAAgB,EAAE,IAA0B;QACpD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBACxD,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;aAC/C;YAED,OAAO,IAAI,yBAAiB,CAAC,IAAI,CAAC,CAAC;SACtC;IACL,CAAC;CACJ,CAAA;AAvCY,sBAAsB;IADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;GAC5B,sBAAsB,CAuClC;AAvCY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, TypeParameterType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:type-parameter'})\nexport class TypeParameterConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeReferenceNode> {\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority = -50;\n\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.TypeReferenceNode, type: ts.Type): boolean {\n        return !!(type.flags & ts.TypeFlags.TypeParameter);\n    }\n\n    /**\n     * Interpret the given type reference node as a type parameter and convert it to its type reflection.\n     *\n     * This is a node based converter with no type equivalent.\n     *\n     * ```\n     * class SomeClass<T> {\n     *   public someValue: T;\n     * }\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The type reference node representing a type parameter.\n     * @returns The type reflection representing the given type parameter.\n     */\n    convertNode(context: Context, node: ts.TypeReferenceNode): Type | undefined {\n        if (node.typeName) {\n            const name = node.getText();\n            if (context.typeParameters && context.typeParameters[name]) {\n                return context.typeParameters[name].clone();\n            }\n\n            return new TypeParameterType(name);\n        }\n    }\n}\n"]}