{"version":3,"file":"type-operator.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/type-operator.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA4D;AAC5D,8CAAqF;AAIrF,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,mCAAsB;IADjE;;QAKI,aAAQ,GAAG,EAAE,CAAC;IAsBlB,CAAC;IAjBG,YAAY,CAAC,OAAgB,EAAE,IAAyB,EAAE,IAAa;QACnE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IASD,WAAW,CAAC,OAAgB,EAAE,IAAyB;QACnD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,MAAM,EAAE;YACR,OAAO,IAAI,wBAAgB,CAAC,MAAM,CAAC,CAAC;SACvC;IACL,CAAC;CACJ,CAAA;AA1BY,qBAAqB;IADjC,sBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;GAC3B,qBAAqB,CA0BjC;AA1BY,sDAAqB","sourcesContent":["import * as ts from 'typescript';\n\nimport { TypeOperatorType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:type-operator'})\nexport class TypeOperatorConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeOperatorNode> {\n    /**\n     * we want to run before union\n     */\n    priority = 50;\n\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.TypeOperatorNode, type: ts.Type): boolean {\n        return !!(node.kind === ts.SyntaxKind.TypeOperator);\n    }\n\n    /**\n     * Interpret the given type operator node and convert it into a type representing keys of a type\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The type operator node representing keys of a type.\n     * @returns The type representing keys of a type.\n     */\n    convertNode(context: Context, node: ts.TypeOperatorNode): TypeOperatorType | undefined {\n        const target = this.owner.convertType(context, node.type);\n        if (target) {\n            return new TypeOperatorType(target);\n        }\n    }\n}\n"]}