{"version":3,"file":"this.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/this.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,kDAA+D;AAC/D,4CAAqF;AAIrF;IAAmC,iCAAsB;IAAzD;;IA0BA,CAAC;IAtBU,oCAAY,GAAnB,UAAoB,OAAgB,EAAE,IAAqB,EAAE,IAAa;QACtE,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IAChD,CAAC;IAiBM,mCAAW,GAAlB,UAAmB,OAAgB,EAAE,IAAqB,EAAE,IAAa;QACrE,MAAM,CAAC,IAAI,qBAAa,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAzBQ,aAAa;QADzB,sBAAS,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;OACpB,aAAa,CA0BzB;IAAD,oBAAC;CAAA,AA1BD,CAAmC,mCAAsB,GA0BxD;AA1BY,sCAAa","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, IntrinsicType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({ name: 'type:this' })\nexport class ThisConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.ThisTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    public supportsNode(context: Context, node: ts.ThisTypeNode, type: ts.Type): boolean {\n        return node.kind === ts.SyntaxKind.ThisType;\n    }\n\n    /**\n     * Convert the type reference node to its type reflection.\n     *\n     * This is a node based converter, see [[convertTypeReferenceType]] for the type equivalent.\n     *\n     * ```\n     * class SomeClass { }\n     * var someValue:SomeClass;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The type reference node that should be converted.\n     * @param type  The type of the type reference node.\n     * @returns The type reflection representing the given reference node.\n     */\n    public convertNode(context: Context, node: ts.ThisTypeNode, type: ts.Type): Type {\n        return new IntrinsicType('this');\n    }\n}\n"]}