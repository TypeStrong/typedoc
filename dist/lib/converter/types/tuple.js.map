{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/tuple.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA2D;AAC3D,8CAAiF;AAIjF,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,mCAAsB;IAItD,YAAY,CAAC,OAAgB,EAAE,IAAsB;QACjD,OAAO,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,CAAC;IAKD,YAAY,CAAC,OAAgB,EAAE,IAAsB;QAEjD,IAAI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE;YACzC,OAAO,IAAI,CAAC;SACf;QAGD,IAAI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE;YAC7C,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE;gBAChD,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAeD,WAAW,CAAC,OAAgB,EAAE,IAAsB;QAChD,MAAM,QAAQ,GAAW,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7E,OAAO,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAeD,WAAW,CAAC,OAAgB,EAAE,IAAsB;QAChD,MAAM,QAAQ,GAAW,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACzF,OAAO,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;CACJ,CAAA;AA9DY,cAAc;IAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;GACnB,cAAc,CA8D1B;AA9DY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, TupleType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:tuple'})\nexport class TupleConverter extends ConverterTypeComponent implements TypeConverter<ts.TypeReference, ts.TupleTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.TupleTypeNode): boolean {\n        return node.kind === ts.SyntaxKind.TupleType;\n    }\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.TypeReference): boolean {\n        // If this type is a tuple\n        if (type.objectFlags & ts.ObjectFlags.Tuple) {\n            return true;\n        }\n\n        // If this type points to a tuple\n        if (type.objectFlags & ts.ObjectFlags.Reference) {\n            if (type.target.objectFlags & ts.ObjectFlags.Tuple) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the given tuple type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertTupleType]] for the type equivalent.\n     *\n     * ```\n     * let someValue: [string,number];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The tuple type node that should be converted.\n     * @returns The type reflection representing the given tuple type node.\n     */\n    convertNode(context: Context, node: ts.TupleTypeNode): TupleType {\n        const elements: Type[] = this.owner.convertTypes(context, node.elementTypes);\n        return new TupleType(elements);\n    }\n\n    /**\n     * Convert the given tuple type to its type reflection.\n     *\n     * This is a type based converter, see [[convertTupleTypeNode]] for the node equivalent.\n     *\n     * ```\n     * let someValue: [string,number];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The tuple type that should be converted.\n     * @returns The type reflection representing the given tuple type.\n     */\n    convertType(context: Context, type: ts.TypeReference): TupleType {\n        const elements: Type[] = this.owner.convertTypes(context, undefined, type.typeArguments);\n        return new TupleType(elements);\n    }\n}\n"]}