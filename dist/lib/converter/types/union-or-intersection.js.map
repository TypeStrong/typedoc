{"version":3,"file":"union-or-intersection.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/union-or-intersection.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA6E;AAC7E,8CAAiF;AAIjF,IAAa,4BAA4B,GAAzC,MAAa,4BAA6B,SAAQ,mCAAsB;IAIpE,YAAY,CAAC,OAAgB,EAAE,IAAoC;QAC/D,OAAO,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC;IACjG,CAAC;IAKD,YAAY,CAAC,OAAgB,EAAE,IAAgC;QAC3D,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACzG,CAAC;IAeD,WAAW,CAAC,OAAgB,EAAE,IAAoC;QAC9D,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEnE,OAAO,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChG,CAAC;IAeD,WAAW,CAAC,OAAgB,EAAE,IAAgC;QAC1D,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IACvG,CAAC;CACJ,CAAA;AAnDY,4BAA4B;IADxC,sBAAS,CAAC,EAAC,IAAI,EAAE,4BAA4B,EAAC,CAAC;GACnC,4BAA4B,CAmDxC;AAnDY,oEAA4B","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, UnionType, IntersectionType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:union-or-intersection'})\nexport class UnionOrIntersectionConverter extends ConverterTypeComponent implements TypeConverter<ts.UnionOrIntersectionType, ts.UnionOrIntersectionTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.UnionOrIntersectionTypeNode): boolean {\n        return node.kind === ts.SyntaxKind.UnionType || node.kind === ts.SyntaxKind.IntersectionType;\n    }\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.UnionOrIntersectionType): boolean {\n        return !!(type.flags & ts.TypeFlags.UnionOrIntersection) && !(type.flags & ts.TypeFlags.EnumLiteral);\n    }\n\n    /**\n     * Convert the given union type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertType]] for the type equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The union or intersection type node that should be converted.\n     * @returns The type reflection representing the given union type node.\n     */\n    convertNode(context: Context, node: ts.UnionOrIntersectionTypeNode): UnionType | IntersectionType {\n        const types: Type[] = this.owner.convertTypes(context, node.types);\n\n        return ts.isIntersectionTypeNode(node) ? new IntersectionType(types) : new UnionType(types);\n    }\n\n    /**\n     * Convert the given union type to its type reflection.\n     *\n     * This is a type based converter, see [[convertUnionTypeNode]] for the node equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The union type that should be converted.\n     * @returns The type reflection representing the given union type.\n     */\n    convertType(context: Context, type: ts.UnionOrIntersectionType): UnionType | IntersectionType {\n        const types: Type[] = this.owner.convertTypes(context, undefined, type.types);\n        return type.flags & ts.TypeFlags.Intersection ? new IntersectionType(types) : new UnionType(types);\n    }\n}\n"]}