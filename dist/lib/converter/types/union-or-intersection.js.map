{"version":3,"file":"union-or-intersection.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/union-or-intersection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,kDAA6E;AAC7E,4CAAiF;AAIjF;IAAkD,gDAAsB;IAAxE;;IA8DA,CAAC;IA1DG,mDAAY,GAAZ,UAAa,OAAgB,EAAE,IAAoC;QAC/D,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC;IACjG,CAAC;IAKD,mDAAY,GAAZ,UAAa,OAAgB,EAAE,IAAgC;QAC3D,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACzG,CAAC;IAeD,kDAAW,GAAX,UAAY,OAAgB,EAAE,IAAoC;QAAlE,iBASC;QARG,IAAI,KAAK,GAAW,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QACtE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,KAAK,GAAG,EAAE,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAC7G,CAAC;IAeD,kDAAW,GAAX,UAAY,OAAgB,EAAE,IAAgC;QAA9D,iBASC;QARG,IAAI,KAAa,CAAC;QAClB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,KAAK,GAAG,EAAE,CAAC;QACf,CAAC;QAED,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAC3G,CAAC;IA7DQ,4BAA4B;QADxC,sBAAS,CAAC,EAAC,IAAI,EAAE,4BAA4B,EAAC,CAAC;OACnC,4BAA4B,CA8DxC;IAAD,mCAAC;CAAA,AA9DD,CAAkD,mCAAsB,GA8DvE;AA9DY,oEAA4B","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, UnionType, IntersectionType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeConverter } from '../components';\nimport { Context } from '../context';\n\n@Component({name: 'type:union-or-intersection'})\nexport class UnionOrIntersectionConverter extends ConverterTypeComponent implements TypeConverter<ts.UnionOrIntersectionType, ts.UnionOrIntersectionTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.UnionOrIntersectionTypeNode): boolean {\n        return node.kind === ts.SyntaxKind.UnionType || node.kind === ts.SyntaxKind.IntersectionType;\n    }\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.UnionOrIntersectionType): boolean {\n        return !!(type.flags & ts.TypeFlags.UnionOrIntersection) && !(type.flags & ts.TypeFlags.EnumLiteral);\n    }\n\n    /**\n     * Convert the given union type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertType]] for the type equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The union or intersection type node that should be converted.\n     * @returns The type reflection representing the given union type node.\n     */\n    convertNode(context: Context, node: ts.UnionOrIntersectionTypeNode): UnionType | IntersectionType {\n        let types: Type[] = [];\n        if (node.types) {\n            types = node.types.map((n) => this.owner.convertType(context, n));\n        } else {\n            types = [];\n        }\n\n        return node.kind === ts.SyntaxKind.IntersectionType ? new IntersectionType(types) : new UnionType(types);\n    }\n\n    /**\n     * Convert the given union type to its type reflection.\n     *\n     * This is a type based converter, see [[convertUnionTypeNode]] for the node equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The union type that should be converted.\n     * @returns The type reflection representing the given union type.\n     */\n    convertType(context: Context, type: ts.UnionOrIntersectionType): UnionType | IntersectionType {\n        let types: Type[];\n        if (type && type.types) {\n            types = type.types.map((t) => this.owner.convertType(context, null, t));\n        } else {\n            types = [];\n        }\n\n        return !!(type.flags & ts.TypeFlags.Intersection) ? new IntersectionType(types) : new UnionType(types);\n    }\n}\n"]}