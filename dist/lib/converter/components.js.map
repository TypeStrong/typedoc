{"version":3,"file":"components.js","sourceRoot":"","sources":["../../../src/lib/converter/components.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,gDAAkE;AAM1D,oBANC,qBAAS,CAMD;AAEjB;IAAiD,sCAA4B;IAA7E;;IAAgF,CAAC;IAAD,yBAAC;AAAD,CAAC,AAAjF,CAAiD,6BAAiB,GAAe;AAA3D,gDAAkB;AAExC;IAAwE,0CAAkB;IAA1F;;IAOA,CAAC;IAAD,6BAAC;AAAD,CAAC,AAPD,CAAwE,kBAAkB,GAOzF;AAPqB,wDAAsB;AAS5C;IAAqD,0CAAkB;IAAvE;QAAA,qEAMC;QADG,cAAQ,GAAG,CAAC,CAAC;;IACjB,CAAC;IAAD,6BAAC;AAAD,CAAC,AAND,CAAqD,kBAAkB,GAMtE;AANqB,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Component, AbstractComponent } from '../utils/component';\nimport { Reflection } from '../models/reflections/abstract';\nimport { Type } from '../models/types/abstract';\nimport { Context } from './context';\nimport { Converter } from './converter';\n\nexport {Component};\n\nexport abstract class ConverterComponent extends AbstractComponent<Converter> { }\n\nexport abstract class ConverterNodeComponent<T extends ts.Node> extends ConverterComponent {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[];\n\n    abstract convert(context: Context, node: T): Reflection;\n}\n\nexport abstract class ConverterTypeComponent extends ConverterComponent {\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority = 0;\n}\n\nexport interface TypeConverter<T extends ts.Type, N extends ts.Node>\n        extends ConverterTypeComponent, TypeTypeConverter<T>, TypeNodeConverter<T, N> {}\n\nexport interface TypeTypeConverter<T extends ts.Type> extends ConverterTypeComponent {\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: T): boolean;\n\n    /**\n     * Convert the given type to its type reflection.\n     */\n    convertType(context: Context, type: T): Type;\n}\n\nexport interface TypeNodeConverter<T extends ts.Type, N extends ts.Node> extends ConverterTypeComponent {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: N, type: T): boolean;\n\n    /**\n     * Convert the given type node to its type reflection.\n     */\n    convertNode(context: Context, node: N, type: T): Type;\n}\n"]}