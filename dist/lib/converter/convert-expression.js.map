{"version":3,"file":"convert-expression.js","sourceRoot":"","sources":["../../../src/lib/converter/convert-expression.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,oCAAsC;AAStC,6BAAoC,IAAkE;IAClG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AAND,kDAMC;AAED,2BAAkC,UAAyB;IACvD,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;YAC5B,MAAM,CAAC,GAAG,GAA2B,UAAW,CAAC,IAAI,GAAG,GAAG,CAAC;QAChE,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc;YAC7B,MAAM,CAAyB,UAAW,CAAC,IAAI,CAAC;QACpD,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW;YAC1B,MAAM,CAAC,MAAM,CAAC;QAClB,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY;YAC3B,MAAM,CAAC,OAAO,CAAC;QACnB;YACI,IAAM,MAAM,GAAG,GAAG,CAAC,mBAAmB,CAAW,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;IACrE,CAAC;AACL,CAAC;AAdD,8CAcC","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../ts-internal';\n\n/**\n * Return the default value of the given node.\n *\n * @param node  The TypeScript node whose default value should be extracted.\n * @returns The default value as a string.\n */\n\nexport function convertDefaultValue(node: ts.VariableDeclaration|ts.ParameterDeclaration|ts.EnumMember): string {\n    if (node.initializer) {\n        return convertExpression(node.initializer);\n    } else {\n        return null;\n    }\n}\n\nexport function convertExpression(expression: ts.Expression): string {\n    switch (expression.kind) {\n        case ts.SyntaxKind.StringLiteral:\n            return '\"' + (<ts.LiteralExpression> expression).text + '\"';\n        case ts.SyntaxKind.NumericLiteral:\n            return (<ts.LiteralExpression> expression).text;\n        case ts.SyntaxKind.TrueKeyword:\n            return 'true';\n        case ts.SyntaxKind.FalseKeyword:\n            return 'false';\n        default:\n            const source = _ts.getSourceFileOfNode(<ts.Node> expression);\n            return source.text.substring(expression.pos, expression.end);\n    }\n}\n"]}