{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/type-parameter.ts"],"names":[],"mappings":";;AAEA,4CAAwG;AAExG,0CAAyC;AASzC,6BAAoC,OAAgB,EAAE,IAAiC;IACnF,IAAM,aAAa,GAAG,IAAI,yBAAiB,EAAE,CAAC;IAC9C,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACtC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAClB,aAAa,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACvF,CAAC;IAED,IAAM,UAAU,GAA4B,OAAO,CAAC,KAAK,CAAC;IAC1D,IAAM,uBAAuB,GAAG,IAAI,+BAAuB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAEvF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QAC7B,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;IACnC,CAAC;IACD,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAExD,OAAO,CAAC,kBAAkB,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;IAC1D,OAAO,CAAC,OAAO,CAAC,qBAAS,CAAC,2BAA2B,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC;IAEtF,MAAM,CAAC,aAAa,CAAC;AACzB,CAAC;AAnBD,kDAmBC","sourcesContent":["import * as ts from 'typescript';\n\nimport { TypeParameterContainer, TypeParameterReflection, TypeParameterType } from '../../models/index';\nimport { Context } from '../context';\nimport { Converter } from '../converter';\n\n/**\n * Create a type parameter reflection for the given node.\n *\n * @param context  The context object describing the current state the converter is in.\n * @param node  The type parameter node that should be reflected.\n * @returns The newly created type parameter reflection.\n */\nexport function createTypeParameter(context: Context, node: ts.TypeParameterDeclaration): TypeParameterType {\n    const typeParameter = new TypeParameterType();\n    typeParameter.name = node.symbol.name;\n    if (node.constraint) {\n        typeParameter.constraint = context.converter.convertType(context, node.constraint);\n    }\n\n    const reflection = <TypeParameterContainer> context.scope;\n    const typeParameterReflection = new TypeParameterReflection(reflection, typeParameter);\n\n    if (!reflection.typeParameters) {\n        reflection.typeParameters = [];\n    }\n    reflection.typeParameters.push(typeParameterReflection);\n\n    context.registerReflection(typeParameterReflection, node);\n    context.trigger(Converter.EVENT_CREATE_TYPE_PARAMETER, typeParameterReflection, node);\n\n    return typeParameter;\n}\n"]}