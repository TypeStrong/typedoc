{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { toArray } from 'lodash';\n\nimport { Comment, CommentTag } from '../../models/comments/index';\n\n/**\n * Return the parsed comment of the given TypeScript node.\n *\n * @param node  The node whose comment should be returned.\n * @return The parsed comment as a [[Comment]] instance or undefined if no comment is present.\n */\nexport function createComment(node: ts.Node): Comment | undefined {\n    const comment = getRawComment(node);\n    if (!comment) {\n        return;\n    }\n\n    return parseComment(comment);\n}\n\n/**\n * Check whether the given module declaration is the topmost.\n *\n * This function returns TRUE if there is no trailing module defined, in\n * the following example this would be the case only for module <code>C</code>.\n *\n * ```\n * module A.B.C { }\n * ```\n *\n * @param node  The module definition that should be tested.\n * @return TRUE if the given node is the topmost module declaration, FALSE otherwise.\n */\nfunction isTopmostModuleDeclaration(node: ts.ModuleDeclaration): boolean {\n    return node.getChildren().some(ts.isModuleBlock);\n}\n\n/**\n * Return the root module declaration of the given module declaration.\n *\n * In the following example this function would always return module\n * <code>A</code> no matter which of the modules was passed in.\n *\n * ```\n * module A.B.C { }\n * ```\n */\nfunction getRootModuleDeclaration(node: ts.ModuleDeclaration): ts.Node {\n    while (node.parent && node.parent.kind === ts.SyntaxKind.ModuleDeclaration) {\n        let parent = <ts.ModuleDeclaration> node.parent;\n        if (node.name.pos === parent.name.end + 1) {\n            node = parent;\n        } else {\n            break;\n        }\n    }\n\n    return node;\n}\n\n/**\n * Derived from the internal ts utility\n * https://github.com/Microsoft/TypeScript/blob/v3.2.2/src/compiler/utilities.ts#L954\n * @param node\n * @param text\n */\nfunction getJSDocCommentRanges(node: ts.Node, text: string): ts.CommentRange[] {\n    const hasTrailingCommentRanges = [\n        ts.SyntaxKind.Parameter,\n        ts.SyntaxKind.FunctionExpression,\n        ts.SyntaxKind.ArrowFunction,\n        ts.SyntaxKind.ParenthesizedExpression\n    ].includes(node.kind);\n\n    let commentRanges = toArray(ts.getLeadingCommentRanges(text, node.pos));\n    if (hasTrailingCommentRanges) {\n        commentRanges = toArray(ts.getTrailingCommentRanges(text, node.pos)).concat(commentRanges);\n    }\n\n    // True if the comment starts with '/**' but not if it is '/**/'\n    return commentRanges.filter(({ pos }) => text.substr(pos, 3) === '/**' && text[pos + 4] !== '/');\n}\n\n/**\n * Return the raw comment string for the given node.\n *\n * @param node  The node whose comment should be resolved.\n * @returns     The raw comment string or undefined if no comment could be found.\n */\nexport function getRawComment(node: ts.Node): string | undefined {\n    if (node.parent && node.parent.kind === ts.SyntaxKind.VariableDeclarationList) {\n        node = node.parent.parent;\n    } else if (node.kind === ts.SyntaxKind.ModuleDeclaration) {\n        if (!isTopmostModuleDeclaration(<ts.ModuleDeclaration> node)) {\n            return;\n        } else {\n            node = getRootModuleDeclaration(<ts.ModuleDeclaration> node);\n        }\n    }\n\n    const sourceFile = node.getSourceFile();\n    const comments = getJSDocCommentRanges(node, sourceFile.text);\n    if (comments.length) {\n        let comment: ts.CommentRange;\n        if (node.kind === ts.SyntaxKind.SourceFile) {\n            if (comments.length === 1) {\n                return;\n            }\n            comment = comments[0];\n        } else {\n            comment = comments[comments.length - 1];\n        }\n\n        return sourceFile.text.substring(comment.pos, comment.end);\n    } else {\n        return;\n    }\n}\n\n/**\n * Parse the given doc comment string.\n *\n * @param text     The doc comment string that should be parsed.\n * @param comment  The [[Models.Comment]] instance the parsed results should be stored into.\n * @returns        A populated [[Models.Comment]] instance.\n */\nexport function parseComment(text: string, comment: Comment = new Comment()): Comment {\n    let currentTag: CommentTag;\n    let shortText = 0;\n\n    function consumeTypeData(line: string): string {\n        line = line.replace(/^\\{[^\\}]*\\}+/, '');\n        line = line.replace(/^\\[[^\\[][^\\]]*\\]+/, '');\n        return line.trim();\n    }\n\n    function readBareLine(line: string) {\n        if (currentTag) {\n            currentTag.text += '\\n' + line;\n        } else if (line === '' && shortText === 0) {\n            // Ignore\n        } else if (line === '' && shortText === 1) {\n            shortText = 2;\n        } else {\n            if (shortText === 2) {\n                comment.text += (comment.text === '' ? '' : '\\n') + line;\n            } else {\n                comment.shortText += (comment.shortText === '' ? '' : '\\n') + line;\n                shortText = 1;\n            }\n        }\n    }\n\n    function readTagLine(line: string, tag: RegExpExecArray) {\n        let tagName = tag[1].toLowerCase();\n        let paramName: string | undefined;\n        line = line.substr(tagName.length + 1).trim();\n\n        if (tagName === 'return') { tagName = 'returns'; }\n        if (tagName === 'param' || tagName === 'typeparam') {\n            line = consumeTypeData(line);\n            const param = /[^\\s]+/.exec(line);\n            if (param) {\n                paramName = param[0];\n                line = line.substr(paramName.length + 1).trim();\n            }\n            line = consumeTypeData(line);\n            line = line.replace(/^\\-\\s+/, '');\n        } else if (tagName === 'returns') {\n            line = consumeTypeData(line);\n        }\n\n        currentTag = new CommentTag(tagName, paramName, line);\n        if (!comment.tags) { comment.tags = []; }\n        comment.tags.push(currentTag);\n    }\n\n    const CODE_FENCE = /^\\s*```(?!.*```)/;\n    let inCode = false;\n    function readLine(line: string) {\n        line = line.replace(/^\\s*\\*? ?/, '');\n        line = line.replace(/\\s*$/, '');\n\n        if (CODE_FENCE.test(line) ) {\n          inCode = !inCode;\n        }\n\n        if (!inCode) {\n          const tag = /^@(\\S+)/.exec(line);\n          if (tag) {\n            return readTagLine(line, tag);\n          }\n        }\n        readBareLine(line);\n    }\n\n    text = text.replace(/^\\s*\\/\\*+/, '');\n    text = text.replace(/\\*+\\/\\s*$/, '');\n    text.split(/\\r\\n?|\\n/).forEach(readLine);\n\n    return comment;\n}\n"]}