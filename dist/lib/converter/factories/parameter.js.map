{"version":3,"file":"parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/parameter.ts"],"names":[],"mappings":";;AACA,uCAAyC;AAEzC,wDAA0H;AAE1H,0CAAyC;AACzC,4DAA4D;AAS5D,yBAAgC,OAAgB,EAAE,IAA6B;IAC3E,IAAM,SAAS,GAAyB,OAAO,CAAC,KAAK,CAAC;IACtD,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,YAAY,2BAAmB,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC;IAED,IAAM,SAAS,GAAG,IAAI,2BAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;IACjG,OAAO,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC5C,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE;QACzB,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACnE,SAAS,CAAC,IAAI,GAAG,mBAAmB,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxG,CAAC;QAED,SAAS,CAAC,YAAY,GAAG,wCAAmB,CAAC,IAAI,CAAC,CAAC;QACnD,SAAS,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjE,SAAS,CAAC,OAAO,CAAC,sBAAc,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,SAAS,CAAC,OAAO,CAAC,sBAAc,CAAC,YAAY,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAEzE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,UAAU,GAAG,EAAE,CAAC;QAC9B,CAAC;QACD,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,OAAO,CAAC,qBAAS,CAAC,sBAAsB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACnE,MAAM,CAAC,SAAS,CAAC;AACrB,CAAC;AA7BD,0CA6BC","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { ReflectionFlag, ReflectionKind, ParameterReflection, SignatureReflection } from '../../models/reflections/index';\nimport { Context } from '../context';\nimport { Converter } from '../converter';\nimport { convertDefaultValue } from '../convert-expression';\n\n/**\n * Create a parameter reflection for the given node.\n *\n * @param context  The context object describing the current state the converter is in.\n * @param node  The parameter node that should be reflected.\n * @returns The newly created parameter reflection.\n */\nexport function createParameter(context: Context, node: ts.ParameterDeclaration): ParameterReflection {\n    const signature = <SignatureReflection> context.scope;\n    if (!(signature instanceof SignatureReflection)) {\n        throw new Error('Expected signature reflection.');\n    }\n\n    const parameter = new ParameterReflection(signature, node.symbol.name, ReflectionKind.Parameter);\n    context.registerReflection(parameter, node);\n    context.withScope(parameter, () => {\n        if (_ts.isBindingPattern(node.name)) {\n            parameter.type = context.converter.convertType(context, node.name);\n            parameter.name = '__namedParameters';\n        } else {\n            parameter.type = context.converter.convertType(context, node.type, context.getTypeAtLocation(node));\n        }\n\n        parameter.defaultValue = convertDefaultValue(node);\n        parameter.setFlag(ReflectionFlag.Optional, !!node.questionToken);\n        parameter.setFlag(ReflectionFlag.Rest, !!node.dotDotDotToken);\n        parameter.setFlag(ReflectionFlag.DefaultValue, !!parameter.defaultValue);\n\n        if (!signature.parameters) {\n            signature.parameters = [];\n        }\n        signature.parameters.push(parameter);\n    });\n\n    context.trigger(Converter.EVENT_CREATE_PARAMETER, parameter, node);\n    return parameter;\n}\n"]}