{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../../src/lib/converter/converter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../ts-internal';\nimport * as _ from 'lodash';\n\nimport { Application } from '../application';\nimport { ParameterType } from '../utils/options/declaration';\nimport { Reflection, Type, ProjectReflection } from '../models/index';\nimport { Context } from './context';\nimport { ConverterComponent, ConverterNodeComponent, ConverterTypeComponent, TypeTypeConverter, TypeNodeConverter } from './components';\nimport { Component, Option, ChildableComponent, ComponentClass } from '../utils/component';\nimport { normalizePath } from '../utils/fs';\nimport { createMinimatch } from '../utils/paths';\n\n/**\n * Result structure of the [[Converter.convert]] method.\n */\nexport interface ConverterResult {\n    /**\n     * An array containing all errors generated by the TypeScript compiler.\n     */\n    errors: ReadonlyArray<ts.Diagnostic>;\n\n    /**\n     * The resulting project reflection.\n     */\n    project: ProjectReflection;\n}\n\n/**\n * Compiles source files using TypeScript and converts compiler symbols to reflections.\n */\n@Component({name: 'converter', internal: true, childClass: ConverterComponent})\nexport class Converter extends ChildableComponent<Application, ConverterComponent> {\n    /**\n     * The human readable name of the project. Used within the templates to set the title of the document.\n     */\n    @Option({\n        name: 'name',\n        help: 'Set the name of the project that will be used in the header of the template.'\n    })\n    name!: string;\n\n    @Option({\n        name: 'externalPattern',\n        help: 'Define patterns for files that should be considered being external.',\n        type: ParameterType.Array\n    })\n    externalPattern!: Array<string>;\n\n    @Option({\n        name: 'includeDeclarations',\n        help: 'Turn on parsing of .d.ts declaration files.',\n        type: ParameterType.Boolean\n    })\n    includeDeclarations!: boolean;\n\n    @Option({\n        name: 'excludeExternals',\n        help: 'Prevent externally resolved TypeScript files from being documented.',\n        type: ParameterType.Boolean\n    })\n    excludeExternals!: boolean;\n\n    @Option({\n        name: 'excludeNotExported',\n        help: 'Prevent symbols that are not exported from being documented.',\n        type: ParameterType.Boolean\n    })\n    excludeNotExported!: boolean;\n\n    @Option({\n        name: 'excludePrivate',\n        help: 'Ignores private variables and methods',\n        type: ParameterType.Boolean\n    })\n    excludePrivate!: boolean;\n\n    @Option({\n        name: 'excludeProtected',\n        help: 'Ignores protected variables and methods',\n        type: ParameterType.Boolean\n    })\n    excludeProtected!: boolean;\n\n    /**\n     * Defined in the initialize method\n     */\n    private nodeConverters!: {[syntaxKind: number]: ConverterNodeComponent<ts.Node>};\n\n    /**\n     * Defined in the initialize method\n     */\n    private typeNodeConverters!: TypeNodeConverter<ts.Type, ts.Node>[];\n\n    /**\n     * Defined in the initialize method\n     */\n    private typeTypeConverters!: TypeTypeConverter<ts.Type>[];\n\n    /**\n     * General events\n     */\n\n    /**\n     * Triggered when the converter begins converting a project.\n     * The listener should implement [[IConverterCallback]].\n     * @event\n     */\n    static EVENT_BEGIN = 'begin';\n\n    /**\n     * Triggered when the converter has finished converting a project.\n     * The listener should implement [[IConverterCallback]].\n     * @event\n     */\n    static EVENT_END = 'end';\n\n    /**\n     * Factory events\n     */\n\n    /**\n     * Triggered when the converter begins converting a source file.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_FILE_BEGIN = 'fileBegin';\n\n    /**\n     * Triggered when the converter has created a declaration reflection.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_CREATE_DECLARATION = 'createDeclaration';\n\n    /**\n     * Triggered when the converter has created a signature reflection.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_CREATE_SIGNATURE = 'createSignature';\n\n    /**\n     * Triggered when the converter has created a parameter reflection.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_CREATE_PARAMETER = 'createParameter';\n\n    /**\n     * Triggered when the converter has created a type parameter reflection.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_CREATE_TYPE_PARAMETER = 'createTypeParameter';\n\n    /**\n     * Triggered when the converter has found a function implementation.\n     * The listener should implement [[IConverterNodeCallback]].\n     * @event\n     */\n    static EVENT_FUNCTION_IMPLEMENTATION = 'functionImplementation';\n\n    /**\n     * Resolve events\n     */\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     * The listener should implement [[IConverterCallback]].\n     * @event\n     */\n    static EVENT_RESOLVE_BEGIN = 'resolveBegin';\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     * The listener should implement [[IConverterResolveCallback]].\n     * @event\n     */\n    static EVENT_RESOLVE = 'resolveReflection';\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     * The listener should implement [[IConverterCallback]].\n     * @event\n     */\n    static EVENT_RESOLVE_END = 'resolveEnd';\n\n    /**\n     * Create a new Converter instance.\n     *\n     * @param application  The application instance this converter relies on. The application\n     *   must expose the settings that should be used and serves as a global logging endpoint.\n     */\n    initialize() {\n        this.nodeConverters = {};\n        this.typeTypeConverters = [];\n        this.typeNodeConverters = [];\n    }\n\n    addComponent<T extends ConverterComponent & Component>(name: string, componentClass: T | ComponentClass<T>): T {\n        const component = super.addComponent(name, componentClass);\n        if (component instanceof ConverterNodeComponent) {\n            this.addNodeConverter(component);\n        } else if (component instanceof ConverterTypeComponent) {\n            this.addTypeConverter(component);\n        }\n\n        return component;\n    }\n\n    private addNodeConverter(converter: ConverterNodeComponent<any>) {\n        for (let supports of converter.supports) {\n            this.nodeConverters[supports] = converter;\n        }\n    }\n\n    private addTypeConverter(converter: ConverterTypeComponent) {\n        if ('supportsNode' in converter && 'convertNode' in converter) {\n            this.typeNodeConverters.push(<TypeNodeConverter<any, any>> converter);\n            this.typeNodeConverters.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n        }\n\n        if ('supportsType' in converter && 'convertType' in converter) {\n            this.typeTypeConverters.push(<TypeTypeConverter<any>> converter);\n            this.typeTypeConverters.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n        }\n    }\n\n    removeComponent(name: string): ConverterComponent | undefined {\n        const component = super.removeComponent(name);\n        if (component instanceof ConverterNodeComponent) {\n            this.removeNodeConverter(component);\n        } else if (component instanceof ConverterTypeComponent) {\n            this.removeTypeConverter(component);\n        }\n\n        return component;\n    }\n\n    private removeNodeConverter(converter: ConverterNodeComponent<any>) {\n        const converters = this.nodeConverters;\n        const keys = _.keys(this.nodeConverters);\n        for (let key of keys) {\n            if (converters[key] === converter) {\n                delete converters[key];\n            }\n        }\n    }\n\n    private removeTypeConverter(converter: ConverterTypeComponent) {\n        const typeIndex = this.typeTypeConverters.indexOf(<any> converter);\n        if (typeIndex !== -1) {\n            this.typeTypeConverters.splice(typeIndex, 1);\n        }\n\n        const nodeIndex = this.typeNodeConverters.indexOf(<any> converter);\n        if (nodeIndex !== -1) {\n            this.typeNodeConverters.splice(nodeIndex, 1);\n        }\n    }\n\n    removeAllComponents() {\n        super.removeAllComponents();\n\n        this.nodeConverters = {};\n        this.typeTypeConverters = [];\n        this.typeNodeConverters = [];\n    }\n\n    /**\n     * Compile the given source files and create a project reflection for them.\n     *\n     * @param fileNames  Array of the file names that should be compiled.\n     */\n    convert(fileNames: string[]): ConverterResult {\n        const normalizedFiles = fileNames.map(normalizePath);\n\n        const program = ts.createProgram(normalizedFiles, this.application.options.getCompilerOptions());\n        const checker = program.getTypeChecker();\n        const context = new Context(this, normalizedFiles, checker, program);\n\n        this.trigger(Converter.EVENT_BEGIN, context);\n\n        const errors = this.compile(context);\n        const project = this.resolve(context);\n\n        this.trigger(Converter.EVENT_END, context);\n\n        return {\n            errors: errors,\n            project: project\n        };\n    }\n\n    /**\n     * Analyze the given node and create a suitable reflection.\n     *\n     * This function checks the kind of the node and delegates to the matching function implementation.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The compiler node that should be analyzed.\n     * @return The resulting reflection or undefined.\n     */\n    convertNode(context: Context, node: ts.Node): Reflection | undefined {\n        if (context.visitStack.includes(node)) {\n            return;\n        }\n\n        const oldVisitStack = context.visitStack;\n        context.visitStack = oldVisitStack.slice();\n        context.visitStack.push(node);\n\n        let result: Reflection | undefined;\n        if (node.kind in this.nodeConverters) {\n            result = this.nodeConverters[node.kind].convert(context, node);\n        }\n\n        context.visitStack = oldVisitStack;\n        return result;\n    }\n\n    /**\n     * Convert the given TypeScript type into its TypeDoc type reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The node whose type should be reflected.\n     * @param type  The type of the node if already known.\n     * @returns The TypeDoc type reflection representing the given node and type.\n     */\n    convertType(context: Context, node?: ts.Node, type?: ts.Type): Type | undefined {\n        // Run all node based type conversions\n        if (node) {\n            type = type || context.getTypeAtLocation(node);\n\n            for (let converter of this.typeNodeConverters) {\n                if (converter.supportsNode(context, node, type)) {\n                    return converter.convertNode(context, node, type);\n                }\n            }\n        }\n\n        // Run all type based type conversions\n        if (type) {\n            for (let converter of this.typeTypeConverters) {\n                if (converter.supportsType(context, type)) {\n                    return converter.convertType(context, type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function to convert multiple types at once, filtering out types which fail to convert.\n     *\n     * @param context\n     * @param nodes\n     */\n    convertTypes(context: Context, nodes: ReadonlyArray<ts.Node> = [], types: ReadonlyArray<ts.Type> = []): Type[] {\n        const result: Type[] = [];\n        _.zip(nodes, types).forEach(([node, type]) => {\n            const converted = this.convertType(context, node, type);\n            if (converted) {\n                result.push(converted);\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Compile the files within the given context and convert the compiler symbols to reflections.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @returns An array containing all errors generated by the TypeScript compiler.\n     */\n    private compile(context: Context): ReadonlyArray<ts.Diagnostic> {\n        const program = context.program;\n\n        const exclude = createMinimatch(this.application.exclude || []);\n        const isExcluded = (file: ts.SourceFile) => exclude.some(mm => mm.match(file.fileName));\n\n        const includedSourceFiles = program.getSourceFiles()\n            .filter(file => !isExcluded(file));\n        const isRelevantError = ({ file }: ts.Diagnostic) => !file || includedSourceFiles.includes(file);\n\n        includedSourceFiles.forEach((sourceFile) => {\n            this.convertNode(context, sourceFile);\n        });\n\n        let diagnostics = program.getOptionsDiagnostics().filter(isRelevantError);\n        if (diagnostics.length) {\n            return diagnostics;\n        }\n\n        diagnostics = program.getSyntacticDiagnostics().filter(isRelevantError);\n        if (diagnostics.length) {\n            return diagnostics;\n        }\n\n        diagnostics = program.getGlobalDiagnostics().filter(isRelevantError);\n        if (diagnostics.length) {\n            return diagnostics;\n        }\n\n        diagnostics = program.getSemanticDiagnostics().filter(isRelevantError);\n        if (diagnostics.length) {\n            return diagnostics;\n        }\n\n        return [];\n    }\n\n    /**\n     * Resolve the project within the given context.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @returns The final project reflection.\n     */\n    private resolve(context: Context): ProjectReflection {\n        this.trigger(Converter.EVENT_RESOLVE_BEGIN, context);\n        const project = context.project;\n\n        for (let id in project.reflections) {\n            if (!project.reflections.hasOwnProperty(id)) {\n                continue;\n            }\n            this.trigger(Converter.EVENT_RESOLVE, context, project.reflections[id]);\n        }\n\n        this.trigger(Converter.EVENT_RESOLVE_END, context);\n        return project;\n    }\n\n    /**\n     * Return the basename of the default library that should be used.\n     *\n     * @returns The basename of the default library.\n     */\n    getDefaultLib(): string {\n        return ts.getDefaultLibFileName(this.application.options.getCompilerOptions());\n    }\n}\n"]}