{"version":3,"file":"variable.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/variable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionFlag, ReflectionKind, IntrinsicType } from '../../models/index';\nimport { createDeclaration, createComment } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { convertDefaultValue } from '../index';\n\n@Component({name: 'node:variable'})\nexport class VariableConverter extends ConverterNodeComponent<ts.VariableDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.PropertySignature,\n        ts.SyntaxKind.PropertyDeclaration,\n        ts.SyntaxKind.PropertyAssignment,\n        ts.SyntaxKind.ShorthandPropertyAssignment,\n        ts.SyntaxKind.VariableDeclaration,\n        ts.SyntaxKind.BindingElement\n    ];\n\n    isSimpleObjectLiteral(objectLiteral: ts.ObjectLiteralExpression): boolean {\n        if (!objectLiteral.properties) {\n            return true;\n        }\n        return objectLiteral.properties.length === 0;\n    }\n\n    /**\n     * Analyze the given variable declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The variable declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.VariableDeclaration): Reflection {\n        const comment = createComment(node);\n        if (comment && comment.hasTag('resolve')) {\n            const resolveType = context.getTypeAtLocation(node);\n            if (resolveType && resolveType.symbol) {\n                const resolved = this.owner.convertNode(context, resolveType.symbol.declarations[0]);\n                if (resolved) {\n                    resolved.name = node.symbol.name;\n                }\n                return resolved;\n            }\n        }\n\n        let name: string, isBindingPattern: boolean;\n        if (_ts.isBindingPattern(node.name)) {\n            if (node['propertyName']) {\n                name = _ts.declarationNameToString(node['propertyName']);\n                isBindingPattern = true;\n            } else {\n                return null;\n            }\n        }\n\n        const scope = context.scope;\n        const kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Property : ReflectionKind.Variable;\n        const variable = createDeclaration(context, node, kind, name);\n\n        // The variable can be null if `excludeNotExported` is `true`\n        if (variable) {\n            switch (kind) {\n                case ReflectionKind.Variable:\n                    if (node.parent.flags & ts.NodeFlags.Const) {\n                        variable.setFlag(ReflectionFlag.Const, true);\n                    } else if (node.parent.flags & ts.NodeFlags.Let) {\n                        variable.setFlag(ReflectionFlag.Let, true);\n                    }\n                    break;\n                case ReflectionKind.Property:\n                    if (node.modifiers\n                        && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\n                    variable.setFlag(ReflectionFlag.Abstract, true);\n                    }\n                    break;\n            }\n        }\n\n        context.withScope(variable, () => {\n            if (node.initializer) {\n                switch (node.initializer.kind) {\n                    case ts.SyntaxKind.ArrowFunction:\n                    case ts.SyntaxKind.FunctionExpression:\n                        variable.kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Method : ReflectionKind.Function;\n                        this.owner.convertNode(context, node.initializer);\n                        break;\n                    case ts.SyntaxKind.ObjectLiteralExpression:\n                        if (!this.isSimpleObjectLiteral(<ts.ObjectLiteralExpression> node.initializer)) {\n                            variable.kind = ReflectionKind.ObjectLiteral;\n                            variable.type = new IntrinsicType('object');\n                            this.owner.convertNode(context, node.initializer);\n                        }\n                        break;\n                    default:\n                        variable.defaultValue = convertDefaultValue(node);\n                }\n            }\n\n            if (variable.kind === kind || variable.kind === ReflectionKind.Event) {\n                if (isBindingPattern) {\n                    variable.type = this.owner.convertType(context, node.name);\n                } else {\n                    variable.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node));\n                }\n            }\n        });\n\n        return variable;\n    }\n}\n"]}