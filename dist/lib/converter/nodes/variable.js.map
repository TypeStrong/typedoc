{"version":3,"file":"variable.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/variable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionFlag, ReflectionKind, IntrinsicType } from '../../models/index';\nimport { createDeclaration, createComment } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { convertDefaultValue } from '../index';\n\n@Component({name: 'node:variable'})\nexport class VariableConverter extends ConverterNodeComponent<ts.VariableDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.PropertySignature,\n        ts.SyntaxKind.PropertyDeclaration,\n        ts.SyntaxKind.PropertyAssignment,\n        ts.SyntaxKind.ShorthandPropertyAssignment,\n        ts.SyntaxKind.VariableDeclaration,\n        ts.SyntaxKind.BindingElement\n    ];\n\n    isSimpleObjectLiteral(objectLiteral: ts.ObjectLiteralExpression): boolean {\n        if (!objectLiteral.properties) {\n            return true;\n        }\n        return objectLiteral.properties.length === 0;\n    }\n\n    /**\n     * Analyze the given variable declaration node and create a suitable reflection.\n     * TODO: the type of `node` is incorrect, it should be a union of ts.PropertySignature | ts.PropertyDeclaration | ...\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The variable declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.VariableDeclaration): Reflection | undefined {\n        const comment = createComment(node);\n        if (comment && comment.hasTag('resolve')) {\n            const resolveType = context.getTypeAtLocation(node);\n            if (resolveType && resolveType.symbol) {\n                const resolved = this.owner.convertNode(context, resolveType.symbol.declarations[0]);\n                if (resolved && node.symbol) {\n                    resolved.name = node.symbol.name;\n                }\n                return resolved;\n            }\n        }\n\n        let name: string | undefined;\n        let isBindingPattern: boolean;\n        if (ts.isArrayBindingPattern(node.name) || ts.isObjectBindingPattern(node.name)) {\n            if (ts.isBindingElement(node) && node.propertyName) {\n                name = node.propertyName.getText();\n                isBindingPattern = true;\n            } else {\n                return;\n            }\n        }\n\n        const scope = context.scope;\n        const kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Property : ReflectionKind.Variable;\n        const variable = createDeclaration(context, node, kind, name);\n\n        // The variable can be null if `excludeNotExported` is `true`\n        if (variable) {\n            switch (kind) {\n                case ReflectionKind.Variable:\n                    if (node.parent.flags & ts.NodeFlags.Const) {\n                        variable.setFlag(ReflectionFlag.Const, true);\n                    } else if (node.parent.flags & ts.NodeFlags.Let) {\n                        variable.setFlag(ReflectionFlag.Let, true);\n                    }\n                    break;\n                case ReflectionKind.Property:\n                    if (node.modifiers\n                        && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\n                    variable.setFlag(ReflectionFlag.Abstract, true);\n                    }\n                    break;\n            }\n        }\n\n        context.withScope(variable, () => {\n            if (node.initializer) {\n                switch (node.initializer.kind) {\n                    case ts.SyntaxKind.ArrowFunction:\n                    case ts.SyntaxKind.FunctionExpression:\n                        variable!.kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Method : ReflectionKind.Function;\n                        this.owner.convertNode(context, node.initializer);\n                        break;\n                    case ts.SyntaxKind.ObjectLiteralExpression:\n                        if (!this.isSimpleObjectLiteral(<ts.ObjectLiteralExpression> node.initializer)) {\n                            variable!.kind = ReflectionKind.ObjectLiteral;\n                            variable!.type = new IntrinsicType('object');\n                            this.owner.convertNode(context, node.initializer);\n                        }\n                        break;\n                    default:\n                        variable!.defaultValue = convertDefaultValue(node);\n                }\n            }\n\n            if (variable!.kind === kind || variable!.kind === ReflectionKind.Event) {\n                if (isBindingPattern) {\n                    variable!.type = this.owner.convertType(context, node.name);\n                } else {\n                    variable!.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node));\n                }\n            }\n        });\n\n        return variable;\n    }\n}\n"]}