{"version":3,"file":"function.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/function.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgF;AAChF,4CAAwE;AAExE,0CAAyC;AACzC,4CAAkE;AAGlE;IAAuC,qCAAmE;IAD1G;QAAA,qEA6CC;QAxCG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,eAAe;YAC7B,EAAE,CAAC,UAAU,CAAC,iBAAiB;YAC/B,EAAE,CAAC,UAAU,CAAC,mBAAmB;SACpC,CAAC;;IAoCN,CAAC;IA3BG,mCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAiD;QACvE,IAAM,KAAK,GAAK,OAAO,CAAC,KAAK,CAAC;QAC9B,IAAM,IAAI,GAAM,KAAK,CAAC,IAAI,GAAG,sBAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,sBAAc,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAc,CAAC,QAAQ,CAAC;QAC/G,IAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,IAAM,MAAM,GAAI,yBAAiB,CAAC,OAAO,EAAY,IAAI,EAAE,IAAI,CAAC,CAAC;QAEjE,EAAE,CAAC,CAAC,MAAM;eACH,IAAI,GAAG,sBAAc,CAAC,MAAM;eAC5B,IAAI,CAAC,SAAS;eACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,eAAe,EAAxC,CAAwC,CAAE,CAAC,CAAC,CAAC;YAC5E,MAAM,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;QAED,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE;YACtB,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjC,IAAM,SAAS,GAAG,uBAAe,CAAC,OAAO,EAA4B,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,sBAAc,CAAC,aAAa,CAAC,CAAC;gBACtH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;gBAC3B,CAAC;gBACD,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,OAAO,CAAC,qBAAS,CAAC,6BAA6B,EAAE,MAAM,EAAY,IAAI,CAAC,CAAC;YACrF,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IA3CQ,iBAAiB;QAD7B,sBAAS,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,CAAC;OACtB,iBAAiB,CA4C7B;IAAD,wBAAC;CAAA,AA5CD,CAAuC,mCAAsB,GA4C5D;AA5CY,8CAAiB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionFlag, ReflectionKind } from '../../models/index';\nimport { createDeclaration, createSignature } from '../factories/index';\nimport { Context } from '../context';\nimport { Converter } from '../converter';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:function'})\nexport class FunctionConverter extends ConverterNodeComponent<ts.FunctionDeclaration|ts.MethodDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.MethodSignature,\n        ts.SyntaxKind.MethodDeclaration,\n        ts.SyntaxKind.FunctionDeclaration\n    ];\n\n    /**\n     * Analyze the given function declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The function declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.FunctionDeclaration|ts.MethodDeclaration): Reflection {\n        const scope   = context.scope;\n        const kind    = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Method : ReflectionKind.Function;\n        const hasBody = !!node.body;\n        const method  = createDeclaration(context, <ts.Node> node, kind);\n\n        if (method  // child inheriting will return null on createDeclaration\n            && kind & ReflectionKind.Method\n            && node.modifiers\n            && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\n          method.setFlag(ReflectionFlag.Abstract, true);\n        }\n\n        context.withScope(method, () => {\n            if (!hasBody || !method.signatures) {\n                const signature = createSignature(context, <ts.SignatureDeclaration> node, method.name, ReflectionKind.CallSignature);\n                if (!method.signatures) {\n                    method.signatures = [];\n                }\n                method.signatures.push(signature);\n            } else {\n                context.trigger(Converter.EVENT_FUNCTION_IMPLEMENTATION, method, <ts.Node> node);\n            }\n        });\n\n        return method;\n    }\n}\n"]}