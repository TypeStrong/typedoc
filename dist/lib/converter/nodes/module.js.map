{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/module.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAuF;AACvF,8CAAuD;AAEvD,8CAAkE;AAGlE,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,mCAA4C;IADjF;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,iBAAiB;SAClC,CAAC;IAoBN,CAAC;IAXG,OAAO,CAAC,OAAgB,EAAE,IAA0B;QAChD,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,IAAI;YAClE,CAAC,CAAyB,OAAO,CAAC,KAAK;YACvC,CAAC,CAAC,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,MAAM,CAAC,CAAC;QAC9D,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE;YAC/B,IAAI,IAAI,CAAC,IAAI,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aAC9C;QACL,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACtB,CAAC;CACJ,CAAA;AA1BY,eAAe;IAD3B,sBAAS,CAAC,EAAC,IAAI,EAAE,aAAa,EAAC,CAAC;GACpB,eAAe,CA0B3B;AA1BY,0CAAe","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:module'})\nexport class ModuleConverter extends ConverterNodeComponent<ts.ModuleDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.ModuleDeclaration\n    ];\n\n    /**\n     * Analyze the given module node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The module node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.ModuleDeclaration): Reflection | undefined {\n        const reflection = context.isInherit && context.inheritParent === node\n            ? <DeclarationReflection> context.scope\n            : createDeclaration(context, node, ReflectionKind.Module);\n        context.withScope(reflection, () => {\n            if (node.body) {\n                this.owner.convertNode(context, node.body);\n            }\n        });\n        return reflection;\n    }\n}\n"]}