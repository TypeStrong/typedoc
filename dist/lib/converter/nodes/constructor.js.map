{"version":3,"file":"constructor.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/constructor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind, ReflectionFlag, ReferenceType, Comment } from '../../models/index';\nimport { createDeclaration, createSignature, createComment } from '../factories/index';\nimport { Context } from '../context';\nimport { Converter } from '../converter';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:constructor'})\nexport class ConstructorConverter extends ConverterNodeComponent<ts.ConstructorDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.Constructor,\n        ts.SyntaxKind.ConstructSignature\n    ];\n\n    /**\n     * Analyze the given constructor declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The constructor declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.ConstructorDeclaration): Reflection | undefined {\n        const parent = context.scope;\n        const hasBody = !!node.body;\n        const method = createDeclaration(context, node, ReflectionKind.Constructor, 'constructor');\n\n        if (node.parameters && node.parameters.length) {\n            const comment = method ? method.comment : createComment(node);\n            for (let parameter of node.parameters) {\n                this.addParameterProperty(context, parameter, comment);\n            }\n        }\n\n        context.withScope(method, () => {\n            if (!hasBody || !method!.signatures) {\n                const name = 'new ' + parent.name;\n                const signature = createSignature(context, node, name, ReflectionKind.ConstructorSignature);\n                // If no return type defined, use the parent one.\n                if (!node.type) {\n                    signature.type = new ReferenceType(parent.name, ReferenceType.SYMBOL_ID_RESOLVED, parent);\n                }\n                method!.signatures = method!.signatures || [];\n                method!.signatures.push(signature);\n            } else {\n                context.trigger(Converter.EVENT_FUNCTION_IMPLEMENTATION, method!, node);\n            }\n        });\n\n        return method;\n    }\n\n    /**\n     * Analyze parameters in given constructor declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The constructor declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    private addParameterProperty(context: Context, parameter: ts.ParameterDeclaration, comment?: Comment) {\n        const modifiers = ts.getCombinedModifierFlags(parameter);\n        const visibility = modifiers & (ts.ModifierFlags.Public | ts.ModifierFlags.Protected |\n                                        ts.ModifierFlags.Private | ts.ModifierFlags.Readonly);\n        if (!visibility) {\n            return;\n        }\n\n        const privateParameter = modifiers & ts.ModifierFlags.Private;\n        if (privateParameter && context.converter.excludePrivate) {\n            return;\n        }\n\n        const protectedParameter = modifiers & ts.ModifierFlags.Protected;\n        if (protectedParameter && context.converter.excludeProtected) {\n            return;\n        }\n\n        const property = createDeclaration(context, parameter, ReflectionKind.Property);\n        if (!property) {\n            return;\n        }\n\n        property.setFlag(ReflectionFlag.Static, false);\n        property.type = this.owner.convertType(context, parameter.type, context.getTypeAtLocation(parameter));\n\n        if (comment) {\n            const tag = comment.getTag('param', property.name);\n            if (tag && tag.text) {\n                property.comment = new Comment(tag.text);\n            }\n        }\n    }\n}\n"]}