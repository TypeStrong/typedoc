{"version":3,"file":"class.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/class.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionFlag, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { toArray } from 'lodash';\n\n@Component({name: 'node:class'})\nexport class ClassConverter extends ConverterNodeComponent<ts.ClassDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.ClassExpression,\n        ts.SyntaxKind.ClassDeclaration\n    ];\n\n    /**\n     * Analyze the given class declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The class declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.ClassDeclaration): Reflection | undefined {\n        let reflection: DeclarationReflection | undefined;\n        if (context.isInherit && context.inheritParent === node) {\n            reflection = <DeclarationReflection> context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Class);\n            // set possible abstract flag here, where node is not the inherited parent\n            if (reflection && node.modifiers && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\n                reflection.setFlag(ReflectionFlag.Abstract, true);\n            }\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member) => {\n                    const modifiers = ts.getCombinedModifierFlags(member);\n                    const privateMember = (modifiers & ts.ModifierFlags.Private) > 0;\n                    const protectedMember = (modifiers & ts.ModifierFlags.Protected) > 0;\n                    const exclude = (context.converter.excludePrivate && privateMember)\n                        || (context.converter.excludeProtected && protectedMember);\n\n                    if (!exclude) {\n                        this.owner.convertNode(context, member);\n                    }\n                });\n            }\n\n            const extendsClause = toArray(node.heritageClauses).find(h => h.token === ts.SyntaxKind.ExtendsKeyword);\n            if (extendsClause) {\n                const baseType = extendsClause.types[0];\n                const type = context.getTypeAtLocation(baseType);\n                if (!context.isInherit) {\n                    if (!reflection!.extendedTypes) {\n                        reflection!.extendedTypes = [];\n                    }\n                    const convertedType = this.owner.convertType(context, baseType, type);\n                    if (convertedType) {\n                        reflection!.extendedTypes.push(convertedType);\n                    }\n                }\n\n                if (type) {\n                    const typesToInheritFrom: ts.Type[] = type.isIntersection() ? type.types : [ type ];\n\n                    typesToInheritFrom.forEach((typeToInheritFrom: ts.Type) => {\n                        typeToInheritFrom.symbol && typeToInheritFrom.symbol.declarations.forEach((declaration) => {\n                            context.inherit(declaration, baseType.typeArguments);\n                        });\n                    });\n                }\n            }\n\n            const implementsClause = toArray(node.heritageClauses).find(h => h.token === ts.SyntaxKind.ImplementsKeyword);\n            if (implementsClause) {\n                const implemented = this.owner.convertTypes(context, implementsClause.types);\n                reflection!.implementedTypes = (reflection!.implementedTypes || []).concat(implemented);\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}