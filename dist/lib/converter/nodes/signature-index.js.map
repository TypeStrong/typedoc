{"version":3,"file":"signature-index.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/signature-index.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAuF;AACvF,8CAAqD;AAErD,8CAAkE;AAGlE,IAAa,uBAAuB,GAApC,MAAa,uBAAwB,SAAQ,mCAA+C;IAD5F;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,cAAc;SAC/B,CAAC;IAiBN,CAAC;IARG,OAAO,CAAC,OAAgB,EAAE,IAA6B;QACnD,MAAM,KAAK,GAA2B,OAAO,CAAC,KAAK,CAAC;QACpD,IAAI,KAAK,YAAY,6BAAqB,EAAE;YACxC,KAAK,CAAC,cAAc,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,sBAAc,CAAC,cAAc,CAAC,CAAC;SACnG;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ,CAAA;AAvBY,uBAAuB;IADnC,sBAAS,CAAC,EAAC,IAAI,EAAE,sBAAsB,EAAC,CAAC;GAC7B,uBAAuB,CAuBnC;AAvBY,0DAAuB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createSignature } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:signature-index'})\nexport class IndexSignatureConverter extends ConverterNodeComponent<ts.SignatureDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.IndexSignature\n    ];\n\n    /**\n     * Analyze the given index signature declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The signature declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.SignatureDeclaration): Reflection {\n        const scope = <DeclarationReflection> context.scope;\n        if (scope instanceof DeclarationReflection) {\n            scope.indexSignature = createSignature(context, node, '__index', ReflectionKind.IndexSignature);\n        }\n\n        return scope;\n    }\n}\n"]}