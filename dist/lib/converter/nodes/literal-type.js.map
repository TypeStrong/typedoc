{"version":3,"file":"literal-type.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/literal-type.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAIjC,8CAAkE;AAGlE,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,mCAA0C;IADpF;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,WAAW;SAC5B,CAAC;IAkBN,CAAC;IATG,OAAO,CAAC,OAAgB,EAAE,IAAwB;QAC9C,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC1B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;SACN;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;CACJ,CAAA;AAxBY,oBAAoB;IADhC,sBAAS,CAAC,EAAC,IAAI,EAAE,mBAAmB,EAAC,CAAC;GAC1B,oBAAoB,CAwBhC;AAxBY,oDAAoB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection } from '../../models/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:literal-type'})\nexport class TypeLiteralConverter extends ConverterNodeComponent<ts.TypeLiteralNode> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.TypeLiteral\n    ];\n\n    /**\n     * Analyze the given type literal node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The type literal node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.TypeLiteralNode): Reflection {\n        if (node.members) {\n            node.members.forEach((node) => {\n                this.owner.convertNode(context, node);\n            });\n        }\n\n        return context.scope;\n    }\n}\n"]}