{"version":3,"file":"literal-object.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/literal-object.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAIjC,4CAAkE;AAGlE;IAA4C,0CAAkD;IAD9F;QAAA,qEAyBC;QApBG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,uBAAuB;SACxC,CAAC;;IAkBN,CAAC;IATG,wCAAO,GAAP,UAAQ,OAAgB,EAAE,IAAgC;QAA1D,iBAQC;QAPG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI;gBACzB,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IAvBQ,sBAAsB;QADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;OAC5B,sBAAsB,CAwBlC;IAAD,6BAAC;CAAA,AAxBD,CAA4C,mCAAsB,GAwBjE;AAxBY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection } from '../../models/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:literal-object'})\nexport class ObjectLiteralConverter extends ConverterNodeComponent<ts.ObjectLiteralExpression> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.ObjectLiteralExpression\n    ];\n\n    /**\n     * Analyze the given object literal node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The object literal node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.ObjectLiteralExpression): Reflection {\n        if (node.properties) {\n            node.properties.forEach((node) => {\n                this.owner.convertNode(context, node);\n            });\n        }\n\n        return context.scope;\n    }\n}\n"]}