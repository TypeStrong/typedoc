{"version":3,"file":"variable-statement.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/variable-statement.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAIjC,8CAAkE;AAGlE,IAAa,0BAA0B,GAAvC,MAAa,0BAA2B,SAAQ,mCAA4C;IAD5F;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,iBAAiB;SAClC,CAAC;IA0CN,CAAC;IAjCG,OAAO,CAAC,OAAgB,EAAE,IAA0B;QAChD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE;gBAC9D,IAAI,EAAE,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;oBAC3G,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;iBACjE;qBAAM;oBACH,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;iBACxD;YACL,CAAC,CAAC,CAAC;SACN;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IAQD,qBAAqB,CAAC,OAAgB,EAAE,IAAuB;QAC3D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAEzC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE;gBAC/B,OAAO;aACV;YAED,IAAI,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnF,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;aACrD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AAhDY,0BAA0B;IADtC,sBAAS,CAAC,EAAC,IAAI,EAAE,yBAAyB,EAAC,CAAC;GAChC,0BAA0B,CAgDtC;AAhDY,gEAA0B","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection } from '../../models/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:variable-statement'})\nexport class VariableStatementConverter extends ConverterNodeComponent<ts.VariableStatement> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.VariableStatement\n    ];\n\n    /**\n     * Analyze the given variable statement node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The variable statement node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.VariableStatement): Reflection {\n        if (node.declarationList && node.declarationList.declarations) {\n            node.declarationList.declarations.forEach((variableDeclaration) => {\n                if (ts.isArrayBindingPattern(variableDeclaration.name) || ts.isObjectBindingPattern(variableDeclaration.name)) {\n                    this.convertBindingPattern(context, variableDeclaration.name);\n                } else {\n                    this.owner.convertNode(context, variableDeclaration);\n                }\n            });\n        }\n\n        return context.scope;\n    }\n\n    /**\n     * Traverse the elements of the given binding pattern and create the corresponding variable reflections.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The binding pattern node that should be analyzed.\n     */\n    convertBindingPattern(context: Context, node: ts.BindingPattern) {\n        node.elements.forEach((element) => {\n            this.owner.convertNode(context, element);\n\n            if (!ts.isBindingElement(element)) {\n                return;\n            }\n\n            if (ts.isArrayBindingPattern(element.name) || ts.isObjectBindingPattern(element.name)) {\n                this.convertBindingPattern(context, element.name);\n            }\n        });\n    }\n}\n"]}