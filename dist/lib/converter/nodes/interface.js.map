{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/interface.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAGjC,8CAAuF;AACvF,8CAAuD;AAEvD,8CAAkE;AAClE,mCAAiC;AAGjC,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,mCAA+C;IADvF;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,oBAAoB;SACrC,CAAC;IAqDN,CAAC;IA5CG,OAAO,CAAC,OAAgB,EAAE,IAA6B;QACnD,IAAI,UAA6C,CAAC;QAClD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,IAAI,EAAE;YACrD,UAAU,GAA2B,OAAO,CAAC,KAAK,CAAC;SACtD;aAAM;YACH,UAAU,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;SAC3E;QAED,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACpD,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;aACN;YAED,MAAM,aAAa,GAAG,gBAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YACxG,IAAI,aAAa,EAAE;gBACf,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACrC,MAAM,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;wBACpB,IAAI,CAAC,UAAW,CAAC,aAAa,EAAE;4BAC5B,UAAW,CAAC,aAAa,GAAG,EAAE,CAAC;yBAClC;wBACD,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;wBACtE,IAAI,aAAa,EAAE;4BACf,UAAW,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yBACjD;qBACJ;oBAED,IAAI,IAAI,EAAE;wBACN,MAAM,kBAAkB,GAAc,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,IAAI,CAAE,CAAC;wBAEpF,kBAAkB,CAAC,OAAO,CAAC,CAAC,iBAA0B,EAAE,EAAE;4BACtD,iBAAiB,CAAC,MAAM,IAAI,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;gCACtF,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;4BACzD,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;qBACN;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;IACtB,CAAC;CACJ,CAAA;AA3DY,kBAAkB;IAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;GACvB,kBAAkB,CA2D9B;AA3DY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { toArray } from 'lodash';\n\n@Component({name: 'node:interface'})\nexport class InterfaceConverter extends ConverterNodeComponent<ts.InterfaceDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.InterfaceDeclaration\n    ];\n\n    /**\n     * Analyze the given interface declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The interface declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.InterfaceDeclaration): Reflection | undefined {\n        let reflection: DeclarationReflection | undefined;\n        if (context.isInherit && context.inheritParent === node) {\n            reflection = <DeclarationReflection> context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Interface);\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member) => {\n                    this.owner.convertNode(context, member);\n                });\n            }\n\n            const extendsClause = toArray(node.heritageClauses).find(h => h.token === ts.SyntaxKind.ExtendsKeyword);\n            if (extendsClause) {\n                extendsClause.types.forEach((baseType) => {\n                    const type = context.getTypeAtLocation(baseType);\n                    if (!context.isInherit) {\n                        if (!reflection!.extendedTypes) {\n                            reflection!.extendedTypes = [];\n                        }\n                        const convertedType = this.owner.convertType(context, baseType, type);\n                        if (convertedType) {\n                            reflection!.extendedTypes.push(convertedType);\n                        }\n                    }\n\n                    if (type) {\n                        const typesToInheritFrom: ts.Type[] = type.isIntersection() ? type.types : [ type ];\n\n                        typesToInheritFrom.forEach((typeToInheritFrom: ts.Type) => {\n                            typeToInheritFrom.symbol && typeToInheritFrom.symbol.declarations.forEach((declaration) => {\n                                context.inherit(declaration, baseType.typeArguments);\n                            });\n                        });\n                    }\n                });\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}