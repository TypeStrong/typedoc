{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/interface.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AACjC,uCAAyC;AAEzC,4CAAuF;AACvF,4CAAuD;AAEvD,4CAAkE;AAGlE;IAAwC,sCAA+C;IADvF;QAAA,qEAqDC;QAhDG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,oBAAoB;SACrC,CAAC;;IA8CN,CAAC;IArCG,oCAAO,GAAP,UAAQ,OAAgB,EAAE,IAA6B;QAAvD,iBAoCC;QAnCG,IAAI,UAAiC,CAAC;QACtC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;YACtD,UAAU,GAA2B,OAAO,CAAC,KAAK,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;QAC5E,CAAC;QAED,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,SAAS;oBACnC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAM,SAAS,GAAG,GAAG,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YACtD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;oBACvB,IAAM,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;oBACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;4BAC5B,UAAU,CAAC,aAAa,GAAG,EAAE,CAAC;wBAClC,CAAC;wBACD,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;oBACnF,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACtB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;4BACzC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;wBACzD,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAnDQ,kBAAkB;QAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;OACvB,kBAAkB,CAoD9B;IAAD,yBAAC;CAAA,AApDD,CAAwC,mCAAsB,GAoD7D;AApDY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:interface'})\nexport class InterfaceConverter extends ConverterNodeComponent<ts.InterfaceDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.InterfaceDeclaration\n    ];\n\n    /**\n     * Analyze the given interface declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The interface declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.InterfaceDeclaration): Reflection {\n        let reflection: DeclarationReflection;\n        if (context.isInherit && context.inheritParent === node) {\n            reflection = <DeclarationReflection> context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Interface);\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member, isInherit) => {\n                    this.owner.convertNode(context, member);\n                });\n            }\n\n            const baseTypes = _ts.getInterfaceBaseTypeNodes(node);\n            if (baseTypes) {\n                baseTypes.forEach((baseType) => {\n                    const type = context.getTypeAtLocation(baseType);\n                    if (!context.isInherit) {\n                        if (!reflection.extendedTypes) {\n                            reflection.extendedTypes = [];\n                        }\n                        reflection.extendedTypes.push(this.owner.convertType(context, baseType, type));\n                    }\n\n                    if (type && type.symbol) {\n                        type.symbol.declarations.forEach((declaration) => {\n                            context.inherit(declaration, baseType.typeArguments);\n                        });\n                    }\n                });\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}