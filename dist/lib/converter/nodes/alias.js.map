{"version":3,"file":"alias.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/alias.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgE;AAChE,4CAAuD;AAEvD,4CAAkE;AAGlE;IAAoC,kCAA+C;IADnF;QAAA,qEAyBC;QApBG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,oBAAoB;SACrC,CAAC;;IAkBN,CAAC;IATG,gCAAO,GAAP,UAAQ,OAAgB,EAAE,IAA6B;QAAvD,iBAQC;QAPG,IAAM,KAAK,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;QAEzE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,EAAE;YAC1C,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAvBQ,cAAc;QAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;OACnB,cAAc,CAwB1B;IAAD,qBAAC;CAAA,AAxBD,CAAoC,mCAAsB,GAwBzD;AAxBY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:alias'})\nexport class AliasConverter extends ConverterNodeComponent<ts.TypeAliasDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.TypeAliasDeclaration\n    ];\n\n    /**\n     * Analyze the given type alias declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The type alias declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.TypeAliasDeclaration): Reflection {\n        const alias = createDeclaration(context, node, ReflectionKind.TypeAlias);\n\n        context.withScope(alias, node.typeParameters, () => {\n            alias.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node.type));\n        });\n\n        return alias;\n    }\n}\n"]}