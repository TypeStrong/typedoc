{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/enum.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,4CAAgE;AAChE,4CAAuD;AAEvD,4CAAkE;AAClE,kCAA+C;AAG/C;IAAmC,iCAA0C;IAD7E;QAAA,qEA6CC;QAxCG,cAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,eAAe;SAChC,CAAC;;IAsCN,CAAC;IA7BG,+BAAO,GAAP,UAAQ,OAAgB,EAAE,IAAwB;QAAlD,iBAYC;QAXG,IAAM,WAAW,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,IAAI,CAAC,CAAC;QAE1E,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,GAAG,CAAC,CAAe,UAAY,EAAZ,KAAA,IAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY;oBAA1B,IAAI,MAAM,SAAA;oBACX,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;iBACvC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IASO,qCAAa,GAArB,UAAsB,OAAgB,EAAE,IAAmB;QACvD,IAAM,MAAM,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,UAAU,CAAC,CAAC;QAC3E,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,YAAY,GAAG,2BAAmB,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IA3CQ,aAAa;QADzB,sBAAS,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC;OAClB,aAAa,CA4CzB;IAAD,oBAAC;CAAA,AA5CD,CAAmC,mCAAsB,GA4CxD;AA5CY,sCAAa","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { convertDefaultValue } from '../index';\n\n@Component({name: 'node:enum'})\nexport class EnumConverter extends ConverterNodeComponent<ts.EnumDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.EnumDeclaration\n    ];\n\n    /**\n     * Analyze the given enumeration declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The enumeration declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.EnumDeclaration): Reflection {\n        const enumeration = createDeclaration(context, node, ReflectionKind.Enum);\n\n        context.withScope(enumeration, () => {\n            if (node.members) {\n                for (let member of node.members) {\n                    this.convertMember(context, member);\n                }\n            }\n        });\n\n        return enumeration;\n    }\n\n    /**\n     * Analyze the given enumeration member node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The enumeration member node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    private convertMember(context: Context, node: ts.EnumMember): Reflection {\n        const member = createDeclaration(context, node, ReflectionKind.EnumMember);\n        if (member) {\n            member.defaultValue = convertDefaultValue(node);\n        }\n\n        return member;\n    }\n}\n"]}