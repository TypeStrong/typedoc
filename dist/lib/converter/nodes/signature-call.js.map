{"version":3,"file":"signature-call.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/signature-call.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAuF;AAEvF,8CAAkE;AAClE,8CAAqD;AAGrD,IAAa,kBAAkB,GAA/B,MAAa,kBAAmB,SAAQ,mCAA2F;IADnI;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,aAAa;YAC3B,EAAE,CAAC,UAAU,CAAC,YAAY;YAC1B,EAAE,CAAC,UAAU,CAAC,kBAAkB;YAChC,EAAE,CAAC,UAAU,CAAC,aAAa;SAC9B,CAAC;IAsBN,CAAC;IAbG,OAAO,CAAC,OAAgB,EAAE,IAAyE;QAC/F,MAAM,KAAK,GAA2B,OAAO,CAAC,KAAK,CAAC;QACpD,IAAI,KAAK,YAAY,6BAAqB,EAAE;YACxC,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,sBAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC;YACnF,MAAM,SAAS,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,sBAAc,CAAC,aAAa,CAAC,CAAC;YACrF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBACnB,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;aACzB;YACD,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACpC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ,CAAA;AA/BY,kBAAkB;IAD9B,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;GAC5B,kBAAkB,CA+B9B;AA/BY,gDAAkB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind, DeclarationReflection } from '../../models/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { createSignature } from '../factories/index';\n\n@Component({name: 'node:signature-call'})\nexport class SignatureConverter extends ConverterNodeComponent<ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.CallSignature,\n        ts.SyntaxKind.FunctionType,\n        ts.SyntaxKind.FunctionExpression,\n        ts.SyntaxKind.ArrowFunction\n    ];\n\n    /**\n     * Analyze the given call signature declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The signature declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression): Reflection {\n        const scope = <DeclarationReflection> context.scope;\n        if (scope instanceof DeclarationReflection) {\n            const name = scope.kindOf(ReflectionKind.FunctionOrMethod) ? scope.name : '__call';\n            const signature = createSignature(context, node, name, ReflectionKind.CallSignature);\n            if (!scope.signatures) {\n                scope.signatures = [];\n            }\n            scope.signatures.push(signature);\n        }\n\n        return scope;\n    }\n}\n"]}