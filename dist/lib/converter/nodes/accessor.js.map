{"version":3,"file":"accessor.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/accessor.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAgE;AAChE,8CAAwE;AAExE,8CAAkE;AAGlE,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,mCAA+C;IADtF;;QAKI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,WAAW;YACzB,EAAE,CAAC,UAAU,CAAC,WAAW;SAC5B,CAAC;IAsBN,CAAC;IAbG,OAAO,CAAC,OAAgB,EAAE,IAA6B;QACnD,MAAM,QAAQ,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,QAAQ,CAAC,CAAC;QAE3E,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE;YAC7B,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE;gBACzC,QAAS,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;aACjG;iBAAM;gBACH,QAAS,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;aACjG;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ,CAAA;AA7BY,iBAAiB;IAD7B,sBAAS,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,CAAC;GACtB,iBAAiB,CA6B7B;AA7BY,8CAAiB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind } from '../../models/index';\nimport { createDeclaration, createSignature } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\n\n@Component({name: 'node:accessor'})\nexport class AccessorConverter extends ConverterNodeComponent<ts.SignatureDeclaration> {\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.GetAccessor,\n        ts.SyntaxKind.SetAccessor\n    ];\n\n    /**\n     * Analyze the given getter declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The signature declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.SignatureDeclaration): Reflection | undefined {\n        const accessor = createDeclaration(context, node, ReflectionKind.Accessor);\n\n        context.withScope(accessor, () => {\n            if (node.kind === ts.SyntaxKind.GetAccessor) {\n                accessor!.getSignature = createSignature(context, node, '__get', ReflectionKind.GetSignature);\n            } else {\n                accessor!.setSignature = createSignature(context, node, '__set', ReflectionKind.SetSignature);\n            }\n        });\n\n        return accessor;\n    }\n}\n"]}