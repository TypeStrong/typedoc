{"version":3,"file":"compiler-host.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/compiler-host.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAiC;AACjC,uCAAyC;AAEzC,4CAAmD;AAKnD,IAAM,+BAA+B,GAAG,CAAC,UAAU,CAAC;AAKpD;IAAkC,gCAAkB;IAApD;;IA6IA,CAAC;IA5HG,oCAAa,GAAb,UAAc,QAAgB,EAAE,eAAgC,EAAE,OAAmC;QACjG,IAAI,IAAY,CAAC;QACjB,IAAI,CAAC;YACD,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,OAAO,CAAC,CAAC;QAC5F,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,+BAA+B,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACpG,CAAC;YACD,IAAI,GAAG,EAAE,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACjG,CAAC;IASD,4CAAqB,GAArB,UAAsB,OAA2B;QAC7C,IAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,qCAAc,GAAd,UAAe,IAAY;QACvB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IASD,0CAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAC3F,CAAC;IASD,gDAAyB,GAAzB;QACI,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC;IAC5C,CAAC;IAUD,iCAAU,GAAV,UAAW,QAAgB;QACvB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAUD,sCAAe,GAAf,UAAgB,aAAqB;QACjC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;IACjD,CAAC;IAUD,+BAAQ,GAAR,UAAS,QAAgB;QACrB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAUD,2CAAoB,GAApB,UAAqB,QAAgB;QACjC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAChF,CAAC;IASD,iCAAU,GAAV;QACI,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;IAC1B,CAAC;IAcD,gCAAS,GAAT,UAAU,QAAgB,EAAE,IAAY,EAAE,kBAA2B,EAAE,OAAmC,IAAI,CAAC;IACnH,mBAAC;AAAD,CAAC,AA7ID,CAAkC,+BAAkB,GA6InD;AA7IY,oCAAY","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { ConverterComponent } from '../components';\n\n/**\n * Return code of ts.sys.readFile when the file encoding is unsupported.\n */\nconst ERROR_UNSUPPORTED_FILE_ENCODING = -2147024809;\n\n/**\n * CompilerHost implementation\n */\nexport class CompilerHost extends ConverterComponent implements ts.CompilerHost {\n\n    /**\n     * The full path of the current directory. Result cache of [[getCurrentDirectory]].\n     */\n    private currentDirectory: string;\n\n    /**\n     * Return an instance of ts.SourceFile representing the given file.\n     *\n     * Implementation of ts.CompilerHost.getSourceFile()\n     *\n     * @param filename  The path and name of the file that should be loaded.\n     * @param languageVersion  The script target the file should be interpreted with.\n     * @param onError  A callback that will be invoked if an error occurs.\n     * @returns An instance of ts.SourceFile representing the given file.\n     */\n    getSourceFile(filename: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void): ts.SourceFile {\n        let text: string;\n        try {\n            text = ts.sys.readFile(filename, this.application.options.getCompilerOptions().charset);\n        } catch (e) {\n            if (onError) {\n                onError(e.number === ERROR_UNSUPPORTED_FILE_ENCODING ? 'Unsupported file encoding' : e.message);\n            }\n            text = '';\n        }\n\n        return text !== undefined ? ts.createSourceFile(filename, text, languageVersion) : undefined;\n    }\n\n    /**\n     * Return the full path of the default library that should be used.\n     *\n     * Implementation of ts.CompilerHost.getDefaultLibFilename()\n     *\n     * @returns The full path of the default library.\n     */\n    getDefaultLibFileName(options: ts.CompilerOptions): string {\n        const libLocation = _ts.getDirectoryPath(_ts.normalizePath(ts.sys.getExecutingFilePath()));\n        return _ts.combinePaths(libLocation, ts.getDefaultLibFileName(options));\n    }\n\n    getDirectories(path: string): string[] {\n        return ts.sys.getDirectories(path);\n    }\n\n    /**\n     * Return the full path of the current directory.\n     *\n     * Implementation of ts.CompilerHost.getCurrentDirectory()\n     *\n     * @returns The full path of the current directory.\n     */\n    getCurrentDirectory(): string {\n        return this.currentDirectory || (this.currentDirectory = ts.sys.getCurrentDirectory());\n    }\n\n    /**\n     * Return whether file names are case sensitive on the current platform or not.\n     *\n     * Implementation of ts.CompilerHost.useCaseSensitiveFileNames()\n     *\n     * @returns TRUE if file names are case sensitive on the current platform, FALSE otherwise.\n     */\n    useCaseSensitiveFileNames(): boolean {\n        return ts.sys.useCaseSensitiveFileNames;\n    }\n\n    /**\n     * Check whether the given file exists.\n     *\n     * Implementation of ts.CompilerHost.fileExists(fileName)\n     *\n     * @param fileName\n     * @returns {boolean}\n     */\n    fileExists(fileName: string): boolean {\n        return ts.sys.fileExists(fileName);\n    }\n\n    /**\n     * Check whether the given directory exists.\n     *\n     * Implementation of ts.CompilerHost.directoryExists(directoryName)\n     *\n     * @param directoryName\n     * @returns {boolean}\n     */\n    directoryExists(directoryName: string): boolean {\n        return ts.sys.directoryExists(directoryName);\n    }\n\n    /**\n     * Return the contents of the given file.\n     *\n     * Implementation of ts.CompilerHost.readFile(fileName)\n     *\n     * @param fileName\n     * @returns {string}\n     */\n    readFile(fileName: string): string {\n        return ts.sys.readFile(fileName);\n    }\n\n    /**\n     * Return the canonical file name of the given file.\n     *\n     * Implementation of ts.CompilerHost.getCanonicalFileName()\n     *\n     * @param fileName  The file name whose canonical variant should be resolved.\n     * @returns The canonical file name of the given file.\n     */\n    getCanonicalFileName(fileName: string): string {\n        return ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\n    }\n\n    /**\n     * Return the new line char sequence of the current platform.\n     *\n     * Implementation of ts.CompilerHost.getNewLine()\n     *\n     * @returns The new line char sequence of the current platform.\n     */\n    getNewLine(): string {\n        return ts.sys.newLine;\n    }\n\n    /**\n     * Write a compiled javascript file to disc.\n     *\n     * As TypeDoc will not emit compiled javascript files this is a null operation.\n     *\n     * Implementation of ts.CompilerHost.writeFile()\n     *\n     * @param fileName  The name of the file that should be written.\n     * @param data  The contents of the file.\n     * @param writeByteOrderMark  Whether the UTF-8 BOM should be written or not.\n     * @param onError  A callback that will be invoked if an error occurs.\n     */\n    writeFile(fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) { }\n}\n"]}