{"version":3,"file":"base-path.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/base-path.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAQ7B,MAAa,QAAQ;IAArB;QAIY,cAAS,GAAa,EAAE,CAAC;IAiFrC,CAAC;IA1EG,GAAG,CAAC,QAAgB;QAChB,MAAM,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,SAAS,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAM,IAAI,GAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAC3B,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAC7B,SAAS;iBACZ;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE;oBAEP,SAAS,SAAS,CAAC;iBACtB;qBAAM;oBAEH,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;wBACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACtD;oBACD,OAAO;iBACV;aACJ;YAGD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvD,OAAO;SACV;QAGD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAQD,IAAI,CAAC,QAAgB;QACjB,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;gBAClD,OAAO,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC/C;SACJ;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAKD,KAAK;QACD,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACxB,CAAC;IAQD,MAAM,CAAC,SAAS,CAAC,IAAY;QAEzB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAGhC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAG1C,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;IAC7E,CAAC;CACJ;AArFD,4BAqFC","sourcesContent":["import * as Path from 'path';\n\n/**\n * Helper class that determines the common base path of a set of files.\n *\n * In the first step all files must be passed to [[add]]. Afterwards [[trim]]\n * can be used to retrieve the shortest path relative to the determined base path.\n */\nexport class BasePath {\n    /**\n     * List of known base paths.\n     */\n    private basePaths: string[] = [];\n\n    /**\n     * Add the given file path to this set of base paths.\n     *\n     * @param fileName  The absolute filename that should be added to the base path.\n     */\n    add(fileName: string) {\n        const fileDir  = Path.dirname(BasePath.normalize(fileName));\n        const filePath = fileDir.split('/');\n\n        basePaths: for (let n = 0, c = this.basePaths.length; n < c; n++) {\n            const basePath = this.basePaths[n].split('/');\n            const mMax     = Math.min(basePath.length, filePath.length);\n            for (let m = 0; m < mMax; m++) {\n                if (basePath[m] === filePath[m]) {\n                    continue;\n                }\n\n                if (m < 1) {\n                    // No match at all, try next known base path\n                    continue basePaths;\n                } else {\n                    // Partial match, trim the known base path\n                    if (m < basePath.length) {\n                        this.basePaths[n] = basePath.slice(0, m).join('/');\n                    }\n                    return;\n                }\n            }\n\n            // Complete match, exit\n            this.basePaths[n] = basePath.splice(0, mMax).join('/');\n            return;\n        }\n\n        // Unknown base path, add it\n        this.basePaths.push(fileDir);\n    }\n\n    /**\n     * Trim the given filename by the determined base paths.\n     *\n     * @param fileName  The absolute filename that should be trimmed.\n     * @returns The trimmed version of the filename.\n     */\n    trim(fileName: string): string {\n        fileName = BasePath.normalize(fileName);\n        for (let n = 0, c = this.basePaths.length; n < c; n++) {\n            const basePath = this.basePaths[n];\n            if (fileName.substr(0, basePath.length) === basePath) {\n                return fileName.substr(basePath.length + 1);\n            }\n        }\n\n        return fileName;\n    }\n\n    /**\n     * Reset this instance, ignore all paths already passed to [[add]].\n     */\n    reset() {\n        this.basePaths = [];\n    }\n\n    /**\n     * Normalize the given path.\n     *\n     * @param path  The path that should be normalized.\n     * @returns Normalized version of the given path.\n     */\n    static normalize(path: string): string {\n        // Ensure forward slashes\n        path = path.replace(/\\\\/g, '/');\n\n        // Remove all surrounding quotes\n        path = path.replace(/^[\"']+|[\"']+$/g, '');\n\n        // Make Windows drive letters lower case\n        return path.replace(/^([^\\:]+)\\:\\//, (m, m1) => m1.toUpperCase() + ':/');\n    }\n}\n"]}