{"version":3,"file":"GroupPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GroupPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,wDAAwH;AACxH,gEAA+D;AAE/D,4CAA8D;AAC9D,0CAAyC;AASzC;IAAiC,+BAAkB;IAAnD;;IAqOA,CAAC;oBArOY,WAAW;IA2DpB,gCAAU,GAAV;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACpB,GAAC,qBAAS,CAAC,aAAa,IAAO,IAAI,CAAC,SAAS;YAC7C,GAAC,qBAAS,CAAC,iBAAiB,IAAG,IAAI,CAAC,YAAY;gBAClD,CAAC;;IACP,CAAC;IAQO,+BAAS,GAAjB,UAAkB,OAAgB,EAAE,UAAsB;QACtD,UAAU,CAAC,UAAU,GAAG,aAAW,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAErE,EAAE,CAAC,CAAC,UAAU,YAAY,2BAAmB,CAAC,CAAC,CAAC;YAC5C,IAAM,SAAS,GAAyB,UAAU,CAAC;YACnD,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAW,CAAC,YAAY,CAAC,CAAC;gBAClD,SAAS,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3E,CAAC;QACL,CAAC;IACL,CAAC;IAOO,kCAAY,GAApB,UAAqB,OAAgB;QACjC,uBAAuB,SAA0B;YAC7C,SAAS,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,CAAC;YAElF,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBACpC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7C,QAAQ,CAAC;gBACb,CAAC;gBACD,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9C,CAAC;QACL,CAAC;QAED,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAClD,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAW,CAAC,YAAY,CAAC,CAAC;YAChD,OAAO,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvE,CAAC;QAED,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACvB,IAAI,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;IAUM,+BAAmB,GAA1B,UAA2B,WAAyB;QAChD,IAAM,MAAM,GAAsB,EAAE,CAAC;QACrC,WAAW,CAAC,OAAO,CAAC,UAAC,KAAK;YACtB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrC,IAAM,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,EAAE,CAAC,CAAC,OAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC5B,QAAQ,CAAC;gBACb,CAAC;gBAED,OAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3B,MAAM,CAAC;YACX,CAAC;YAED,IAAM,KAAK,GAAG,IAAI,iCAAe,CAAC,aAAW,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YACrF,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACjB,IAAI,YAAY,GAAG,KAAK,EAAE,YAAY,GAAG,IAAI,EAAE,UAAU,GAAG,IAAI,EAAE,YAAY,GAAG,IAAI,EAAE,WAAW,GAAG,IAAI,CAAC;YAC1G,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;gBACzB,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,YAAY,CAAC;gBACtD,UAAU,GAAK,KAAK,CAAC,KAAK,CAAC,SAAS,IAAK,UAAU,CAAC;gBACpD,YAAY,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,YAAY,CAAC;gBAClF,WAAW,GAAI,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,WAAW,CAAC;gBAErD,EAAE,CAAC,CAAC,KAAK,YAAY,6BAAqB,CAAC,CAAC,CAAC;oBACzC,YAAY,GAAG,KAAK,CAAC,aAAa,IAAI,YAAY,CAAC;gBACvD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,YAAY,GAAG,KAAK,CAAC;gBACzB,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAC7C,KAAK,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAC7C,KAAK,CAAC,qBAAqB,GAAK,UAAU,CAAC;YAC3C,KAAK,CAAC,gCAAgC,GAAG,YAAY,CAAC;YACtD,KAAK,CAAC,sBAAsB,GAAI,WAAW,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAQc,yBAAa,GAA5B,UAA6B,IAAoB;QAC7C,IAAI,GAAG,GAAG,sBAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,EAAzB,CAAyB,CAAC,CAAC;QACzE,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAQM,2BAAe,GAAtB,UAAuB,IAAoB;QACvC,EAAE,CAAC,CAAC,aAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,aAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,aAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAQM,yBAAa,GAApB,UAAqB,IAAoB;QACrC,EAAE,CAAC,CAAC,aAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,aAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QAC1C,CAAC;IACL,CAAC;IASM,wBAAY,GAAnB,UAAoB,CAAa,EAAE,CAAa;QAC5C,IAAM,OAAO,GAAG,aAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,IAAM,OAAO,GAAG,aAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7B,CAAC;IACL,CAAC;IAhOM,mBAAO,GAAG;QACb,sBAAc,CAAC,MAAM;QACrB,sBAAc,CAAC,cAAc;QAC7B,sBAAc,CAAC,MAAM;QACrB,sBAAc,CAAC,IAAI;QACnB,sBAAc,CAAC,UAAU;QACzB,sBAAc,CAAC,KAAK;QACpB,sBAAc,CAAC,SAAS;QACxB,sBAAc,CAAC,SAAS;QAExB,sBAAc,CAAC,WAAW;QAC1B,sBAAc,CAAC,KAAK;QACpB,sBAAc,CAAC,QAAQ;QACvB,sBAAc,CAAC,QAAQ;QACvB,sBAAc,CAAC,QAAQ;QACvB,sBAAc,CAAC,QAAQ;QACvB,sBAAc,CAAC,MAAM;QACrB,sBAAc,CAAC,aAAa;QAE5B,sBAAc,CAAC,SAAS;QACxB,sBAAc,CAAC,aAAa;QAC5B,sBAAc,CAAC,WAAW;QAC1B,sBAAc,CAAC,aAAa;QAC5B,sBAAc,CAAC,oBAAoB;QACnC,sBAAc,CAAC,cAAc;QAC7B,sBAAc,CAAC,YAAY;QAC3B,sBAAc,CAAC,YAAY;KAC9B,CAAC;IAKK,qBAAS,GAAG,CAAC;QAChB,IAAM,SAAS,GAAG,EAAE,CAAC;QACrB,SAAS,CAAC,sBAAc,CAAC,IAAI,CAAC,GAAS,aAAa,CAAC;QACrD,SAAS,CAAC,sBAAc,CAAC,UAAU,CAAC,GAAG,oBAAoB,CAAC;QAC5D,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC,CAAC,EAAE,CAAC;IAKE,mBAAO,GAAG,CAAC;QACd,IAAM,OAAO,GAAG,EAAE,CAAC;QACnB,OAAO,CAAC,sBAAc,CAAC,KAAK,CAAC,GAAQ,SAAS,CAAC;QAC/C,OAAO,CAAC,sBAAc,CAAC,QAAQ,CAAC,GAAK,YAAY,CAAC;QAClD,OAAO,CAAC,sBAAc,CAAC,IAAI,CAAC,GAAS,cAAc,CAAC;QACpD,OAAO,CAAC,sBAAc,CAAC,UAAU,CAAC,GAAG,qBAAqB,CAAC;QAC3D,OAAO,CAAC,sBAAc,CAAC,SAAS,CAAC,GAAI,cAAc,CAAC;QACpD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC,EAAE,CAAC;IAtDI,WAAW;QADvB,sBAAS,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;OACd,WAAW,CAqOvB;IAAD,kBAAC;;CAAA,AArOD,CAAiC,+BAAkB,GAqOlD;AArOY,kCAAW","sourcesContent":["import { Reflection, ReflectionKind, ContainerReflection, DeclarationReflection } from '../../models/reflections/index';\nimport { ReflectionGroup } from '../../models/ReflectionGroup';\nimport { SourceDirectory } from '../../models/sources/directory';\nimport { Component, ConverterComponent } from '../components';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\n\n/**\n * A handler that sorts and groups the found reflections in the resolving phase.\n *\n * The handler sets the ´groups´ property of all reflections.\n */\n@Component({name: 'group'})\nexport class GroupPlugin extends ConverterComponent {\n    /**\n     * Define the sort order of reflections.\n     */\n    static WEIGHTS = [\n        ReflectionKind.Global,\n        ReflectionKind.ExternalModule,\n        ReflectionKind.Module,\n        ReflectionKind.Enum,\n        ReflectionKind.EnumMember,\n        ReflectionKind.Class,\n        ReflectionKind.Interface,\n        ReflectionKind.TypeAlias,\n\n        ReflectionKind.Constructor,\n        ReflectionKind.Event,\n        ReflectionKind.Property,\n        ReflectionKind.Variable,\n        ReflectionKind.Function,\n        ReflectionKind.Accessor,\n        ReflectionKind.Method,\n        ReflectionKind.ObjectLiteral,\n\n        ReflectionKind.Parameter,\n        ReflectionKind.TypeParameter,\n        ReflectionKind.TypeLiteral,\n        ReflectionKind.CallSignature,\n        ReflectionKind.ConstructorSignature,\n        ReflectionKind.IndexSignature,\n        ReflectionKind.GetSignature,\n        ReflectionKind.SetSignature\n    ];\n\n    /**\n     * Define the singular name of individual reflection kinds.\n     */\n    static SINGULARS = (function() {\n        const singulars = {};\n        singulars[ReflectionKind.Enum]       = 'Enumeration';\n        singulars[ReflectionKind.EnumMember] = 'Enumeration member';\n        return singulars;\n    })();\n\n    /**\n     * Define the plural name of individual reflection kinds.\n     */\n    static PLURALS = (function() {\n        const plurals = {};\n        plurals[ReflectionKind.Class]      = 'Classes';\n        plurals[ReflectionKind.Property]   = 'Properties';\n        plurals[ReflectionKind.Enum]       = 'Enumerations';\n        plurals[ReflectionKind.EnumMember] = 'Enumeration members';\n        plurals[ReflectionKind.TypeAlias]  = 'Type aliases';\n        return plurals;\n    })();\n\n    /**\n     * Create a new GroupPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_RESOLVE]:     this.onResolve,\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context: Context, reflection: Reflection) {\n        reflection.kindString = GroupPlugin.getKindSingular(reflection.kind);\n\n        if (reflection instanceof ContainerReflection) {\n            const container = <ContainerReflection> reflection;\n            if (container.children && container.children.length > 0) {\n                container.children.sort(GroupPlugin.sortCallback);\n                container.groups = GroupPlugin.getReflectionGroups(container.children);\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        function walkDirectory(directory: SourceDirectory) {\n            directory.groups = GroupPlugin.getReflectionGroups(directory.getAllReflections());\n\n            for (let key in directory.directories) {\n                if (!directory.directories.hasOwnProperty(key)) {\n                    continue;\n                }\n                walkDirectory(directory.directories[key]);\n            }\n        }\n\n        const project = context.project;\n        if (project.children && project.children.length > 0) {\n            project.children.sort(GroupPlugin.sortCallback);\n            project.groups = GroupPlugin.getReflectionGroups(project.children);\n        }\n\n        walkDirectory(project.directory);\n        project.files.forEach((file) => {\n            file.groups = GroupPlugin.getReflectionGroups(file.reflections);\n        });\n    }\n\n    /**\n     * Create a grouped representation of the given list of reflections.\n     *\n     * Reflections are grouped by kind and sorted by weight and name.\n     *\n     * @param reflections  The reflections that should be grouped.\n     * @returns An array containing all children of the given reflection grouped by their kind.\n     */\n    static getReflectionGroups(reflections: Reflection[]): ReflectionGroup[] {\n        const groups: ReflectionGroup[] = [];\n        reflections.forEach((child) => {\n            for (let i = 0; i < groups.length; i++) {\n                const group = groups[i];\n                if (group.kind !== child.kind) {\n                    continue;\n                }\n\n                group.children.push(child);\n                return;\n            }\n\n            const group = new ReflectionGroup(GroupPlugin.getKindPlural(child.kind), child.kind);\n            group.children.push(child);\n            groups.push(group);\n        });\n\n        groups.forEach((group) => {\n            let someExported = false, allInherited = true, allPrivate = true, allProtected = true, allExternal = true;\n            group.children.forEach((child) => {\n                someExported = child.flags.isExported || someExported;\n                allPrivate   = child.flags.isPrivate  && allPrivate;\n                allProtected = (child.flags.isPrivate || child.flags.isProtected) && allProtected;\n                allExternal  = child.flags.isExternal && allExternal;\n\n                if (child instanceof DeclarationReflection) {\n                    allInherited = child.inheritedFrom && allInherited;\n                } else {\n                    allInherited = false;\n                }\n            });\n\n            group.someChildrenAreExported = someExported;\n            group.allChildrenAreInherited = allInherited;\n            group.allChildrenArePrivate   = allPrivate;\n            group.allChildrenAreProtectedOrPrivate = allProtected;\n            group.allChildrenAreExternal  = allExternal;\n        });\n\n        return groups;\n    }\n\n    /**\n     * Transform the internal typescript kind identifier into a human readable version.\n     *\n     * @param kind  The original typescript kind identifier.\n     * @returns A human readable version of the given typescript kind identifier.\n     */\n    private static getKindString(kind: ReflectionKind): string {\n        let str = ReflectionKind[kind];\n        str = str.replace(/(.)([A-Z])/g, (m, a, b) => a + ' ' + b.toLowerCase());\n        return str;\n    }\n\n    /**\n     * Return the singular name of a internal typescript kind identifier.\n     *\n     * @param kind The original internal typescript kind identifier.\n     * @returns The singular name of the given internal typescript kind identifier\n     */\n    static getKindSingular(kind: ReflectionKind): string {\n        if (GroupPlugin.SINGULARS[kind]) {\n            return GroupPlugin.SINGULARS[kind];\n        } else {\n            return GroupPlugin.getKindString(kind);\n        }\n    }\n\n    /**\n     * Return the plural name of a internal typescript kind identifier.\n     *\n     * @param kind The original internal typescript kind identifier.\n     * @returns The plural name of the given internal typescript kind identifier\n     */\n    static getKindPlural(kind: ReflectionKind): string {\n        if (GroupPlugin.PLURALS[kind]) {\n            return GroupPlugin.PLURALS[kind];\n        } else {\n            return this.getKindString(kind) + 's';\n        }\n    }\n\n    /**\n     * Callback used to sort reflections by weight defined by ´GroupPlugin.WEIGHTS´ and name.\n     *\n     * @param a The left reflection to sort.\n     * @param b The right reflection to sort.\n     * @returns The sorting weight.\n     */\n    static sortCallback(a: Reflection, b: Reflection): number {\n        const aWeight = GroupPlugin.WEIGHTS.indexOf(a.kind);\n        const bWeight = GroupPlugin.WEIGHTS.indexOf(b.kind);\n        if (aWeight === bWeight) {\n            if (a.flags.isStatic && !b.flags.isStatic) {\n                return 1;\n            }\n            if (!a.flags.isStatic && b.flags.isStatic) {\n                return -1;\n            }\n            if (a.name === b.name) {\n                return 0;\n            }\n            return a.name > b.name ? 1 : -1;\n        } else {\n            return aWeight - bWeight;\n        }\n    }\n}\n"]}