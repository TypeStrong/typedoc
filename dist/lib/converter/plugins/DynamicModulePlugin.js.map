{"version":3,"file":"DynamicModulePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DynamicModulePlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,2BAA6B;AAE7B,8DAA+E;AAC/E,4CAA8D;AAC9D,gDAA8C;AAC9C,0CAAyC;AAQzC;IAAyC,uCAAkB;IAD3D;QAAA,qEAiEC;QA5DW,cAAQ,GAAG,IAAI,oBAAQ,EAAE,CAAC;;IA4DtC,CAAC;IAlDG,wCAAU,GAAV;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACpB,GAAC,qBAAS,CAAC,WAAW,IAAgB,IAAI,CAAC,OAAO;YAClD,GAAC,qBAAS,CAAC,wBAAwB,IAAG,IAAI,CAAC,aAAa;YACxD,GAAC,qBAAS,CAAC,mBAAmB,IAAQ,IAAI,CAAC,cAAc;gBAC3D,CAAC;;IACP,CAAC;IAOO,qCAAO,GAAf,UAAgB,OAAgB;QAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IASO,2CAAa,GAArB,UAAsB,OAAgB,EAAE,UAAsB,EAAE,IAAc;QAC1E,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,yBAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,MAAI,GAAG,UAAU,CAAC,IAAI,CAAC;YAC3B,EAAE,CAAC,CAAC,MAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC;YACX,CAAC;YAED,MAAI,GAAG,MAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAI,CAAC,CAAC;QAC5B,CAAC;IACL,CAAC;IAOO,4CAAc,GAAtB,UAAuB,OAAgB;QAAvC,iBAMC;QALG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU;YAChC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC7C,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAC/D,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;IA/DQ,mBAAmB;QAD/B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;OACvB,mBAAmB,CAgE/B;IAAD,0BAAC;CAAA,AAhED,CAAyC,+BAAkB,GAgE1D;AAhEY,kDAAmB","sourcesContent":["import * as ts from 'typescript';\nimport * as Path from 'path';\n\nimport { Reflection, ReflectionKind } from '../../models/reflections/abstract';\nimport { Component, ConverterComponent } from '../components';\nimport { BasePath } from '../utils/base-path';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\n\n/**\n * A handler that truncates the names of dynamic modules to not include the\n * project's base path.\n */\n@Component({name: 'dynamic-module'})\nexport class DynamicModulePlugin extends ConverterComponent {\n    /**\n     * Helper class for determining the base path.\n     */\n    private basePath = new BasePath();\n\n    /**\n     * List of reflections whose name must be trimmed.\n     */\n    private reflections: Reflection[];\n\n    /**\n     * Create a new DynamicModuleHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:              this.onBegin,\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_RESOLVE_BEGIN]:      this.onBeginResolve\n        });\n    }\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context: Context) {\n        this.basePath.reset();\n        this.reflections = [];\n    }\n\n    /**\n     * Triggered when the converter has created a declaration reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\n        if (reflection.kindOf(ReflectionKind.ExternalModule)) {\n            let name = reflection.name;\n            if (name.indexOf('/') === -1) {\n                return;\n            }\n\n            name = name.replace(/\"/g, '');\n            this.reflections.push(reflection);\n            this.basePath.add(name);\n        }\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        this.reflections.forEach((reflection) => {\n            let name = reflection.name.replace(/\"/g, '');\n            name = name.substr(0, name.length - Path.extname(name).length);\n            reflection.name = '\"' + this.basePath.trim(name) + '\"';\n        });\n    }\n}\n"]}