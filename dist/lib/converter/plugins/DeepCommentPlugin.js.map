{"version":3,"file":"DeepCommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DeepCommentPlugin.ts"],"names":[],"mappings":";;;;;;;;AAAA,0DAA6H;AAC7H,uDAAkE;AAClE,8CAA8D;AAC9D,4CAAyC;AAOzC,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,+BAAkB;IAIrD,UAAU;QACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,qBAAS,CAAC,mBAAmB,EAAE,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IACvF,CAAC;IAOO,cAAc,CAAC,OAAgB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,IAAI,IAAY,CAAC;QACjB,KAAK,IAAI,GAAG,IAAI,OAAO,CAAC,WAAW,EAAE;YACjC,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC5C,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;gBACrB,eAAe,CAAC,UAAU,CAAC,CAAC;aAC/B;SACJ;QAED,SAAS,IAAI,CAAC,MAAkB;YAC5B,IAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC;YAC/B,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,MAAM,YAAY,2BAAmB,EAAE;gBAC9E,IAAI,GAAG,EAAE,CAAC;aACb;YAED,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;gBACrB,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;aACnD;QACL,CAAC;QAED,SAAS,eAAe,CAAC,UAAsB;YAC3C,IAAI,GAAG,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,CAAC,CAAC;YACjB,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAE/B,OAAO,MAAM,IAAI,CAAC,CAAC,MAAM,YAAY,yBAAiB,CAAC,EAAE;gBACrD,IAAI,CAAC,MAAM,CAAC,CAAC;gBACb,IAAI,MAAM,CAAC,OAAO,EAAE;oBAChB,IAAI,GAA2B,CAAC;oBAChC,IAAI,UAAU,YAAY,+BAAuB,EAAE;wBAC/C,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC1D,IAAI,CAAC,GAAG,EAAE;4BACN,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;yBACrE;qBACJ;oBAED,IAAI,CAAC,GAAG,EAAE;wBACN,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;qBAC9C;oBAED,IAAI,GAAG,EAAE;wBAEL,MAAM,CAAC,OAAO,CAAC,IAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBAClE,UAAU,CAAC,OAAO,GAAG,IAAI,eAAO,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC/C,MAAM;qBACT;iBACJ;gBAED,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;aAC1B;QACL,CAAC;IACL,CAAC;CACJ,CAAA;AAlEY,iBAAiB;IAD7B,sBAAS,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC;GACrB,iBAAiB,CAkE7B;AAlEY,8CAAiB","sourcesContent":["import { Reflection, SignatureReflection, ProjectReflection, TypeParameterReflection } from '../../models/reflections/index';\nimport { Comment, CommentTag } from '../../models/comments/index';\nimport { Component, ConverterComponent } from '../components';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\n\n/**\n * A handler that moves comments with dot syntax to their target.\n */\n@Component({name: 'deep-comment'})\nexport class DeepCommentPlugin extends ConverterComponent {\n    /**\n     * Create a new CommentHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, Converter.EVENT_RESOLVE_BEGIN, this.onBeginResolve, 512);\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        const project = context.project;\n        let name: string;\n        for (let key in project.reflections) {\n            const reflection = project.reflections[key];\n            if (!reflection.comment) {\n                findDeepComment(reflection);\n            }\n        }\n\n        function push(parent: Reflection) {\n            let part = parent.originalName;\n            if (!part || part.substr(0, 2) === '__' || parent instanceof SignatureReflection) {\n                part = '';\n            }\n\n            if (part && part !== '') {\n                name = (name === '' ? part : part + '.' + name);\n            }\n        }\n\n        function findDeepComment(reflection: Reflection) {\n            name = '';\n            push(reflection);\n            let target = reflection.parent;\n\n            while (target && !(target instanceof ProjectReflection)) {\n                push(target);\n                if (target.comment) {\n                    let tag: CommentTag | undefined;\n                    if (reflection instanceof TypeParameterReflection) {\n                        tag = target.comment.getTag('typeparam', reflection.name);\n                        if (!tag) {\n                            tag = target.comment.getTag('param', '<' + reflection.name + '>');\n                        }\n                    }\n\n                    if (!tag) {\n                        tag = target.comment.getTag('param', name);\n                    }\n\n                    if (tag) {\n                        // If we found a tag, comment.tags mus be set.\n                        target.comment.tags!.splice(target.comment.tags!.indexOf(tag), 1);\n                        reflection.comment = new Comment('', tag.text);\n                        break;\n                    }\n                }\n\n                target = target.parent;\n            }\n        }\n    }\n}\n"]}