{"version":3,"file":"SourcePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/SourcePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as ts from 'typescript';\nimport * as _ts from '../../ts-internal';\n\nimport { Reflection, ProjectReflection, DeclarationReflection } from '../../models/reflections/index';\nimport { SourceDirectory, SourceFile } from '../../models/sources/index';\nimport { Component, ConverterComponent } from '../components';\nimport { BasePath } from '../utils/base-path';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\n\n/**\n * A handler that attaches source file information to reflections.\n */\n@Component({name: 'source'})\nexport class SourcePlugin extends ConverterComponent {\n    /**\n     * Helper for resolving the base path of all source files.\n     */\n    private basePath = new BasePath();\n\n    /**\n     * A map of all generated [[SourceFile]] instances.\n     */\n    private fileMappings: {[name: string]: SourceFile} = {};\n\n    /**\n     * Create a new SourceHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:              this.onBegin,\n            [Converter.EVENT_FILE_BEGIN]:         this.onBeginDocument,\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]:   this.onDeclaration,\n            [Converter.EVENT_RESOLVE_BEGIN]:      this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]:            this.onResolve,\n            [Converter.EVENT_RESOLVE_END]:        this.onEndResolve\n        });\n    }\n\n    private getSourceFile(fileName: string, project: ProjectReflection): SourceFile {\n        if (!this.fileMappings[fileName]) {\n            const file = new SourceFile(fileName);\n            this.fileMappings[fileName] = file;\n            project.files.push(file);\n        }\n\n        return this.fileMappings[fileName];\n    }\n\n    /**\n     * Triggered once per project before the dispatcher invokes the compiler.\n     *\n     * @param event  An event object containing the related project and compiler instance.\n     */\n    private onBegin() {\n        this.basePath.reset();\n        this.fileMappings = {};\n    }\n\n    /**\n     * Triggered when the converter begins converting a source file.\n     *\n     * Create a new [[SourceFile]] instance for all TypeScript files.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onBeginDocument(context: Context, reflection: Reflection, node?: ts.SourceFile) {\n        if (!node) {\n            return;\n        }\n        const fileName = node.fileName;\n        this.basePath.add(fileName);\n        this.getSourceFile(fileName, context.project);\n    }\n\n    /**\n     * Triggered when the converter has created a declaration reflection.\n     *\n     * Attach the current source file to the [[DeclarationReflection.sources]] array.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\n        if (!node) {\n            return;\n        }\n        const sourceFile      = _ts.getSourceFileOfNode(node);\n        const fileName        = sourceFile.fileName;\n        const file: SourceFile = this.getSourceFile(fileName, context.project);\n\n        let position: ts.LineAndCharacter;\n        if (node['name'] && node['name'].end) {\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node['name'].end);\n        } else {\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node.pos);\n        }\n\n        if (!reflection.sources) {\n            reflection.sources = [];\n        }\n        if (reflection instanceof DeclarationReflection) {\n            file.reflections.push(reflection);\n        }\n\n        reflection.sources.push({\n            file: file,\n            fileName: fileName,\n            line: position.line + 1,\n            character: position.character\n        });\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        context.project.files.forEach((file) => {\n            const fileName = file.fileName = this.basePath.trim(file.fileName);\n            this.fileMappings[fileName] = file;\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context: Context, reflection: Reflection) {\n        if (!reflection.sources) {\n            return;\n        }\n        reflection.sources.forEach((source) => {\n            source.fileName = this.basePath.trim(source.fileName);\n        });\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        const project = context.project;\n        const home = project.directory;\n        project.files.forEach((file) => {\n            const reflections: Reflection[] = [];\n            file.reflections.forEach((reflection) => {\n                reflections.push(reflection);\n            });\n\n            let directory = home;\n            const path = Path.dirname(file.fileName);\n            if (path !== '.') {\n                path.split('/').forEach((pathPiece) => {\n                    if (!Object.prototype.hasOwnProperty.call(directory.directories, pathPiece)) {\n                        directory.directories[pathPiece] = new SourceDirectory(pathPiece, directory);\n                    }\n                    directory = directory.directories[pathPiece];\n                });\n            }\n\n            directory.files.push(file);\n            // reflections.sort(GroupHandler.sortCallback);\n            file.parent = directory;\n            file.reflections = reflections;\n        });\n    }\n}\n"]}