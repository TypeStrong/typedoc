{"version":3,"file":"CategoryPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/CategoryPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reflection, ContainerReflection } from '../../models/reflections/index';\nimport { ReflectionCategory } from '../../models/ReflectionCategory';\nimport { SourceDirectory } from '../../models/sources/directory';\nimport { Component, ConverterComponent } from '../components';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { GroupPlugin } from './GroupPlugin';\n\n/**\n * A handler that sorts and categorizes the found reflections in the resolving phase.\n *\n * The handler sets the ´category´ property of all reflections.\n */\n@Component({name: 'category'})\nexport class CategoryPlugin extends ConverterComponent {\n    /**\n     * Define the sort order of categories. By default, sort alphabetically.\n     */\n    static WEIGHTS = [];\n\n    /**\n     * Create a new CategoryPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_RESOLVE]:     this.onResolve,\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context: Context, reflection: Reflection) {\n        if (reflection instanceof ContainerReflection) {\n            const container = <ContainerReflection> reflection;\n            if (container.children && container.children.length > 0) {\n                container.children.sort(GroupPlugin.sortCallback);\n                container.categories = CategoryPlugin.getReflectionCategories(container.children);\n            }\n            if (container.categories && container.categories.length > 1) {\n                container.categories.sort(CategoryPlugin.sortCatCallback);\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        function walkDirectory(directory: SourceDirectory) {\n            directory.categories = CategoryPlugin.getReflectionCategories(directory.getAllReflections());\n\n            for (let key in directory.directories) {\n                if (!directory.directories.hasOwnProperty(key)) {\n                    continue;\n                }\n                walkDirectory(directory.directories[key]);\n            }\n        }\n\n        const project = context.project;\n        if (project.children && project.children.length > 0) {\n            project.children.sort(GroupPlugin.sortCallback);\n            project.categories = CategoryPlugin.getReflectionCategories(project.children);\n        }\n        if (project.categories && project.categories.length > 1) {\n            project.categories.sort(CategoryPlugin.sortCatCallback);\n        }\n\n        walkDirectory(project.directory);\n        project.files.forEach((file) => {\n            file.categories = CategoryPlugin.getReflectionCategories(file.reflections);\n        });\n    }\n\n    /**\n     * Create a categorized representation of the given list of reflections.\n     *\n     * @param reflections  The reflections that should be categorized.\n     * @returns An array containing all children of the given reflection categorized\n     */\n    static getReflectionCategories(reflections: Reflection[]): ReflectionCategory[] {\n        const categories: ReflectionCategory[] = [];\n        reflections.forEach((child) => {\n            const childCat = CategoryPlugin.getCategory(child);\n            if (childCat === '') {\n              return;\n            }\n            for (let i = 0; i < categories.length; i++) {\n                const category = categories[i];\n\n                if (category.title !== childCat) {\n                    continue;\n                }\n\n                category.children.push(child);\n                return;\n            }\n\n            const category = new ReflectionCategory(childCat);\n            category.children.push(child);\n            categories.push(category);\n        });\n        return categories;\n    }\n\n    /**\n     * Return the category of a given reflection.\n     *\n     * @param reflection The reflection.\n     * @returns The category the reflection belongs to\n     */\n    static getCategory(reflection: Reflection): string {\n        if (reflection.comment) {\n            const tags = reflection.comment.tags;\n            if (tags) {\n                for (let i = 0; i < tags.length; i++) {\n                    if (tags[i].tagName === 'category') {\n                        let tag = tags[i].text;\n                        return (tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase()).trim();\n                    }\n                }\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Callback used to sort reflections by name.\n     *\n     * @param a The left reflection to sort.\n     * @param b The right reflection to sort.\n     * @returns The sorting weight.\n     */\n    static sortCallback(a: Reflection, b: Reflection): number {\n        return a.name > b.name ? 1 : -1;\n    }\n\n    /**\n     * Callback used to sort categories by name.\n     *\n     * @param a The left reflection to sort.\n     * @param b The right reflection to sort.\n     * @returns The sorting weight.\n     */\n    static sortCatCallback(a: ReflectionCategory, b: ReflectionCategory): number {\n        const aWeight = CategoryPlugin.WEIGHTS.indexOf(a.title);\n        const bWeight = CategoryPlugin.WEIGHTS.indexOf(b.title);\n        if (aWeight < 0 && bWeight < 0) {\n            return a.title > b.title ? 1 : -1;\n        }\n        if (aWeight < 0) {\n            return 1;\n        }\n        if (bWeight < 0) {\n            return -1;\n        }\n        return aWeight - bWeight;\n    }\n}\n"]}