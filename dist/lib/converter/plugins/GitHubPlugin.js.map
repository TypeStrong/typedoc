{"version":3,"file":"GitHubPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GitHubPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ShellJS from 'shelljs';\nimport * as Path from 'path';\n\nimport { SourceReference } from '../../models/sources/file';\nimport { Component, ConverterComponent } from '../components';\nimport { BasePath } from '../utils/base-path';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { Option } from '../../utils/component';\nimport { ParameterType } from '../../utils/options/declaration';\n\n/**\n * Stores data of a repository.\n */\nclass Repository {\n    /**\n     * The root path of this repository.\n     */\n    path: string;\n\n    /**\n     * The name of the branch this repository is on right now.\n     */\n    branch: string;\n\n    /**\n     * A list of all files tracked by the repository.\n     */\n    files: string[] = [];\n\n    /**\n     * The user/organisation name of this repository on GitHub.\n     */\n    gitHubUser: string;\n\n    /**\n     * The project name of this repository on GitHub.\n     */\n    gitHubProject: string;\n\n    /**\n     * Create a new Repository instance.\n     *\n     * @param path  The root path of the repository.\n     */\n    constructor(path: string, gitRevision: string) {\n        this.path = path;\n        this.branch = gitRevision || 'master';\n        ShellJS.pushd(path);\n\n        let out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-remote --get-url', {silent: true});\n        if (out.code === 0) {\n            let url: RegExpExecArray;\n            const remotes = out.stdout.split('\\n');\n            for (let i = 0, c = remotes.length; i < c; i++) {\n                url = /github\\.com[:\\/]([^\\/]+)\\/(.*)/.exec(remotes[i]);\n                if (url) {\n                    this.gitHubUser = url[1];\n                    this.gitHubProject = url[2];\n                    if (this.gitHubProject.substr(-4) === '.git') {\n                        this.gitHubProject = this.gitHubProject.substr(0, this.gitHubProject.length - 4);\n                    }\n                    break;\n                }\n            }\n        }\n\n        out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-files', {silent: true});\n        if (out.code === 0) {\n            out.stdout.split('\\n').forEach((file) => {\n                if (file !== '') {\n                    this.files.push(BasePath.normalize(path + '/' + file));\n                }\n            });\n        }\n\n        if (!gitRevision) {\n            out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --short HEAD', {silent: true});\n            if (out.code === 0) {\n                this.branch = out.stdout.replace('\\n', '');\n            }\n        }\n\n        ShellJS.popd();\n    }\n\n    /**\n     * Check whether the given file is tracked by this repository.\n     *\n     * @param fileName  The name of the file to test for.\n     * @returns TRUE when the file is part of the repository, otherwise FALSE.\n     */\n    contains(fileName: string): boolean {\n        return this.files.indexOf(fileName) !== -1;\n    }\n\n    /**\n     * Get the URL of the given file on GitHub.\n     *\n     * @param fileName  The file whose GitHub URL should be determined.\n     * @returns An url pointing to the web preview of the given file or NULL.\n     */\n    getGitHubURL(fileName: string): string {\n        if (!this.gitHubUser || !this.gitHubProject || !this.contains(fileName)) {\n            return null;\n        }\n\n        return [\n            'https://github.com',\n            this.gitHubUser,\n            this.gitHubProject,\n            'blob',\n            this.branch,\n            fileName.substr(this.path.length + 1)\n        ].join('/');\n    }\n\n    /**\n     * Try to create a new repository instance.\n     *\n     * Checks whether the given path is the root of a valid repository and if so\n     * creates a new instance of [[Repository]].\n     *\n     * @param path  The potential repository root.\n     * @returns A new instance of [[Repository]] or NULL.\n     */\n    static tryCreateRepository(path: string, gitRevision: string): Repository {\n        ShellJS.pushd(path);\n        const out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --show-toplevel', {silent: true});\n        ShellJS.popd();\n\n        if (!out || out.code !== 0) {\n            return null;\n        }\n        return new Repository(BasePath.normalize(out.stdout.replace('\\n', '')), gitRevision);\n    }\n}\n\n/**\n * A handler that watches for repositories with GitHub origin and links\n * their source files to the related GitHub pages.\n */\n@Component({name: 'git-hub'})\nexport class GitHubPlugin extends ConverterComponent {\n    /**\n     * List of known repositories.\n     */\n    private repositories: {[path: string]: Repository} = {};\n\n    /**\n     * List of paths known to be not under git control.\n     */\n    private ignoredPaths: string[] = [];\n\n    @Option({\n        name: 'gitRevision',\n        help: 'Use specified revision instead of the last revision for linking to GitHub source files.',\n        type: ParameterType.String\n    })\n    gitRevision: string;\n\n    /**\n     * Create a new GitHubHandler instance.\n     *\n     * @param converter  The converter this plugin should be attached to.\n     */\n    initialize() {\n        ShellJS.config.silent = true;\n        if (ShellJS.which('git')) {\n            this.listenTo(this.owner, Converter.EVENT_RESOLVE_END, this.onEndResolve);\n        }\n    }\n\n    /**\n     * Check whether the given file is placed inside a repository.\n     *\n     * @param fileName  The name of the file a repository should be looked for.\n     * @returns The found repository info or NULL.\n     */\n    private getRepository(fileName: string): Repository {\n        // Check for known non-repositories\n        const dirName = Path.dirname(fileName);\n        for (let i = 0, c = this.ignoredPaths.length; i < c; i++) {\n            if (this.ignoredPaths[i] === dirName) {\n                return null;\n            }\n        }\n\n        // Check for known repositories\n        for (let path in this.repositories) {\n            if (!this.repositories.hasOwnProperty(path)) {\n                continue;\n            }\n            if (fileName.substr(0, path.length) === path) {\n                return this.repositories[path];\n            }\n        }\n\n        // Try to create a new repository\n        const repository = Repository.tryCreateRepository(dirName, this.gitRevision);\n        if (repository) {\n            this.repositories[repository.path] = repository;\n            return repository;\n        }\n\n        // No repository found, add path to ignored paths\n        const segments = dirName.split('/');\n        for (let i = segments.length; i > 0; i--) {\n            this.ignoredPaths.push(segments.slice(0, i).join('/'));\n        }\n\n        return null;\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        const project = context.project;\n        project.files.forEach((sourceFile) => {\n            const repository = this.getRepository(sourceFile.fullFileName);\n            if (repository) {\n                sourceFile.url = repository.getGitHubURL(sourceFile.fullFileName);\n            }\n        });\n\n        for (let key in project.reflections) {\n            const reflection = project.reflections[key];\n            if (reflection.sources) {\n                reflection.sources.forEach((source: SourceReference) => {\n                    if (source.file && source.file.url) {\n                        source.url = source.file.url + '#L' + source.line;\n                    }\n                });\n            }\n        }\n    }\n}\n"]}