{"version":3,"file":"GitHubPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GitHubPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ShellJS from 'shelljs';\nimport * as Path from 'path';\n\nimport { SourceReference } from '../../models/sources/file';\nimport { Component, ConverterComponent } from '../components';\nimport { BasePath } from '../utils/base-path';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { Option } from '../../utils/component';\nimport { ParameterType } from '../../utils/options/declaration';\n\n/**\n * Stores data of a repository.\n */\nexport class Repository {\n    /**\n     * The root path of this repository.\n     */\n    path: string;\n\n    /**\n     * The name of the branch this repository is on right now.\n     */\n    branch: string;\n\n    /**\n     * A list of all files tracked by the repository.\n     */\n    files: string[] = [];\n\n    /**\n     * The user/organisation name of this repository on GitHub.\n     */\n    gitHubUser?: string;\n\n    /**\n     * The project name of this repository on GitHub.\n     */\n    gitHubProject?: string;\n\n    /**\n     * The hostname for this github project.\n     *\n     * Defaults to: `github.com` (for normal, public GitHub instance projects)\n     *\n     * Or the hostname for an enterprise version of GitHub, e.g. `github.acme.com`\n     * (if found as a match in the list of git remotes).\n     */\n    gitHubHostname = 'github.com';\n\n    /**\n     * Create a new Repository instance.\n     *\n     * @param path  The root path of the repository.\n     */\n    constructor(path: string, gitRevision: string, repoLinks: string[]) {\n        this.path = path;\n        this.branch = gitRevision || 'master';\n        ShellJS.pushd(path);\n\n        let url: RegExpExecArray | null;\n\n        for (let i = 0, c = repoLinks.length; i < c; i++) {\n            url = /(github(?:\\.[a-z]+)*\\.com)[:\\/]([^\\/]+)\\/(.*)/.exec(repoLinks[i]);\n\n            if (url) {\n                this.gitHubHostname = url[1];\n                this.gitHubUser = url[2];\n                this.gitHubProject = url[3];\n                if (this.gitHubProject.substr(-4) === '.git') {\n                    this.gitHubProject = this.gitHubProject.substr(0, this.gitHubProject.length - 4);\n                }\n                break;\n            }\n        }\n\n        let out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-files', {silent: true});\n        if (out.code === 0) {\n            out.stdout.split('\\n').forEach((file) => {\n                if (file !== '') {\n                    this.files.push(BasePath.normalize(path + '/' + file));\n                }\n            });\n        }\n\n        if (!gitRevision) {\n            out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --short HEAD', {silent: true});\n            if (out.code === 0) {\n                this.branch = out.stdout.replace('\\n', '');\n            }\n        }\n\n        ShellJS.popd();\n    }\n\n    /**\n     * Check whether the given file is tracked by this repository.\n     *\n     * @param fileName  The name of the file to test for.\n     * @returns TRUE when the file is part of the repository, otherwise FALSE.\n     */\n    contains(fileName: string): boolean {\n        return this.files.includes(fileName);\n    }\n\n    /**\n     * Get the URL of the given file on GitHub.\n     *\n     * @param fileName  The file whose GitHub URL should be determined.\n     * @returns An url pointing to the web preview of the given file or NULL.\n     */\n    getGitHubURL(fileName: string): string | undefined {\n        if (!this.gitHubUser || !this.gitHubProject || !this.contains(fileName)) {\n            return;\n        }\n\n        return [\n            `https://${this.gitHubHostname}`,\n            this.gitHubUser,\n            this.gitHubProject,\n            'blob',\n            this.branch,\n            fileName.substr(this.path.length + 1)\n        ].join('/');\n    }\n\n    /**\n     * Try to create a new repository instance.\n     *\n     * Checks whether the given path is the root of a valid repository and if so\n     * creates a new instance of [[Repository]].\n     *\n     * @param path  The potential repository root.\n     * @returns A new instance of [[Repository]] or undefined.\n     */\n    static tryCreateRepository(path: string, gitRevision: string): Repository | undefined {\n        ShellJS.pushd(path);\n        const out = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git rev-parse --show-toplevel', {silent: true});\n        ShellJS.popd();\n\n        if (!out || out.code !== 0) {\n            return;\n        }\n\n        let remotesOutput = <ShellJS.ExecOutputReturnValue> ShellJS.exec('git ls-remote --get-url', {silent: true});\n        let remotes: string[] = (remotesOutput.code === 0) ? remotesOutput.stdout.split('\\n') : [];\n\n        return new Repository(BasePath.normalize(out.stdout.replace('\\n', '')), gitRevision, remotes);\n    }\n}\n\n/**\n * A handler that watches for repositories with GitHub origin and links\n * their source files to the related GitHub pages.\n */\n@Component({name: 'git-hub'})\nexport class GitHubPlugin extends ConverterComponent {\n    /**\n     * List of known repositories.\n     */\n    private repositories: {[path: string]: Repository} = {};\n\n    /**\n     * List of paths known to be not under git control.\n     */\n    private ignoredPaths: string[] = [];\n\n    @Option({\n        name: 'gitRevision',\n        help: 'Use specified revision instead of the last revision for linking to GitHub source files.',\n        type: ParameterType.String\n    })\n    gitRevision!: string;\n\n    /**\n     * Create a new GitHubHandler instance.\n     *\n     * @param converter  The converter this plugin should be attached to.\n     */\n    initialize() {\n        ShellJS.config.silent = true;\n        if (ShellJS.which('git')) {\n            this.listenTo(this.owner, Converter.EVENT_RESOLVE_END, this.onEndResolve);\n        }\n    }\n\n    /**\n     * Check whether the given file is placed inside a repository.\n     *\n     * @param fileName  The name of the file a repository should be looked for.\n     * @returns The found repository info or undefined.\n     */\n    private getRepository(fileName: string): Repository | undefined {\n        // Check for known non-repositories\n        const dirName = Path.dirname(fileName);\n        for (let i = 0, c = this.ignoredPaths.length; i < c; i++) {\n            if (this.ignoredPaths[i] === dirName) {\n                return;\n            }\n        }\n\n        // Check for known repositories\n        for (let path in this.repositories) {\n            if (!this.repositories.hasOwnProperty(path)) {\n                continue;\n            }\n            if (fileName.substr(0, path.length).toLowerCase() === path) {\n                return this.repositories[path];\n            }\n        }\n\n        // Try to create a new repository\n        const repository = Repository.tryCreateRepository(dirName, this.gitRevision);\n        if (repository) {\n            this.repositories[repository.path.toLowerCase()] = repository;\n            return repository;\n        }\n\n        // No repository found, add path to ignored paths\n        const segments = dirName.split('/');\n        for (let i = segments.length; i > 0; i--) {\n            this.ignoredPaths.push(segments.slice(0, i).join('/'));\n        }\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        const project = context.project;\n        project.files.forEach((sourceFile) => {\n            const repository = this.getRepository(sourceFile.fullFileName);\n            if (repository) {\n                sourceFile.url = repository.getGitHubURL(sourceFile.fullFileName);\n            }\n        });\n\n        for (let key in project.reflections) {\n            const reflection = project.reflections[key];\n            if (reflection.sources) {\n                reflection.sources.forEach((source: SourceReference) => {\n                    if (source.file && source.file.url) {\n                        source.url = source.file.url + '#L' + source.line;\n                    }\n                });\n            }\n        }\n    }\n}\n"]}