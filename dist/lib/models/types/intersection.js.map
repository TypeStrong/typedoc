{"version":3,"file":"intersection.js","sourceRoot":"","sources":["../../../../src/lib/models/types/intersection.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AASlC;IAAsC,oCAAI;IAgBtC,0BAAY,KAAa;QAAzB,YACI,iBAAO,SAEV;QAVQ,UAAI,GAAW,cAAc,CAAC;QASnC,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAOD,gCAAK,GAAL;QACI,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAQD,iCAAM,GAAN,UAAO,IAAsB;QACzB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,eAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAMD,mCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QAErC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,mCAAQ,GAAR;QACI,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACL,uBAAC;AAAD,CAAC,AApED,CAAsC,eAAI,GAoEzC;AApEY,4CAAgB","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents an intersection type.\n *\n * ~~~\n * let value: A & B;\n * ~~~\n */\nexport class IntersectionType extends Type {\n    /**\n     * The types this union consists of.\n     */\n    types: Type[];\n\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = 'intersection';\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param types  The types this union consists of.\n     */\n    constructor(types: Type[]) {\n        super();\n        this.types = types;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new IntersectionType(this.types);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: IntersectionType): boolean {\n        if (!(type instanceof IntersectionType)) {\n            return false;\n        }\n        return Type.isTypeListSimiliar(type.types, this.types);\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n\n        if (this.types && this.types.length) {\n            result.types = this.types.map((e) => e.toObject());\n        }\n\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        const names: string[] = [];\n        this.types.forEach((element) => {\n            names.push(element.toString());\n        });\n\n        return names.join(' & ');\n    }\n}\n"]}