{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../../src/lib/models/types/string-literal.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAkC;AASlC;IAAuC,qCAAI;IAgBvC,2BAAY,KAAa;QAAzB,YACI,iBAAO,SAEV;QAVQ,UAAI,GAAW,eAAe,CAAC;QASpC,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAOD,iCAAK,GAAL;QACI,MAAM,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAQD,kCAAM,GAAN,UAAO,IAAuB;QAC1B,MAAM,CAAC,IAAI,YAAY,iBAAiB;YACpC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAMD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAQ,iBAAM,QAAQ,WAAE,CAAC;QACrC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAKD,oCAAQ,GAAR;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClC,CAAC;IACL,wBAAC;AAAD,CAAC,AAzDD,CAAuC,eAAI,GAyD1C;AAzDY,8CAAiB","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents a string literal type.\n *\n * ~~~\n * let value: \"DIV\";\n * ~~~\n */\nexport class StringLiteralType extends Type {\n    /**\n     * The string literal value.\n     */\n    value: string;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = 'stringLiteral';\n\n    /**\n     * Create a new instance of StringLiteralType.\n     *\n     * @param value The string literal value.\n     */\n    constructor(value: string) {\n        super();\n        this.value = value;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new StringLiteralType(this.value);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: StringLiteralType): boolean {\n        return type instanceof StringLiteralType &&\n            type.value === this.value;\n    }\n\n    /**\n     * Return a raw object representation of this type.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result: any = super.toObject();\n        result.value = this.value;\n        return result;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString(): string {\n        return '\"' + this.value + '\"';\n    }\n}\n"]}