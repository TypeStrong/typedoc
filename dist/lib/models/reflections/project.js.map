{"version":3,"file":"project.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/project.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0CAA+D;AAC/D,uCAAwD;AACxD,yCAAkD;AASlD;IAAuC,qCAAmB;IA6CtD,2BAAY,IAAY;QAAxB,YACI,kBAAM,IAAI,EAAE,IAAI,EAAE,yBAAc,CAAC,MAAM,CAAC,SAC3C;QA3CD,iBAAW,GAA+B,EAAE,CAAC;QAE7C,mBAAa,GAAiC,EAAE,CAAC;QAKjD,eAAS,GAAoB,IAAI,uBAAe,EAAE,CAAC;QAKnD,WAAK,GAAiB,EAAE,CAAC;;IA+BzB,CAAC;IAKD,qCAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAQD,gDAAoB,GAApB,UAAqB,IAAoB;QACrC,IAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9B,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAiBD,gDAAoB,GAApB,UAAqB,GAAQ;QACzB,IAAM,KAAK,GAAa,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClE,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAEzB,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACvC,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC3B,QAAQ,CAAC;YACb,CAAC;YAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,UAAU,CAAC;YACxB,OAAO,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;gBAC1B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/B,QAAQ,CAAC,MAAM,CAAC;gBACpB,CAAC;gBACD,KAAK,IAAI,CAAC,CAAC;YACf,CAAC;YAED,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAMD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAM,YAAU,GAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC7B,YAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,YAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,YAAY,CAAC,GAAG,YAAU,CAAC;YACtC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,wBAAC;AAAD,CAAC,AAvID,CAAuC,+BAAmB,GAuIzD;AAvIY,8CAAiB","sourcesContent":["import { SourceFile, SourceDirectory } from '../sources/index';\nimport { Reflection, ReflectionKind } from './abstract';\nimport { ContainerReflection } from './container';\nimport { ReflectionCategory } from '../ReflectionCategory';\n\n/**\n * A reflection that represents the root of the project.\n *\n * The project reflection acts as a global index, one may receive all reflections\n * and source files of the processed project through this reflection.\n */\nexport class ProjectReflection extends ContainerReflection {\n    /**\n     * A list of all reflections within the project.\n     */\n    reflections: {[id: number]: Reflection} = {};\n\n    symbolMapping: {[symbolId: number]: number} = {};\n\n    /**\n     * The root directory of the project.\n     */\n    directory: SourceDirectory = new SourceDirectory();\n\n    /**\n     * A list of all source files within the project.\n     */\n    files: SourceFile[] = [];\n\n    /**\n     * All reflections categorized.\n     */\n    categories: ReflectionCategory[];\n\n    /**\n     * The name of the project.\n     *\n     * The name can be passed as a commandline argument or it is read from the package info.\n     */\n    name: string;\n\n    /**\n     * The contents of the readme.md file of the project when found.\n     */\n    readme: string;\n\n    /**\n     * The parsed data of the package.json file of the project when found.\n     */\n    packageInfo: any;\n\n    /**\n     * Create a new ProjectReflection instance.\n     *\n     * @param name  The name of the project.\n     */\n    constructor(name: string) {\n        super(null, name, ReflectionKind.Global);\n    }\n\n    /**\n     * Return whether this reflection is the root / project reflection.\n     */\n    isProject(): boolean {\n        return true;\n    }\n\n    /**\n     * Return a list of all reflections in this project of a certain kind.\n     *\n     * @param kind  The desired kind of reflection.\n     * @returns     An array containing all reflections with the desired kind.\n     */\n    getReflectionsByKind(kind: ReflectionKind): Reflection[] {\n        const values: Reflection[] = [];\n        for (let id in this.reflections) {\n            const reflection = this.reflections[id];\n            if (reflection.kindOf(kind)) {\n                values.push(reflection);\n            }\n        }\n\n        return values;\n    }\n\n    /**\n     * @param name  The name to look for. Might contain a hierarchy.\n     */\n    findReflectionByName(name: string): Reflection;\n\n    /**\n     * @param names  The name hierarchy to look for.\n     */\n    findReflectionByName(names: string[]): Reflection;\n\n    /**\n     * Try to find a reflection by its name.\n     *\n     * @return The found reflection or null.\n     */\n    findReflectionByName(arg: any): Reflection {\n        const names: string[] = Array.isArray(arg) ? arg : arg.split('.');\n        const name = names.pop();\n\n        search: for (let key in this.reflections) {\n            const reflection = this.reflections[key];\n            if (reflection.name !== name) {\n                continue;\n            }\n\n            let depth = names.length - 1;\n            let target = reflection;\n            while (target && depth >= 0) {\n                target = target.parent;\n                if (target.name !== names[depth]) {\n                    continue search;\n                }\n                depth -= 1;\n            }\n\n            return reflection;\n        }\n\n        return null;\n    }\n\n    /**\n     * Return a raw object representation of this reflection.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result = super.toObject();\n\n        if (this.categories) {\n            const categories: any[] = [];\n            this.categories.forEach((category) => {\n                categories.push(category.toObject());\n            });\n\n            if (categories.length > 0) {\n                result['categories'] = categories;\n            }\n        }\n\n        return result;\n    }\n}\n"]}