{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/type-parameter.ts"],"names":[],"mappings":";;AACA,yCAAuE;AAGvE,MAAa,uBAAwB,SAAQ,qBAAU;IAQnD,YAAY,IAAuB,EAAE,MAAmB;QACpD,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,yBAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;IAChC,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACtC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AA1BD,0DA0BC","sourcesContent":["import { Type, TypeParameterType } from '../types/index';\nimport { Reflection, ReflectionKind, TypeContainer } from './abstract';\nimport { DeclarationReflection } from './declaration';\n\nexport class TypeParameterReflection extends Reflection implements TypeContainer {\n    parent?: DeclarationReflection;\n\n    type?: Type;\n\n    /**\n     * Create a new TypeParameterReflection instance.\n     */\n    constructor(type: TypeParameterType, parent?: Reflection) {\n        super(type.name, ReflectionKind.TypeParameter, parent);\n        this.type = type.constraint;\n    }\n\n    /**\n     * Return a raw object representation of this reflection.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result = super.toObject();\n\n        if (this.type) {\n            result.type = this.type.toObject();\n        }\n\n        return result;\n    }\n}\n"]}