{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uCAAuE;AAGvE;IAA6C,2CAAU;IAQnD,iCAAY,MAAmB,EAAE,IAAwB;QAAzD,YACI,kBAAM,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,yBAAc,CAAC,aAAa,CAAC,SAEzD;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;;IAChC,CAAC;IAMD,0CAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,8BAAC;AAAD,CAAC,AA1BD,CAA6C,qBAAU,GA0BtD;AA1BY,0DAAuB","sourcesContent":["import { Type, TypeParameterType } from '../types/index';\nimport { Reflection, ReflectionKind, TypeContainer } from './abstract';\nimport { DeclarationReflection } from './declaration';\n\nexport class TypeParameterReflection extends Reflection implements TypeContainer {\n    parent: DeclarationReflection;\n\n    type: Type;\n\n    /**\n     * Create a new TypeParameterReflection instance.\n     */\n    constructor(parent?: Reflection, type?: TypeParameterType) {\n        super(parent, type.name, ReflectionKind.TypeParameter);\n        this.type = type.constraint;\n    }\n\n    /**\n     * Return a raw object representation of this reflection.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result = super.toObject();\n\n        if (this.type) {\n            result.type = this.type.toObject();\n        }\n\n        return result;\n    }\n}\n"]}