{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/container.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAA4F;AAK5F;IAAyC,uCAAU;IAAnD;;IA2FA,CAAC;IArEG,+CAAiB,GAAjB,UAAkB,IAAoB;QAClC,IAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5B,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAUD,sCAAQ,GAAR,UAAS,QAA0B;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAC,KAA4B;gBACvD,QAAQ,CAAC,KAAK,EAAE,2BAAgB,CAAC,QAAQ,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAMD,sCAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAM,QAAM,GAAU,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;gBACtB,QAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAM,CAAC;QAC9B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAM,YAAU,GAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC7B,YAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,YAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,YAAY,CAAC,GAAG,YAAU,CAAC;YACtC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAM,SAAO,GAAU,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACxB,SAAO,CAAC,IAAI,CAAC;oBACX,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC5B,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,GAAG,SAAO,CAAC;QAC9B,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,0BAAC;AAAD,CAAC,AA3FD,CAAyC,qBAAU,GA2FlD;AA3FY,kDAAmB","sourcesContent":["import { Reflection, ReflectionKind, TraverseCallback, TraverseProperty } from './abstract';\nimport { ReflectionCategory } from '../ReflectionCategory';\nimport { ReflectionGroup } from '../ReflectionGroup';\nimport { DeclarationReflection } from './declaration';\n\nexport class ContainerReflection extends Reflection {\n    /**\n     * The children of this reflection.\n     */\n    children: DeclarationReflection[];\n\n    /**\n     * All children grouped by their kind.\n     */\n    groups: ReflectionGroup[];\n\n    /**\n     * All children grouped by their category.\n     */\n    categories: ReflectionCategory[];\n\n    /**\n     * Return a list of all children of a certain kind.\n     *\n     * @param kind  The desired kind of children.\n     * @returns     An array containing all children with the desired kind.\n     */\n    getChildrenByKind(kind: ReflectionKind): DeclarationReflection[] {\n        const values: DeclarationReflection[] = [];\n        for (let key in this.children) {\n            const child = this.children[key];\n            if (child.kindOf(kind)) {\n                values.push(child);\n            }\n        }\n        return values;\n    }\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback: TraverseCallback) {\n        if (this.children) {\n            this.children.slice().forEach((child: DeclarationReflection) => {\n                callback(child, TraverseProperty.Children);\n            });\n        }\n    }\n\n    /**\n     * Return a raw object representation of this reflection.\n     * @deprecated Use serializers instead\n     */\n    toObject(): any {\n        const result = super.toObject();\n\n        if (this.groups) {\n            const groups: any[] = [];\n            this.groups.forEach((group) => {\n                groups.push(group.toObject());\n            });\n\n            result['groups'] = groups;\n        }\n\n        if (this.categories) {\n            const categories: any[] = [];\n            this.categories.forEach((category) => {\n                categories.push(category.toObject());\n            });\n\n            if (categories.length > 0) {\n                result['categories'] = categories;\n            }\n        }\n\n        if (this.sources) {\n          const sources: any[] = [];\n          this.sources.forEach((source) => {\n              sources.push({\n                fileName: source.fileName,\n                line: source.line,\n                character: source.character\n              });\n          });\n\n          result['sources'] = sources;\n        }\n\n        return result;\n    }\n}\n"]}