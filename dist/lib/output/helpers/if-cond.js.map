{"version":3,"file":"if-cond.js","sourceRoot":"","sources":["../../../../src/lib/output/helpers/if-cond.ts"],"names":[],"mappings":";;AAUA,SAAgB,MAAM,CAAC,EAAO,EAAE,QAAa,EAAE,EAAO,EAAE,OAAY;IAChE,QAAQ,QAAQ,EAAE;QACd,KAAK,IAAI;YAEL,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,KAAK,KAAK;YACN,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClE,KAAK,GAAG;YACJ,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,KAAK,IAAI;YACL,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,KAAK,GAAG;YACJ,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,KAAK,IAAI;YACL,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,KAAK,IAAI;YACL,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,KAAK,IAAI;YACL,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE;YACI,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACpC;AACL,CAAC;AAtBD,wBAsBC","sourcesContent":["/**\n * Handlebars if helper with condition.\n *\n * @param v1        The first value to be compared.\n * @param operator  The operand to perform on the two given values.\n * @param v2        The second value to be compared\n * @param options   The current handlebars object.\n * @param this   The current handlebars this.\n * @returns {*}\n */\nexport function ifCond(v1: any, operator: any, v2: any, options: any) {\n    switch (operator) {\n        case '==':\n            // tslint:disable-next-line:triple-equals\n            return (v1 == v2) ? options.fn(this) : options.inverse(this);\n        case '===':\n            return (v1 === v2) ? options.fn(this) : options.inverse(this);\n        case '<':\n            return (v1 < v2) ? options.fn(this) : options.inverse(this);\n        case '<=':\n            return (v1 <= v2) ? options.fn(this) : options.inverse(this);\n        case '>':\n            return (v1 > v2) ? options.fn(this) : options.inverse(this);\n        case '>=':\n            return (v1 >= v2) ? options.fn(this) : options.inverse(this);\n        case '&&':\n            return (v1 && v2) ? options.fn(this) : options.inverse(this);\n        case '||':\n            return (v1 || v2) ? options.fn(this) : options.inverse(this);\n        default:\n            return options.inverse(this);\n    }\n}\n"]}