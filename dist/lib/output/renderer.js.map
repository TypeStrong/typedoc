{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/lib/output/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Holds all logic used render and output the final documentation.\n *\n * The [[Renderer]] class is the central controller within this namespace. When invoked it creates\n * an instance of [[BaseTheme]] which defines the layout of the documentation and fires a\n * series of [[RendererEvent]] events. Instances of [[BasePlugin]] can listen to these events and\n * alter the generated output.\n */\n\nimport * as Path from 'path';\nimport * as FS from 'fs-extra';\n// tslint:disable-next-line:variable-name\nconst ProgressBar = require('progress');\n\nimport { Application } from '../application';\nimport { Theme } from './theme';\nimport { RendererEvent, PageEvent } from './events';\nimport { ProjectReflection } from '../models/reflections/project';\nimport { UrlMapping } from './models/UrlMapping';\nimport { writeFile } from '../utils/fs';\nimport { DefaultTheme } from './themes/DefaultTheme';\nimport { RendererComponent } from './components';\nimport { Component, ChildableComponent, Option } from '../utils/component';\nimport { ParameterType } from '../utils/options/declaration';\n\n/**\n * The renderer processes a [[ProjectReflection]] using a [[BaseTheme]] instance and writes\n * the emitted html documents to a output directory. You can specify which theme should be used\n * using the ```--theme <name>``` commandline argument.\n *\n * Subclasses of [[BasePlugin]] that have registered themselves in the [[Renderer.PLUGIN_CLASSES]]\n * will be automatically initialized. Most of the core functionality is provided as separate plugins.\n *\n * [[Renderer]] is a subclass of [[EventDispatcher]] and triggers a series of events while\n * a project is being processed. You can listen to these events to control the flow or manipulate\n * the output.\n *\n *  * [[Renderer.EVENT_BEGIN]]<br>\n *    Triggered before the renderer starts rendering a project. The listener receives\n *    an instance of [[RendererEvent]]. By calling [[RendererEvent.preventDefault]] the entire\n *    render process can be canceled.\n *\n *    * [[Renderer.EVENT_BEGIN_PAGE]]<br>\n *      Triggered before a document will be rendered. The listener receives an instance of\n *      [[PageEvent]]. By calling [[PageEvent.preventDefault]] the generation of the\n *      document can be canceled.\n *\n *    * [[Renderer.EVENT_END_PAGE]]<br>\n *      Triggered after a document has been rendered, just before it is written to disc. The\n *      listener receives an instance of [[PageEvent]]. When calling\n *      [[PageEvent.preventDefault]] the the document will not be saved to disc.\n *\n *  * [[Renderer.EVENT_END]]<br>\n *    Triggered after the renderer has written all documents. The listener receives\n *    an instance of [[RendererEvent]].\n */\n@Component({name: 'renderer', internal: true, childClass: RendererComponent})\nexport class Renderer extends ChildableComponent<Application, RendererComponent> {\n    /**\n     * The theme that is used to render the documentation.\n     */\n    theme: Theme;\n\n    @Option({\n        name: 'theme',\n        help: 'Specify the path to the theme that should be used or \\'default\\' or \\'minimal\\' to use built-in themes.',\n        type: ParameterType.String,\n        defaultValue: 'default'\n    })\n    themeName: string;\n\n    @Option({\n        name: 'disableOutputCheck',\n        help: 'Should TypeDoc disable the testing and cleaning of the output directory?',\n        type: ParameterType.Boolean\n    })\n    disableOutputCheck: boolean;\n\n    @Option({\n        name: 'gaID',\n        help: 'Set the Google Analytics tracking ID and activate tracking code.'\n    })\n    gaID: string;\n\n    @Option({\n        name: 'gaSite',\n        help: 'Set the site name for Google Analytics. Defaults to `auto`.',\n        defaultValue: 'auto'\n    })\n    gaSite: string;\n\n    @Option({\n        name: 'hideGenerator',\n        help: 'Do not print the TypeDoc link at the end of the page.',\n        type: ParameterType.Boolean\n    })\n    hideGenerator: boolean;\n\n    @Option({\n        name: 'entryPoint',\n        help: 'Specifies the fully qualified name of the root symbol. Defaults to global namespace.',\n        type: ParameterType.String\n    })\n    entryPoint: string;\n\n    @Option({\n        name: 'toc',\n        help: 'Specifies the top level table of contents.',\n        type: ParameterType.Array\n    })\n    toc: string[];\n\n    /**\n     * Create a new Renderer instance.\n     *\n     * @param application  The application this dispatcher is attached to.\n     */\n    initialize() {\n    }\n\n    /**\n     * Render the given project reflection to the specified output directory.\n     *\n     * @param project  The project that should be rendered.\n     * @param outputDirectory  The path of the directory the documentation should be rendered to.\n     */\n    render(project: ProjectReflection, outputDirectory: string) {\n        if (!this.prepareTheme() || !this.prepareOutputDirectory(outputDirectory)) {\n            return;\n        }\n\n        const output = new RendererEvent(RendererEvent.BEGIN);\n        output.outputDirectory = outputDirectory;\n        output.project = project;\n        output.settings = this.application.options.getRawValues();\n        output.urls = this.theme.getUrls(project);\n\n        const bar = new ProgressBar('Rendering [:bar] :percent', {\n            total: output.urls.length,\n            width: 40\n        });\n\n        this.trigger(output);\n        if (!output.isDefaultPrevented) {\n            output.urls.forEach((mapping: UrlMapping) => {\n                this.renderDocument(output.createPageEvent(mapping));\n                bar.tick();\n            });\n\n            this.trigger(RendererEvent.END, output);\n        }\n    }\n\n    /**\n     * Render a single page.\n     *\n     * @param page An event describing the current page.\n     * @return TRUE if the page has been saved to disc, otherwise FALSE.\n     */\n    private renderDocument(page: PageEvent): boolean {\n        this.trigger(PageEvent.BEGIN, page);\n        if (page.isDefaultPrevented) {\n            return false;\n        }\n\n        page.template = page.template || this.theme.resources.templates.getResource(page.templateName).getTemplate();\n        page.contents = page.template(page);\n\n        this.trigger(PageEvent.END, page);\n        if (page.isDefaultPrevented) {\n            return false;\n        }\n\n        try {\n            writeFile(page.filename, page.contents, false);\n        } catch (error) {\n            this.application.logger.error('Could not write %s', page.filename);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Ensure that a theme has been setup.\n     *\n     * If a the user has set a theme we try to find and load it. If no theme has\n     * been specified we load the default theme.\n     *\n     * @returns TRUE if a theme has been setup, otherwise FALSE.\n     */\n    private prepareTheme(): boolean {\n        if (!this.theme) {\n            const themeName = this.themeName;\n            let path = Path.resolve(themeName);\n            if (!FS.existsSync(path)) {\n                path = Path.join(Renderer.getThemeDirectory(), themeName);\n                if (!FS.existsSync(path)) {\n                    this.application.logger.error('The theme %s could not be found.', themeName);\n                    return false;\n                }\n            }\n\n            const filename = Path.join(path, 'theme.js');\n            if (!FS.existsSync(filename)) {\n                this.theme = this.addComponent('theme', new DefaultTheme(this, path));\n            } else {\n                try {\n                    const themeClass = typeof require(filename) === 'function' ? require(filename) : require(filename).default;\n\n                    this.theme = this.addComponent('theme', new (themeClass)(this, path));\n                } catch (err) {\n                    throw new Error(\n                        `Exception while loading \"${filename}\". You must export a \\`new Theme(renderer, basePath)\\` compatible class.\\n` +\n                        err\n                    );\n                }\n            }\n        }\n\n        this.theme.resources.activate();\n        return true;\n    }\n\n    /**\n     * Prepare the output directory. If the directory does not exist, it will be\n     * created. If the directory exists, it will be emptied.\n     *\n     * @param directory  The path to the directory that should be prepared.\n     * @returns TRUE if the directory could be prepared, otherwise FALSE.\n     */\n    private prepareOutputDirectory(directory: string): boolean {\n        if (FS.existsSync(directory)) {\n            if (!FS.statSync(directory).isDirectory()) {\n                this.application.logger.error(\n                    'The output target \"%s\" exists but it is not a directory.',\n                    directory);\n                return false;\n            }\n\n            if (this.disableOutputCheck) {\n                return true;\n            }\n\n            if (FS.readdirSync(directory).length === 0) {\n                return true;\n            }\n\n            if (!this.theme.isOutputDirectory(directory)) {\n                this.application.logger.error(\n                    'The output directory \"%s\" exists but does not seem to be a documentation generated by TypeDoc.\\n' +\n                    'Make sure this is the right target directory, delete the folder and rerun TypeDoc.',\n                    directory);\n                return false;\n            }\n\n            try {\n                FS.removeSync(directory);\n            } catch (error) {\n                this.application.logger.warn('Could not empty the output directory.');\n            }\n        }\n\n        if (!FS.existsSync(directory)) {\n            try {\n                FS.mkdirpSync(directory);\n            } catch (error) {\n                this.application.logger.error('Could not create output directory %s', directory);\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Return the path containing the themes shipped with TypeDoc.\n     *\n     * @returns The path to the theme directory.\n     */\n    static getThemeDirectory(): string {\n        return Path.dirname(require.resolve('typedoc-default-themes'));\n    }\n\n    /**\n     * Return the path to the default theme.\n     *\n     * @returns The path to the default theme.\n     */\n    static getDefaultTheme(): string {\n        return Path.join(Renderer.getThemeDirectory(), 'default');\n    }\n}\n\nimport './plugins';\n"]}