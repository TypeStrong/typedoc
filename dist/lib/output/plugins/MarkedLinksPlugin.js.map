{"version":3,"file":"MarkedLinksPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/MarkedLinksPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Util from 'util';\n\nimport { Reflection } from '../../models/reflections/abstract';\nimport { Component, ContextAwareRendererComponent } from '../components';\nimport { MarkdownEvent, RendererEvent } from '../events';\nimport { Option } from '../../utils/component';\nimport { ParameterType } from '../../utils/options/declaration';\n\n/**\n * A plugin that builds links in markdown texts.\n */\n@Component({name: 'marked-links'})\nexport class MarkedLinksPlugin extends ContextAwareRendererComponent {\n    /**\n     * Regular expression for detecting bracket links.\n     */\n    private brackets: RegExp = /\\[\\[([^\\]]+)\\]\\]/g;\n\n    /**\n     * Regular expression for detecting inline tags like {@link ...}.\n     */\n    private inlineTag: RegExp = /(?:\\[(.+?)\\])?\\{@(link|linkcode|linkplain)\\s+((?:.|\\n)+?)\\}/gi;\n\n    @Option({\n        name: 'listInvalidSymbolLinks',\n        help: 'Emits a list of broken symbol [[navigation]] links after documentation generation',\n        type: ParameterType.Boolean\n    })\n    listInvalidSymbolLinks: boolean;\n\n    private warnings: string[] = [];\n\n    /**\n     * Create a new MarkedLinksPlugin instance.\n     */\n    initialize() {\n        super.initialize();\n        this.listenTo(this.owner, {\n            [MarkdownEvent.PARSE]: this.onParseMarkdown,\n            [RendererEvent.END]: this.onEndRenderer\n        }, null, 100);\n    }\n\n    /**\n     * Find all references to symbols within the given text and transform them into a link.\n     *\n     * This function is aware of the current context and will try to find the symbol within the\n     * current reflection. It will walk up the reflection chain till the symbol is found or the\n     * root reflection is reached. As a last resort the function will search the entire project\n     * for the given symbol.\n     *\n     * @param text  The text that should be parsed.\n     * @returns The text with symbol references replaced by links.\n     */\n    private replaceBrackets(text: string): string {\n        return text.replace(this.brackets, (match: string, content: string): string => {\n            const split = MarkedLinksPlugin.splitLinkText(content);\n            return this.buildLink(match, split.target, split.caption);\n        });\n    }\n\n    /**\n     * Find symbol {@link ...} strings in text and turn into html links\n     *\n     * @param text  The string in which to replace the inline tags.\n     * @return      The updated string.\n     */\n    private replaceInlineTags(text: string): string {\n        return text.replace(this.inlineTag, (match: string, leading: string, tagName: string, content: string): string => {\n            const split   = MarkedLinksPlugin.splitLinkText(content);\n            const target  = split.target;\n            const caption = leading || split.caption;\n\n            let monospace: boolean;\n            if (tagName === 'linkcode') {\n                monospace = true;\n            }\n            if (tagName === 'linkplain') {\n                monospace = false;\n            }\n\n            return this.buildLink(match, target, caption, monospace);\n        });\n    }\n\n    /**\n     * Format a link with the given text and target.\n     *\n     * @param original   The original link string, will be returned if the target cannot be resolved..\n     * @param target     The link target.\n     * @param caption    The caption of the link.\n     * @param monospace  Whether to use monospace formatting or not.\n     * @returns A html link tag.\n     */\n    private buildLink(original: string, target: string, caption: string, monospace?: boolean): string {\n        let attributes = '';\n        if (this.urlPrefix.test(target)) {\n            attributes = ' class=\"external\"';\n        } else {\n            let reflection: Reflection;\n            if (this.reflection) {\n                reflection = this.reflection.findReflectionByName(target);\n            } else if (this.project) {\n                reflection = this.project.findReflectionByName(target);\n            }\n\n            if (reflection && reflection.url) {\n                if (this.urlPrefix.test(reflection.url)) {\n                    target = reflection.url;\n                    attributes = ' class=\"external\"';\n                } else {\n                    target = this.getRelativeUrl(reflection.url);\n                }\n            } else {\n                reflection = this.reflection || this.project;\n                this.warnings.push(`In ${reflection.getFullName()}: ${original}`);\n                return original;\n            }\n        }\n\n        if (monospace) {\n            caption = '<code>' + caption + '</code>';\n        }\n\n        return Util.format('<a href=\"%s\"%s>%s</a>', target, attributes, caption);\n    }\n\n    /**\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\n     *\n     * @param event\n     */\n    onParseMarkdown(event: MarkdownEvent) {\n        event.parsedText = this.replaceInlineTags(this.replaceBrackets(event.parsedText));\n    }\n\n    /**\n     * Triggered when [[Renderer]] is finished\n     */\n    onEndRenderer(event: RendererEvent) {\n        if (this.listInvalidSymbolLinks && this.warnings.length > 0) {\n            this.application.logger.write('');\n            this.application.logger.warn('[MarkedLinksPlugin]: Found invalid symbol reference(s) in JSDocs, ' +\n                'they will not render as links in the generated documentation.');\n\n            for (let warning of this.warnings) {\n                this.application.logger.write('  ' + warning);\n            }\n        }\n    }\n\n    /**\n     * Split the given link into text and target at first pipe or space.\n     *\n     * @param text  The source string that should be checked for a split character.\n     * @returns An object containing the link text and target.\n     */\n    static splitLinkText(text: string): { caption: string; target: string; } {\n        let splitIndex = text.indexOf('|');\n        if (splitIndex === -1) {\n            splitIndex = text.search(/\\s/);\n        }\n\n        if (splitIndex !== -1) {\n            return {\n                caption: text.substr(splitIndex + 1).replace(/\\n+/, ' '),\n                target: text.substr(0, splitIndex)\n            };\n        } else {\n            return {\n                caption: text,\n                target: text\n            };\n        }\n    }\n}\n"]}