{"version":3,"file":"AssetsPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/AssetsPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,2BAA6B;AAC7B,6BAA+B;AAE/B,4CAA6D;AAC7D,oCAA0C;AAC1C,wCAAuC;AAOvC;IAAkC,gCAAiB;IADnD;QAAA,qEAoCC;QA/BG,uBAAiB,GAAG,IAAI,CAAC;;IA+B7B,CAAC;IA1BG,iCAAU,GAAV;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YACpB,GAAC,sBAAa,CAAC,KAAK,IAAG,IAAI,CAAC,eAAe;gBAC7C,CAAC;;IACP,CAAC;IAOO,sCAAe,GAAvB,UAAwB,KAAoB;QACxC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAQ,CAAC,eAAe,EAAE,EAAE,QAAQ,CAAC,CAAC;QAClE,IAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,WAAW,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,IAAI,KAAK,WAAW,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAlCQ,YAAY;QADxB,sBAAS,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;OACf,YAAY,CAmCxB;IAAD,mBAAC;CAAA,AAnCD,CAAkC,8BAAiB,GAmClD;AAnCY,oCAAY","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs-extra';\n\nimport { Component, RendererComponent } from '../components';\nimport { RendererEvent } from '../events';\nimport { Renderer } from '../renderer';\n\n/**\n * A plugin that copies the subdirectory ´assets´ from the current themes\n * source folder to the output directory.\n */\n@Component({name: 'assets'})\nexport class AssetsPlugin extends RendererComponent {\n    /**\n     * Should the default assets always be copied to the output directory?\n     */\n    copyDefaultAssets = true;\n\n    /**\n     * Create a new AssetsPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [RendererEvent.BEGIN]: this.onRendererBegin\n        });\n    }\n\n    /**\n     * Triggered before the renderer starts rendering a project.\n     *\n     * @param event  An event object describing the current render operation.\n     */\n    private onRendererBegin(event: RendererEvent) {\n        let fromDefault = Path.join(Renderer.getDefaultTheme(), 'assets');\n        const to = Path.join(event.outputDirectory, 'assets');\n\n        if (this.copyDefaultAssets) {\n            FS.copySync(fromDefault, to);\n        } else {\n            fromDefault = null;\n        }\n\n        const from = Path.join(this.owner.theme.basePath, 'assets');\n        if (from !== fromDefault && FS.existsSync(from)) {\n            FS.copySync(from, to);\n        }\n    }\n}\n"]}