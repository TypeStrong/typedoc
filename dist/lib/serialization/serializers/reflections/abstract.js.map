{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/reflections/abstract.ts"],"names":[],"mappings":";;;;;;;;AAAA,wDAAqD;AACrD,4CAA+D;AAE/D,iDAAiE;AACjE,sCAA6C;AAC7C,mEAAuE;AAGvE,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,0CAAyC;IAIjF,QAAQ,CAAC,CAAU;QACjB,OAAO,CAAC,YAAY,mBAAU,CAAC;IACjC,CAAC;IAED,QAAQ,CAAC,UAAsB,EAAE,GAAS;QACxC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,EAAE,EAAU,UAAU,CAAC,EAAE;YACzB,IAAI,EAAQ,UAAU,CAAC,IAAI;YAC3B,IAAI,EAAQ,UAAU,CAAC,IAAI;YAC3B,UAAU,EAAE,UAAU,CAAC,UAAU;YACjC,KAAK,EAAO,EAAE;SACf,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,YAAY,KAAK,UAAU,CAAC,IAAI,EAAE;YAC/C,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;SAC5C;QAED,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC,0BAAe,CAAC,SAAS,CAAC,EAAE;YACvE,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;gBAClC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aACvB;SACF;QAED,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3D,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC;SACzE;QAED,IAAI,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7D,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,CAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,yBAAgB,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC;SACjG;QAED,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;YACtC,IAAI,QAAQ,KAAK,yBAAgB,CAAC,WAAW,EAAE;gBAC7C,OAAO;aACR;YACD,IAAI,IAAI,GAAG,yBAAgB,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACd,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aAChB;YACD,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAA;AArDQ,6BAAQ,GAAG,IAAI,CAAC;AAFZ,oBAAoB;IADhC,qBAAS,CAAC,EAAC,IAAI,EAAE,uBAAuB,EAAC,CAAC;GAC9B,oBAAoB,CAuDhC;AAvDY,oDAAoB","sourcesContent":["import { Component } from '../../../utils/component';\nimport { Reflection, TraverseProperty } from '../../../models';\n\nimport { ReflectionSerializerComponent } from '../../components';\nimport { DecoratorWrapper } from '../models';\nimport { ReflectionFlags } from '../../../models/reflections/abstract';\n\n@Component({name: 'serializer:reflection'})\nexport class ReflectionSerializer extends ReflectionSerializerComponent<Reflection> {\n\n  static PRIORITY = 1000;\n\n  supports(t: unknown) {\n    return t instanceof Reflection;\n  }\n\n  toObject(reflection: Reflection, obj?: any): any {\n    obj = obj || {};\n\n    Object.assign(obj, {\n      id:         reflection.id,\n      name:       reflection.name,\n      kind:       reflection.kind,\n      kindString: reflection.kindString,\n      flags:      {}                      // TODO: remove if no flags\n    });\n\n    if (reflection.originalName !== reflection.name) {\n      obj.originalName = reflection.originalName;\n    }\n\n    if (reflection.comment) {\n      obj.comment = this.owner.toObject(reflection.comment);\n    }\n\n    for (const key of Object.getOwnPropertyNames(ReflectionFlags.prototype)) {\n      if (reflection.flags[key] === true) {\n        obj.flags[key] = true;\n      }\n    }\n\n    if (reflection.decorates && reflection.decorates.length > 0) {\n      obj.decorates = reflection.decorates.map( t => this.owner.toObject(t) );\n    }\n\n    if (reflection.decorators && reflection.decorators.length > 0) {\n      obj.decorators = reflection.decorators.map( d => this.owner.toObject(new DecoratorWrapper(d)) );\n    }\n\n    reflection.traverse((child, property) => {\n      if (property === TraverseProperty.TypeLiteral) {\n        return;\n      }\n      let name = TraverseProperty[property];\n      name = name.substr(0, 1).toLowerCase() + name.substr(1);\n      if (!obj[name]) {\n        obj[name] = [];\n      }\n      obj[name].push(this.owner.toObject(child));\n    });\n\n    return obj;\n  }\n}\n"]}