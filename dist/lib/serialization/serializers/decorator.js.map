{"version":3,"file":"decorator.js","sourceRoot":"","sources":["../../../../src/lib/serialization/serializers/decorator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,mDAAkD;AAElD,4CAAoD;AACpD,gEAA8D;AAG9D;IAAkD,gDAAqC;IADvF;QAAA,qEAsCC;QAzBC,oBAAc,GAAG,8BAA4B,CAAC,cAAc,CAAC;QAC7D,0BAAoB,GAAG,oCAAgB,CAAC;;IAwB1C,CAAC;qCArCY,4BAA4B;IAOtB,2CAAc,GAA/B,UAAgC,QAAa;QAC3C,MAAM,CAAC,QAAQ,YAAY,oCAAgB,CAAC;IAC9C,CAAC;IAMD,iDAAU,GAAV;QACI,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,UAAC,CAAmB,IAAK,OAAA,CAAC,YAAY,oCAAgB,EAA7B,CAA6B,CAAC;IAC3E,CAAC;IAED,+CAAQ,GAAR,UAAS,gBAAkC,EAAE,GAAS;QAClD,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,IAAM,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC;QAC7C,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAE1B,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACnB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YACxB,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAjCM,qCAAQ,GAAG,IAAI,CAAC;IAFZ,4BAA4B;QADxC,qBAAS,CAAC,EAAC,IAAI,EAAE,gCAAgC,EAAC,CAAC;OACvC,4BAA4B,CAqCxC;IAAD,mCAAC;;CAAA,AArCD,CAAkD,gCAAmB,GAqCpE;AArCY,oEAA4B","sourcesContent":["import { Component } from '../../utils/component';\n\nimport { SerializerComponent } from '../components';\nimport { DecoratorWrapper } from './models/decorator-wrapper';\n\n@Component({name: 'serializer:decorator-container'})\nexport class DecoratorContainerSerializer extends SerializerComponent<DecoratorWrapper> {\n\n  static PRIORITY = 1000;\n\n  /**\n   * Filter for instances of [[DecoratorWrapper]]\n   */\n  protected static serializeGroup(instance: any): boolean {\n    return instance instanceof DecoratorWrapper;\n  }\n\n  // use same fn for every instance\n  serializeGroup = DecoratorContainerSerializer.serializeGroup;\n  serializeGroupSymbol = DecoratorWrapper;\n\n  initialize(): void {\n      super.initialize();\n      this.supports = (s: DecoratorWrapper) => s instanceof DecoratorWrapper;\n  }\n\n  toObject(decoratorWrapper: DecoratorWrapper, obj?: any): any {\n      obj = obj || {};\n\n      const decorator = decoratorWrapper.decorator;\n      obj.name = decorator.name;\n\n      if (decorator.type) {\n        obj.type = this.owner.toObject(decorator.type);\n      }\n\n      if (decorator.arguments) {\n        obj.arguments = decorator.arguments;\n      }\n\n      return obj;\n  }\n\n}\n"]}