{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../../src/lib/utils/paths.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,yCAAkD;AAElD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC;AAO9B,SAAgB,eAAe,CAAC,QAAkB;IAC9C,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAe,EAAc,EAAE;QAEhD,IAAI,IAAI,EAAE;YAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;SAAE;QAI1E,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;YAC/B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACnC;QAGD,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;SAAE;QAGvD,OAAO,IAAI,qBAAS,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACP,CAAC;AAjBD,0CAiBC","sourcesContent":["import * as Path from 'path';\nimport { Minimatch, IMinimatch } from 'minimatch';\n\nconst unix = Path.sep === '/';\n\n/**\n * Convert array of glob patterns to array of minimatch instances.\n *\n * Handle a few Windows-Unix path gotchas.\n */\nexport function createMinimatch(patterns: string[]): IMinimatch[] {\n    return patterns.map((pattern: string): IMinimatch => {\n        // Ensure correct pathing on unix, by transforming `\\` to `/` and removing any `X:/` from the path\n        if (unix) { pattern = pattern.replace(/[\\\\]/g, '/').replace(/^\\w:/, ''); }\n\n        // pattern paths not starting with '**' are resolved even if it is an\n        // absolute path, to ensure correct format for the current OS\n        if (pattern.substr(0, 2) !== '**') {\n            pattern = Path.resolve(pattern);\n        }\n\n        // On Windows we transform `\\` to `/` to unify the way paths are intepreted\n        if (!unix) { pattern = pattern.replace(/[\\\\]/g, '/'); }\n\n        // Unify the path slashes before creating the minimatch, for more reliable matching\n        return new Minimatch(pattern, { dot: true });\n    });\n}\n"]}