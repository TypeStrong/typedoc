{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as _ from 'lodash';\nimport * as ts from 'typescript';\n\nimport { Component, Option } from '../../component';\nimport { OptionsComponent, OptionsReadMode, DiscoverEvent } from '../options';\nimport { ParameterType, ParameterHint } from '../declaration';\nimport { TypeScriptSource } from '../sources/typescript';\n\n/**\n * Obtains option values from tsconfig.json\n */\n@Component({name: 'options:tsconfig'})\nexport class TSConfigReader extends OptionsComponent {\n    @Option({\n        name: TSConfigReader.OPTIONS_KEY,\n        help: 'Specify a typescript config file that should be loaded. If not specified TypeDoc will look for \\'tsconfig.json\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options!: string;\n\n    /**\n     * The name of the parameter that specifies the tsconfig file.\n     */\n    private static OPTIONS_KEY = 'tsconfig';\n\n    /**\n     * The name of the parameter that specifies the TS project\n     *\n     * https://github.com/Microsoft/TypeScript/blob/master/src/compiler/commandLineParser.ts#L49\n     */\n    private static PROJECT_KEY = 'project';\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\n    }\n\n    onDiscover(event: DiscoverEvent) {\n        // Do nothing until were fetching options\n        if (event.mode !== OptionsReadMode.Fetch) {\n            return;\n        }\n\n        let file: string | undefined;\n\n        if (TSConfigReader.OPTIONS_KEY in event.data) {\n            const tsconfig = event.data[TSConfigReader.OPTIONS_KEY];\n\n            if (FS.existsSync(tsconfig) && FS.statSync(tsconfig).isFile()) {\n                file = Path.resolve(tsconfig);\n            } else {\n                file = ts.findConfigFile(tsconfig, ts.sys.fileExists);\n            }\n\n            if (!file || !FS.existsSync(file)) {\n                event.addError('The tsconfig file %s does not exist.', file || '');\n                return;\n            }\n        } else if (TSConfigReader.PROJECT_KEY in event.data) {\n            const resolved = Path.resolve(event.data[TSConfigReader.PROJECT_KEY]);\n            // If the file exists, use it\n            if (FS.existsSync(resolved)) {\n                file = resolved;\n            } else {\n                // Use TS to find the file, since it could be a directory\n                file = ts.findConfigFile(resolved, ts.sys.fileExists);\n            }\n        } else if (this.application.isCLI) {\n            // No file or directory has been specified so find the file in the root of the project\n            file = ts.findConfigFile('.', ts.sys.fileExists);\n        }\n\n        // If file is undefined, we found no file to load.\n        if (file) {\n            this.load(event, file);\n        }\n    }\n\n    /**\n     * Load the specified tsconfig file.\n     *\n     * @param event  The event that triggered the loading. Used to store error messages.\n     * @param fileName  The absolute path and file name of the tsconfig file.\n     */\n    load(event: DiscoverEvent, fileName: string) {\n        const { config } = ts.readConfigFile(fileName, ts.sys.readFile);\n        if (config === undefined) {\n            event.addError('No valid tsconfig file found for %s.', fileName);\n            return;\n        }\n        if (!_.isPlainObject(config)) {\n            event.addError('The tsconfig file %s does not contain a JSON object.', fileName);\n            return;\n        }\n\n        const { fileNames, options, raw: { typedocOptions }} = ts.parseJsonConfigFileContent(\n            config,\n            ts.sys,\n            Path.resolve(Path.dirname(fileName)),\n            {},\n            Path.resolve(fileName));\n\n        event.inputFiles = fileNames;\n\n        const ignored = TypeScriptSource.IGNORED;\n        for (const key of ignored) {\n            delete options[key];\n        }\n\n        _.defaults(event.data, typedocOptions, options);\n    }\n}\n"]}