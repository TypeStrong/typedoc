{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as _ from 'lodash';\nimport * as ts from 'typescript';\n\nimport { Component, Option } from '../../component';\nimport { OptionsComponent, DiscoverEvent } from '../options';\nimport { ParameterType, ParameterHint } from '../declaration';\nimport { TypeScriptSource } from '../sources/typescript';\n\n@Component({name: 'options:tsconfig'})\nexport class TSConfigReader extends OptionsComponent {\n    @Option({\n        name: TSConfigReader.OPTIONS_KEY,\n        help: 'Specify a typescript config file that should be loaded. If not specified TypeDoc will look for \\'tsconfig.json\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options: string;\n\n    /**\n     * The name of the parameter that specifies the tsconfig file.\n     */\n    private static OPTIONS_KEY = 'tsconfig';\n\n    /**\n     * The name of the parameter that specifies the TS project\n     *\n     * https://github.com/Microsoft/TypeScript/blob/master/src/compiler/commandLineParser.ts#L49\n     */\n    private static PROJECT_KEY = 'project';\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\n    }\n\n    onDiscover(event: DiscoverEvent) {\n        if (TSConfigReader.OPTIONS_KEY in event.data) {\n            this.load(event, Path.resolve(event.data[TSConfigReader.OPTIONS_KEY]));\n        } else if (TSConfigReader.PROJECT_KEY in event.data) {\n            // The `project` option may be a directory or file, so use TS to find it\n            let file: string = ts.findConfigFile(event.data[TSConfigReader.PROJECT_KEY], ts.sys.fileExists);\n            // If file is undefined, we found no file to load.\n            if (file) {\n                this.load(event, file);\n            }\n        } else if (this.application.isCLI) {\n            let file: string = ts.findConfigFile('.', ts.sys.fileExists);\n            // If file is undefined, we found no file to load.\n            if (file) {\n                this.load(event, file);\n            }\n        }\n    }\n\n    /**\n     * Load the specified tsconfig file.\n     *\n     * @param event  The event that triggered the loading. Used to store error messages.\n     * @param fileName  The absolute path and file name of the tsconfig file.\n     */\n    load(event: DiscoverEvent, fileName: string) {\n        if (!FS.existsSync(fileName)) {\n            event.addError('The tsconfig file %s does not exist.', fileName);\n            return;\n        }\n\n        const { config } = ts.readConfigFile(fileName, ts.sys.readFile);\n        if (config === undefined) {\n            event.addError('The tsconfig file %s does not contain valid JSON.', fileName);\n            return;\n        }\n        if (!_.isPlainObject(config)) {\n            event.addError('The tsconfig file %s does not contain a JSON object.', fileName);\n            return;\n        }\n\n        const { fileNames, options, raw: { typedocOptions }} = ts.parseJsonConfigFileContent(\n            config,\n            ts.sys,\n            Path.resolve(Path.dirname(fileName)),\n            {},\n            Path.resolve(fileName));\n\n        event.inputFiles = fileNames;\n\n        const ignored = TypeScriptSource.IGNORED;\n        for (const key of ignored) {\n            delete options[key];\n        }\n\n        _.defaults(event.data, typedocOptions, options);\n    }\n}\n"]}