{"version":3,"file":"typescript.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typescript.ts"],"names":[],"mappings":";;;;;;;;;AAAA,iCAAiC;AACjC,4CAA4C;AAE5C,+CAA4C;AAC5C,wCAA8C;AAC9C,gDAAkF;AASlF,IAAa,gBAAgB,wBAA7B,MAAa,gBAAiB,SAAQ,0BAAgB;IAYlD,UAAU;QACN,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,KAAK,IAAI,WAAW,IAAI,GAAG,CAAC,kBAAkB,EAAE;YAC5C,IAAI,CAAC,kBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBACtD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;aACjC;SACJ;IACL,CAAC;IAKD,qBAAqB;QACjB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAEO,WAAW,CAAC,MAA6B;QAC7C,MAAM,KAAK,GAAsB;YAC7B,IAAI,EAAO,MAAM,CAAC,IAAI;YACtB,KAAK,EAAM,MAAM,CAAC,SAAS;YAC3B,IAAI,EAAO,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAC3D,KAAK,EAAM,4BAAc,CAAC,UAAU;YACpC,SAAS,EAAE,IAAI,CAAC,aAAa;SAChC,CAAC;QAEF,QAAQ,MAAM,CAAC,IAAI,EAAE;YACjB,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,MAAM;YACV,KAAK,SAAS;gBACV,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,OAAO,CAAC;gBACnC,MAAM;YACV,KAAK,QAAQ;gBACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;gBAClC,MAAM;YACV,KAAK,MAAM;gBACP,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,KAAK,CAAC;gBACjC,MAAM;YACV;gBACI,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,GAAG,CAAC;gBAC/B,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;gBACxB,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;oBACjB,MAAM,KAAK,GAAG,GAAG,CAAC,wBAAwB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC5D,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,4BAA4B,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBAC7E;SACR;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;CACJ,CAAA;AAxDU,wBAAO,GAAa;IACvB,KAAK,EAAE,SAAS,EAAE,MAAM;IACxB,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,SAAS;IACrE,WAAW,EAAE,eAAe,EAAE,gBAAgB;CACjD,CAAC;AAVO,gBAAgB;IAD5B,qBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;GAC3B,gBAAgB,CA8D5B;AA9DY,4CAAgB","sourcesContent":["import * as ts from 'typescript';\nimport * as _ts from '../../../ts-internal';\n\nimport { Component } from '../../component';\nimport { OptionsComponent } from '../options';\nimport { DeclarationOption, ParameterScope, ParameterType } from '../declaration';\n\n/**\n * Discovers and contributes options declared by TypeScript.\n *\n * typedoc accepts many of the same options as TypeScript itself, so they must be parsed\n * from TypeScript's metadata and declared on typedoc's Option parser.\n */\n@Component({name: 'options:typescript'})\nexport class TypeScriptSource extends OptionsComponent {\n    private declarations!: DeclarationOption[];\n\n    /**\n     * A list of all TypeScript parameters that should be ignored.\n     */\n    static IGNORED: string[] = [\n        'out', 'version', 'help',\n        'watch', 'declaration', 'declarationDir', 'declarationMap', 'mapRoot',\n        'sourceMap', 'inlineSources', 'removeComments'\n    ];\n\n    initialize() {\n        this.declarations = [];\n\n        for (let declaration of _ts.optionDeclarations) {\n            if (!TypeScriptSource.IGNORED.includes(declaration.name)) {\n                this.addTSOption(declaration);\n            }\n        }\n    }\n\n    /**\n     * Return all option declarations emitted by this component.\n     */\n    getOptionDeclarations(): DeclarationOption[] {\n        return this.declarations;\n    }\n\n    private addTSOption(option: _ts.CommandLineOption) {\n        const param: DeclarationOption = {\n            name:      option.name,\n            short:     option.shortName,\n            help:      option.description ? option.description.key : '',\n            scope:     ParameterScope.TypeScript,\n            component: this.componentName\n        };\n\n        switch (option.type) {\n            case 'number':\n                param.type = ParameterType.Number;\n                break;\n            case 'boolean':\n                param.type = ParameterType.Boolean;\n                break;\n            case 'string':\n                param.type = ParameterType.String;\n                break;\n            case 'list':\n                param.type = ParameterType.Array;\n                break;\n            default:\n                param.type = ParameterType.Map;\n                param.map = option.type;\n                if (option['error']) {\n                    const error = _ts.createCompilerDiagnostic(option['error']);\n                    param.mapError = ts.flattenDiagnosticMessageText(error.messageText, ', ');\n                }\n        }\n\n        this.declarations.push(param);\n    }\n}\n"]}