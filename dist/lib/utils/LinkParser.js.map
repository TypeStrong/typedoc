{"version":3,"file":"LinkParser.js","sourceRoot":"","sources":["../../../src/lib/utils/LinkParser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Util from \"util\";\n\n\nimport { Reflection } from \"../models/reflections/abstract\";\nimport { ProjectReflection } from \"../models/reflections/index\";\n\n/**\n * A plugin that builds links in markdown texts.\n */\nexport class LinkParser {\n  /**\n   * The project that is currently processed.\n   */\n  private project: ProjectReflection;\n\n  /**\n   * Regular expression for detecting inline tags like {@link ...}.\n   */\n  private inlineTag: RegExp = /(?:\\[(.+?)\\])?\\{@(link|linkcode|linkplain)\\s+((?:.|\\n)+?)\\}/gi;\n\n  /**\n   * Regular expression to test if a string looks like an external url.\n   */\n  private urlPrefix: RegExp = /^(http|ftp)s?:\\/\\//;\n  private linkPrefix: string;\n\n\n  constructor(project: ProjectReflection, linkPrefix?: string) {\n    this.project = project;\n    this.linkPrefix = linkPrefix != null ? linkPrefix : '';\n  }\n\n\n  /**\n   * Find symbol {@link ...} strings in text and turn into html links\n   *\n   * @param text  The string in which to replace the inline tags.\n   * @return      The updated string.\n   */\n  private replaceInlineTags(text: string): string {\n    let that = this;\n    return text.replace(this.inlineTag, (match: string, leading: string, tagName: string, content: string): string => {\n      var split = that.splitLinkText(content);\n      var target = split.target;\n      var caption = leading || split.caption;\n\n      var monospace: boolean;\n      if (tagName == 'linkcode') monospace = true;\n      if (tagName == 'linkplain') monospace = false;\n\n      return this.buildLink(match, target, caption, monospace);\n    });\n  }\n\n\n  /**\n   * Format a link with the given text and target.\n   *\n   * @param original   The original link string, will be returned if the target cannot be resolved..\n   * @param target     The link target.\n   * @param caption    The caption of the link.\n   * @param monospace  Whether to use monospace formatting or not.\n   * @returns A html link tag.\n   */\n  private buildLink(original: string, target: string, caption: string, monospace?: boolean): string {\n    let attributes = '';\n    if (this.urlPrefix.test(target)) {\n      attributes = ' class=\"external\"';\n    } else {\n      let reflection: Reflection;\n      reflection = this.project.findReflectionByName(target);\n\n      if (reflection && reflection.url) {\n        target = reflection.url;\n      } else {\n        //console.log('Link could not be resolved : ' + original);\n        return caption;\n      }\n    }\n\n    if (monospace) {\n      caption = '<code>' + caption + '</code>';\n    }\n\n    return Util.format('<a href=\"%s%s\"%s>%s</a>', this.linkPrefix, target, attributes, caption);\n  }\n\n\n  /**\n   * Triggered when [[MarkedPlugin]] parses a markdown string.\n   *\n   * @param event\n   */\n  public parseMarkdown(text: string) {\n    return this.replaceInlineTags(text);\n  }\n\n\n  /**\n   * Split the given link into text and target at first pipe or space.\n   *\n   * @param text  The source string that should be checked for a split character.\n   * @returns An object containing the link text and target.\n   */\n  private splitLinkText(text: string): { caption: string; target: string; } {\n    var splitIndex = text.indexOf('|');\n    if (splitIndex === -1) {\n      splitIndex = text.search(/\\s/);\n    }\n\n    if (splitIndex !== -1) {\n      return {\n        caption: text.substr(splitIndex + 1).replace(/\\n+/, ' '),\n        target: text.substr(0, splitIndex)\n      };\n    } else {\n      return {\n        caption: text,\n        target: text\n      };\n    }\n  }\n}\n"]}