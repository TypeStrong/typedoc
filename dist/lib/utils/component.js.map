{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../src/lib/utils/component.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\n\nimport { Application } from '../application';\nimport { EventDispatcher, Event, EventMap } from './events';\nimport { DeclarationOption } from './options/declaration';\n\nexport interface ComponentHost {\n    application: Application;\n}\n\nexport interface Component extends AbstractComponent<ComponentHost> {\n\n}\n\nexport interface ComponentClass<T extends Component> extends Function {\n    new(owner: ComponentHost): T;\n}\n\nexport interface ComponentOptions {\n    name?: string;\n    childClass?: Function;\n    internal?: boolean;\n}\n\nconst childMappings: {host: any, child: Function}[] = [];\n\nexport function Component(options: ComponentOptions): ClassDecorator {\n    return (target: Function) => {\n        const proto = target.prototype;\n        if (!(proto instanceof AbstractComponent)) {\n            throw new Error('The `Component` decorator can only be used with a subclass of `AbstractComponent`.');\n        }\n\n        if (options.childClass) {\n            if (!(proto instanceof ChildableComponent)) {\n                throw new Error('The `Component` decorator accepts the parameter `childClass` only when used with a subclass of `ChildableComponent`.');\n            }\n\n            childMappings.push({\n                host: proto,\n                child: options.childClass\n            });\n        }\n\n        const name = options.name;\n        if (name) {\n            proto.componentName = name;\n        }\n\n        const internal = !!options.internal;\n        if (name && !internal) {\n            for (let childMapping of childMappings) {\n                if (!(proto instanceof childMapping.child)) {\n                    continue;\n                }\n\n                const host = childMapping.host;\n                const defaults = host._defaultComponents || (host._defaultComponents = {});\n                defaults[name] = target;\n                break;\n            }\n        }\n    };\n}\n\nexport function Option(options: DeclarationOption): PropertyDecorator {\n    return function(target: AbstractComponent<any>, propertyKey: string) {\n        if (!(target instanceof AbstractComponent)) {\n            throw new Error('The `Option` decorator can only be used on properties within an `AbstractComponent` subclass.');\n        }\n\n        const list = target['_componentOptions'] || (target['_componentOptions'] = []);\n        options.component = target['_componentName'];\n        list.push(options);\n\n        Object.defineProperty(target, propertyKey, {\n            get: function () {\n                return this.application.options.getValue(options.name);\n            },\n            enumerable: true,\n            configurable: true\n        });\n    };\n}\n\nexport class ComponentEvent extends Event {\n    owner: ComponentHost;\n\n    component: AbstractComponent<ComponentHost>;\n\n    static ADDED = 'componentAdded';\n\n    static REMOVED = 'componentRemoved';\n\n    constructor(name: string, owner: ComponentHost, component: AbstractComponent<ComponentHost>) {\n        super(name);\n        this.owner = owner;\n        this.component = component;\n    }\n}\n\n/**\n * Component base class.\n */\nexport abstract class AbstractComponent<O extends ComponentHost> extends EventDispatcher implements ComponentHost {\n    /**\n     * The owner of this component instance.\n     */\n    private _componentOwner: O;\n\n    /**\n     * The name of this component as set by the @Component decorator.\n     */\n    public componentName: string;\n\n    /**\n     * A list of options defined by this component.\n     */\n    private _componentOptions: DeclarationOption[];\n\n    /**\n     * Create new Component instance.\n     */\n    constructor(owner: O) {\n        super();\n        this._componentOwner = owner;\n        this.initialize();\n    }\n\n    /**\n     * Initialize this component.\n     */\n    protected initialize() {}\n\n    protected bubble(name: Event|EventMap|string, ...args: any[]) {\n        super.trigger.apply(this, arguments);\n\n        const owner = <any> this.owner;\n        if (owner instanceof AbstractComponent) {\n            owner.bubble.apply(this._componentOwner, arguments);\n        }\n\n        return this;\n    }\n\n    /**\n     * Return all option declarations emitted by this component.\n     */\n    getOptionDeclarations(): DeclarationOption[] {\n        return this._componentOptions ? this._componentOptions.slice() : [];\n    }\n\n    /**\n     * Return the application / root component instance.\n     */\n    get application(): Application {\n        if (this._componentOwner) {\n            return this._componentOwner.application;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Return the owner of this component.\n     */\n    get owner(): O {\n        return this._componentOwner;\n    }\n}\n\n/**\n * Component base class.\n */\nexport abstract class ChildableComponent<O extends ComponentHost, C extends Component> extends AbstractComponent<O> {\n    /**\n     *\n     */\n    private _componentChildren: {[name: string]: C};\n\n    private _defaultComponents: {[name: string]: ComponentClass<C>};\n\n    /**\n     * Create new Component instance.\n     */\n    constructor(owner: O) {\n        super(owner);\n\n        for (let name in this._defaultComponents) {\n            this.addComponent(name, this._defaultComponents[name]);\n        }\n    }\n\n    /**\n     * Retrieve a plugin instance.\n     *\n     * @returns  The instance of the plugin or NULL if no plugin with the given class is attached.\n     */\n    getComponent(name: string): C {\n        if (this._componentChildren && this._componentChildren[name]) {\n            return this._componentChildren[name];\n        } else {\n            return null;\n        }\n    }\n\n    getComponents(): C[] {\n        return _.values<C>(this._componentChildren);\n    }\n\n    hasComponent(name: string): boolean {\n        return !!(this._componentChildren && this._componentChildren[name]);\n    }\n\n    addComponent<T extends C & Component>(name: string, componentClass: T|ComponentClass<T>): T {\n        if (!this._componentChildren) {\n            this._componentChildren = {};\n        }\n\n        if (this._componentChildren[name]) {\n            throw new Error('The component `%s` has already been added.');\n        } else {\n            const component: T = typeof componentClass === 'function' ? new (<ComponentClass<T>> componentClass)(this) : <T> componentClass;\n            const event = new ComponentEvent(ComponentEvent.ADDED, this, component);\n\n            this.bubble(event);\n            this._componentChildren[name] = component;\n\n            return component;\n        }\n    }\n\n    removeComponent(name: string): C {\n        if (!this._componentChildren) {\n            return null;\n        }\n        const component = this._componentChildren[name];\n        if (component) {\n            delete this._componentChildren[name];\n            component.stopListening();\n            this.bubble(new ComponentEvent(ComponentEvent.REMOVED, this, component));\n            return component;\n        } else {\n            return null;\n        }\n    }\n\n    removeAllComponents() {\n        if (!this._componentChildren) {\n            return;\n        }\n        for (let name in this._componentChildren) {\n            this._componentChildren[name].stopListening();\n        }\n\n        this._componentChildren = {};\n    }\n}\n"]}