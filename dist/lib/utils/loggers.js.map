{"version":3,"file":"loggers.js","sourceRoot":"","sources":["../../../src/lib/utils/loggers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as Util from 'util';\n\n/**\n * List of known log levels. Used to specify the urgency of a log message.\n */\nexport enum LogLevel {\n    Verbose,\n    Info,\n    Warn,\n    Error,\n    Success\n}\n\n/**\n * A logger that will not produce any output.\n *\n * This logger also serves as the ase calls of other loggers as it implements\n * all the required utility functions.\n */\nexport class Logger {\n    /**\n     * How many error messages have been logged?\n     */\n    errorCount = 0;\n\n    /**\n     * Has an error been raised through the log method?\n     */\n    public hasErrors(): boolean {\n        return this.errorCount > 0;\n    }\n\n    /**\n     * Reset the error counter.\n     */\n    public resetErrors() {\n        this.errorCount = 0;\n    }\n\n    /**\n     * Log the given message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public write(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Info);\n    }\n\n    /**\n     * Log the given message with a trailing whitespace.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public writeln(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Info, true);\n    }\n\n    /**\n     * Log the given success message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public success(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Success);\n    }\n\n    /**\n     * Log the given verbose message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public verbose(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Verbose);\n    }\n\n    /**\n     * Log the given warning.\n     *\n     * @param text  The warning that should be logged.\n     * @param args  The arguments that should be printed into the given warning.\n     */\n    public warn(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Warn);\n    }\n\n    /**\n     * Log the given error.\n     *\n     * @param text  The error that should be logged.\n     * @param args  The arguments that should be printed into the given error.\n     */\n    public error(text: string, ...args: string[]) {\n        this.log(Util.format.apply(this, arguments), LogLevel.Error);\n    }\n\n    /**\n     * Print a log message.\n     *\n     * @param message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param newLine  Should the logger print a trailing whitespace?\n     */\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\n        if (level === LogLevel.Error) {\n            this.errorCount += 1;\n        }\n    }\n\n    /**\n     * Print the given TypeScript log messages.\n     *\n     * @param diagnostics  The TypeScript messages that should be logged.\n     */\n    public diagnostics(diagnostics: ReadonlyArray<ts.Diagnostic>) {\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostic(diagnostic);\n        });\n    }\n\n    /**\n     * Print the given TypeScript log message.\n     *\n     * @param diagnostic  The TypeScript message that should be logged.\n     */\n    public diagnostic(diagnostic: ts.Diagnostic) {\n        let output: string;\n        if (diagnostic.file) {\n            output = diagnostic.file.fileName;\n            output += '(' + ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start).line + ')';\n            output += ts.sys.newLine + ' ' + ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine);\n        } else {\n            output = diagnostic.messageText.toString();\n        }\n\n        switch (diagnostic.category) {\n            case ts.DiagnosticCategory.Error:\n                this.log(output, LogLevel.Error);\n                break;\n            case ts.DiagnosticCategory.Warning:\n                this.log(output, LogLevel.Warn);\n                break;\n            case ts.DiagnosticCategory.Message:\n                this.log(output, LogLevel.Info);\n        }\n    }\n}\n\n/**\n * A logger that outputs all messages to the console.\n */\nexport class ConsoleLogger extends Logger {\n    /**\n     * Print a log message.\n     *\n     * @param message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param newLine  Should the logger print a trailing whitespace?\n     */\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\n        if (level === LogLevel.Error) {\n            this.errorCount += 1;\n        }\n\n        let output = '';\n        if (level === LogLevel.Error) {\n            output += 'Error: ';\n        }\n        if (level === LogLevel.Warn) {\n            output += 'Warning: ';\n        }\n        output += message;\n\n        if (newLine || level === LogLevel.Success) {\n            ts.sys.write(ts.sys.newLine);\n        }\n        ts.sys.write(output + ts.sys.newLine);\n        if (level === LogLevel.Success) {\n            ts.sys.write(ts.sys.newLine);\n        }\n    }\n}\n\n/**\n * A logger that calls a callback function.\n */\nexport class CallbackLogger extends Logger {\n    /**\n     * This loggers callback function\n     */\n    callback: Function;\n\n    /**\n     * Create a new CallbackLogger instance.\n     *\n     * @param callback  The callback that should be used to log messages.\n     */\n    constructor(callback: Function) {\n        super();\n        this.callback = callback;\n    }\n\n    /**\n     * Print a log message.\n     *\n     * @param message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param newLine  Should the logger print a trailing whitespace?\n     */\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\n        if (level === LogLevel.Error) {\n            this.errorCount += 1;\n        }\n\n        this.callback(message, level, newLine);\n    }\n}\n"]}