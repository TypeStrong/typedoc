{"version":3,"file":"utils.paths.test.js","sourceRoot":"","sources":["../../src/test/utils.paths.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport { Minimatch } from 'minimatch';\n\nimport isEqual = require('lodash/isEqual');\nimport Assert = require('assert');\n\nimport { createMinimatch } from '..';\n\n// Used to ensure uniform path cross OS\nconst absolutePath = (path: string) => Path.resolve(path.replace(/^\\w:/, '')).replace(/[\\\\]/g, '/');\n\ndescribe('Paths', () => {\n  describe('createMinimatch', () => {\n    it('Converts an array of paths to an array of Minimatch expressions', () => {\n      const mms = createMinimatch(['/some/path/**', '**/another/path/**', './relative/**/path']);\n      Assert(Array.isArray(mms), 'Didn\\'t return an array');\n\n      const allAreMm = mms.every((mm) => mm instanceof Minimatch);\n      Assert(allAreMm, 'Not all paths are coverted to Minimatch');\n    });\n\n    it('Minimatch can match absolute paths expressions', () => {\n      const paths = ['/unix/absolute/**/path', '\\\\windows\\\\alternative\\\\absolute\\\\path', 'C:\\\\Windows\\\\absolute\\\\*\\\\path', '**/arbitrary/path/**'];\n      const mms = createMinimatch(paths);\n      const patterns = mms.map(({ pattern }) => pattern);\n      const comparePaths = [\n        absolutePath('/unix/absolute/**/path'),\n        absolutePath('/windows/alternative/absolute/path'),\n        absolutePath('/Windows/absolute/*/path'),\n        '**/arbitrary/path/**'\n      ];\n\n      Assert(isEqual(patterns, comparePaths), `Patterns have been altered:\\nMMS: ${patterns}\\nPaths: ${comparePaths}`);\n\n      Assert(mms[0].match(absolutePath('/unix/absolute/some/sub/dir/path')), 'Din\\'t match unix path');\n      Assert(mms[1].match(absolutePath('/windows/alternative/absolute/path')), 'Din\\'t match windows alternative path');\n      Assert(mms[2].match(absolutePath('/Windows/absolute/test/path')), 'Din\\'t match windows path');\n      Assert(mms[3].match(absolutePath('/some/deep/arbitrary/path/leading/nowhere')), 'Din\\'t match arbitrary path');\n    });\n\n    it('Minimatch can match relative to the project root', () => {\n      const paths = ['./relative/**/path', '../parent/*/path', 'no/dot/relative/**/path/*', '*/subdir/**/path/*', '.dot/relative/**/path/*'];\n      const absPaths = paths.map((path) => absolutePath(path));\n      const mms = createMinimatch(paths);\n      const patterns = mms.map(({ pattern }) => pattern);\n\n      Assert(isEqual(patterns, absPaths), `Project root have not been added to paths:\\nMMS: ${patterns}\\nPaths: ${absPaths}`);\n\n      Assert(mms[0].match(Path.resolve('relative/some/sub/dir/path')), 'Din\\'t match relative path');\n      Assert(mms[1].match(Path.resolve('../parent/dir/path')), 'Din\\'t match parent path');\n      Assert(mms[2].match(Path.resolve('no/dot/relative/some/sub/dir/path/test')), 'Din\\'t match no dot path');\n      Assert(mms[3].match(Path.resolve('some/subdir/path/here')), 'Din\\'t match single star path');\n      Assert(mms[4].match(Path.resolve('.dot/relative/some/sub/dir/path/test')), 'Din\\'t match dot path');\n    });\n\n    it('Minimatch matches dot files', () => {\n      const mm = createMinimatch(['/some/path/**'])[0];\n      Assert(mm.match(absolutePath('/some/path/.dot/dir')), 'Didn\\'t match .dot path');\n      Assert(mm.match(absolutePath('/some/path/normal/dir')), 'Didn\\'t match normal path');\n    });\n  });\n});\n"]}