{"version":3,"file":"typedoc.test.js","sourceRoot":"","sources":["../../src/test/typedoc.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Application } from '..';\nimport * as Path from 'path';\nimport Assert = require('assert');\nimport './.dot';\nimport { Converter, Context } from '../lib/converter';\n\ndescribe('TypeDoc', function() {\n    let application: Application;\n\n    describe('Application', function() {\n        before('constructs', function() {\n            application = new Application();\n        });\n        it('expands input directory', function() {\n            const inputFiles = Path.join(__dirname, 'converter', 'class');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(expanded.includes(Path.join(inputFiles, 'class.ts')));\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('expands input files', function() {\n            const inputFiles = Path.join(__dirname, 'converter', 'class', 'class.ts');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(expanded.includes(inputFiles));\n        });\n        it('honors the exclude argument even on a fixed directory list', function() {\n            const inputFiles = Path.join(__dirname, 'converter', 'class');\n            application.options.setValue('exclude', '**/class.ts');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(!expanded.includes(Path.join(inputFiles, 'class.ts')));\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('honors the exclude argument even on a fixed file list', function() {\n            const inputFiles = Path.join(__dirname, 'converter', 'class', 'class.ts');\n            application.options.setValue('exclude', '**/class.ts');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('supports multiple excludes', function() {\n            const inputFiles = Path.join(__dirname, 'converter');\n            application.options.setValue('exclude', '**/+(class|access).ts');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(!expanded.includes(Path.join(inputFiles, 'class', 'class.ts')));\n            Assert(!expanded.includes(Path.join(inputFiles, 'access', 'access.ts')));\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('supports array of excludes', function() {\n            const inputFiles = Path.join(__dirname, 'converter');\n            application.options.setValue('exclude', [ '**/class.ts', '**/access.ts' ]);\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(!expanded.includes(Path.join(inputFiles, 'class', 'class.ts')));\n            Assert(!expanded.includes(Path.join(inputFiles, 'access', 'access.ts')));\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('supports excluding directories beginning with dots', function() {\n            const inputFiles = __dirname;\n            application.options.setValue('exclude', '**/+(.dot)/**');\n            const expanded = application.expandInputFiles([inputFiles]);\n\n            Assert(!expanded.includes(Path.join(inputFiles, '.dot', 'index.ts')));\n            Assert(!expanded.includes(inputFiles));\n        });\n        it('Honors the exclude option even if a module is imported', () => {\n            application.options.setValue('exclude', '**/b.d.ts');\n\n            function handler(context: Context) {\n                Assert.deepStrictEqual(context.fileNames, [\n                    Path.resolve(__dirname, 'module', 'a.d.ts').replace(/\\\\/g, '/')\n                ]);\n            }\n            application.converter.on(Converter.EVENT_END, handler);\n            application.convert([ Path.join(__dirname, 'module', 'a.d.ts')]);\n            application.converter.off(Converter.EVENT_END, handler);\n        });\n    });\n});\n"]}