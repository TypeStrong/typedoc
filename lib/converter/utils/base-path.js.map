{"version":3,"file":"base-path.js","sourceRoot":"","sources":["../../../src/lib/converter/utils/base-path.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\n\n\n/**\n * Helper class that determines the common base path of a set of files.\n *\n * In the first step all files must be passed to [[add]]. Afterwards [[trim]]\n * can be used to retrieve the shortest path relative to the determined base path.\n */\nexport class BasePath\n{\n    /**\n     * List of known base paths.\n     */\n    private basePaths:string[] = [];\n\n\n    /**\n     * Add the given file path to this set of base paths.\n     *\n     * @param fileName  The absolute filename that should be added to the base path.\n     */\n    add(fileName:string) {\n        var fileDir  = Path.dirname(BasePath.normalize(fileName));\n        var filePath = fileDir.split('/');\n\n        basePaths: for (var n = 0, c = this.basePaths.length; n < c; n++) {\n            var basePath = this.basePaths[n].split('/');\n            var mMax     = Math.min(basePath.length, filePath.length);\n            for (var m = 0; m < mMax; m++) {\n                if (basePath[m] == filePath[m]) {\n                    continue;\n                }\n\n                if (m < 1) {\n                    // No match at all, try next known base path\n                    continue basePaths;\n                } else {\n                    // Partial match, trim the known base path\n                    if (m < basePath.length) {\n                        this.basePaths[n] = basePath.slice(0, m).join('/');\n                    }\n                    return;\n                }\n            }\n\n            // Complete match, exit\n            this.basePaths[n] = basePath.splice(0, mMax).join('/');\n            return;\n        }\n\n        // Unknown base path, add it\n        this.basePaths.push(fileDir);\n    }\n\n\n    /**\n     * Trim the given filename by the determined base paths.\n     *\n     * @param fileName  The absolute filename that should be trimmed.\n     * @returns The trimmed version of the filename.\n     */\n    trim(fileName:string):string {\n        fileName = BasePath.normalize(fileName);\n        for (var n = 0, c = this.basePaths.length; n < c; n++) {\n            var basePath = this.basePaths[n];\n            if (fileName.substr(0, basePath.length) == basePath) {\n                return fileName.substr(basePath.length + 1);\n            }\n        }\n\n        return fileName;\n    }\n\n\n    /**\n     * Reset this instance, ignore all paths already passed to [[add]].\n     */\n    reset() {\n        this.basePaths = [];\n    }\n\n\n    /**\n     * Normalize the given path.\n     *\n     * @param path  The path that should be normalized.\n     * @returns Normalized version of the given path.\n     */\n    static normalize(path:string):string {\n        // Ensure forward slashes\n        path = path.replace(/\\\\/g, '/');\n\n        // Remove all surrounding quotes\n        path = path.replace(/^[\"']+|[\"']+$/g, '');\n\n        // Make Windows drive letters lower case\n        return path.replace(/^([^\\:]+)\\:\\//, (m, m1) => m1.toUpperCase() + ':/');\n    }\n}\n"]}