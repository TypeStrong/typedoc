{"version":3,"file":"alias.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/alias.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAyC,oBAAoB,CAAC,CAAA;AAC9D,sBAAgC,oBAAoB,CAAC,CAAA;AAErD,2BAAgD,eAAe,CAAC,CAAA;AAIhE;IAAoC,kCAA+C;IAAnF;QAAoC,8BAA+C;QAK/E,aAAQ,GAAmB;YACvB,GAAkC;SACrC,CAAC;IAmBN,CAAC;IATG,gCAAO,GAAP,UAAQ,OAAe,EAAE,IAA4B;QAArD,iBAQC;QAPG,IAAI,KAAK,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;QAEvE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE;YACrB,KAAK,CAAC,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IA1BL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,YAAY,EAAC,CAAC;sBAAA;IA2B/B,qBAAC;AAAD,CAAC,AA1BD,CAAoC,mCAAsB,GA0BzD;AA1BY,sBAAc,iBA0B1B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {createDeclaration} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:alias'})\nexport class AliasConverter extends ConverterNodeComponent<ts.TypeAliasDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.TypeAliasDeclaration\n    ];\n\n\n    /**\n     * Analyze the given type alias declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The type alias declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.TypeAliasDeclaration):Reflection {\n        var alias = createDeclaration(context, node, ReflectionKind.TypeAlias);\n\n        context.withScope(alias, () => {\n            alias.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node.type));\n        });\n\n        return alias;\n    }\n}\n"]}