{"version":3,"file":"variable-statement.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/variable-statement.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAIjC,2BAAgD,eAAe,CAAC,CAAA;AAIhE;IAAgD,8CAA4C;IAA5F;QAAgD,8BAA4C;QAKxF,aAAQ,GAAmB;YACvB,GAA+B;SAClC,CAAC;IAwCN,CAAC;IA9BG,4CAAO,GAAP,UAAQ,OAAe,EAAE,IAAyB;QAAlD,iBAYC;QAXG,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,mBAAmB;gBAC1D,EAAE,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChD,KAAI,CAAC,qBAAqB,CAAC,OAAO,EAAqB,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBACrF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;gBACzD,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IASD,0DAAqB,GAArB,UAAsB,OAAe,EAAE,IAAsB;QAA7D,iBAQC;QAPG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAyB;YAC5C,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAO,OAAO,CAAC,CAAC;YAE9C,EAAE,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,KAAI,CAAC,qBAAqB,CAAC,OAAO,EAAqB,OAAO,CAAC,IAAI,CAAC,CAAC;YACzE,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA/CL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,yBAAyB,EAAC,CAAC;kCAAA;IAgD5C,iCAAC;AAAD,CAAC,AA/CD,CAAgD,mCAAsB,GA+CrE;AA/CY,kCAA0B,6BA+CtC,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:variable-statement'})\nexport class VariableStatementConverter extends ConverterNodeComponent<ts.VariableStatement>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.VariableStatement\n    ];\n\n\n    /**\n     * Analyze the given variable statement node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The variable statement node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.VariableStatement):Reflection {\n        if (node.declarationList && node.declarationList.declarations) {\n            node.declarationList.declarations.forEach((variableDeclaration) => {\n                if (ts.isBindingPattern(variableDeclaration.name)) {\n                    this.convertBindingPattern(context, <ts.BindingPattern>variableDeclaration.name);\n                } else {\n                    this.owner.convertNode(context, variableDeclaration);\n                }\n            });\n        }\n\n        return context.scope;\n    }\n\n\n    /**\n     * Traverse the elements of the given binding pattern and create the corresponding variable reflections.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The binding pattern node that should be analyzed.\n     */\n    convertBindingPattern(context:Context, node:ts.BindingPattern) {\n        node.elements.forEach((element:ts.BindingElement) => {\n            this.owner.convertNode(context, <any>element);\n\n            if (ts.isBindingPattern(element.name)) {\n                this.convertBindingPattern(context, <ts.BindingPattern>element.name);\n            }\n        });\n    }\n}\n"]}