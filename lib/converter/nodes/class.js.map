{"version":3,"file":"class.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/class.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAgE,oBAAoB,CAAC,CAAA;AACrF,sBAAgC,oBAAoB,CAAC,CAAA;AAErD,2BAAgD,eAAe,CAAC,CAAA;AAGhE;IAAoC,kCAA2C;IAA/E;QAAoC,8BAA2C;QAK3E,aAAQ,GAAmB;YACvB,GAA6B;YAC7B,GAA8B;SACjC,CAAC;IA2DN,CAAC;IAjDG,gCAAO,GAAP,UAAQ,OAAe,EAAE,IAAwB;QAAjD,iBAgDC;QA/CG,IAAI,UAAgC,CAAC;QACrC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;YACrD,UAAU,GAA0B,OAAO,CAAC,KAAK,CAAC;QACtD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,KAAK,CAAC,CAAC;QACxE,CAAC;QAED,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;oBACxB,IAAM,aAAa,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAoB,CAAC,GAAG,CAAC,CAAC;oBAChE,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,GAAG,aAAa,GAAG,KAAK,CAAC;oBAEzE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACX,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAC5C,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,QAAQ,GAAG,EAAE,CAAC,oCAAoC,CAAC,IAAI,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC/C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC;wBAAC,UAAU,CAAC,aAAa,GAAG,EAAE,CAAC;oBAC7D,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;gBACnF,CAAC;gBAED,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;wBACzC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;oBACzD,CAAC,CAAC,CAAC;gBACP,CAAC;YACL,CAAC;YAED,IAAI,gBAAgB,GAAG,EAAE,CAAC,wCAAwC,CAAC,IAAI,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACnB,gBAAgB,CAAC,OAAO,CAAC,UAAC,eAAe;oBACrC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBAC/B,UAAU,CAAC,gBAAgB,GAAG,EAAE,CAAC;oBACrC,CAAC;oBAED,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;gBACvF,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAnEL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,YAAY,EAAC,CAAC;sBAAA;IAoE/B,qBAAC;AAAD,CAAC,AAnED,CAAoC,mCAAsB,GAmEzD;AAnEY,sBAAc,iBAmE1B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind, DeclarationReflection} from \"../../models/index\";\nimport {createDeclaration} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n@Component({name:'node:class'})\nexport class ClassConverter extends ConverterNodeComponent<ts.ClassDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.ClassExpression,\n        ts.SyntaxKind.ClassDeclaration\n    ];\n\n\n    /**\n     * Analyze the given class declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The class declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.ClassDeclaration):Reflection {\n        var reflection:DeclarationReflection;\n        if (context.isInherit && context.inheritParent == node) {\n            reflection = <DeclarationReflection>context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Class);\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member) => {\n                    const privateMember = (member.flags & ts.NodeFlags.Private) > 0;\n                    const exclude = context.converter.excludePrivate ? privateMember : false;\n                    \n                    if (!exclude) {\n                        this.owner.convertNode(context, member);\n                    }\n                });\n            }\n\n            var baseType = ts.getClassExtendsHeritageClauseElement(node);\n            if (baseType) {\n                var type = context.getTypeAtLocation(baseType);\n                if (!context.isInherit) {\n                    if (!reflection.extendedTypes) reflection.extendedTypes = [];\n                    reflection.extendedTypes.push(this.owner.convertType(context, baseType, type));\n                }\n\n                if (type && type.symbol) {\n                    type.symbol.declarations.forEach((declaration) => {\n                        context.inherit(declaration, baseType.typeArguments);\n                    });\n                }\n            }\n\n            var implementedTypes = ts.getClassImplementsHeritageClauseElements(node);\n            if (implementedTypes) {\n                implementedTypes.forEach((implementedType) => {\n                    if (!reflection.implementedTypes) {\n                        reflection.implementedTypes = [];\n                    }\n\n                    reflection.implementedTypes.push(this.owner.convertType(context, implementedType));\n                });\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}