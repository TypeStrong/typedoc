{"version":3,"file":"constructor.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/constructor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind, ReflectionFlag, DeclarationReflection, ReferenceType, Comment} from \"../../models/index\";\nimport {createDeclaration, createSignature, createComment} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Converter} from \"../converter\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:constructor'})\nexport class ConstructorConverter extends ConverterNodeComponent<ts.ConstructorDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.Constructor,\n        ts.SyntaxKind.ConstructSignature\n    ];\n\n\n    /**\n     * Analyze the given constructor declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The constructor declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.ConstructorDeclaration):Reflection {\n        var parent = context.scope;\n        var hasBody = !!node.body;\n        var method = createDeclaration(context, node, ReflectionKind.Constructor, 'constructor');\n\n        if (node.parameters && node.parameters.length) {\n            var comment = method ? method.comment : createComment(node);\n            for (var parameter of node.parameters) {\n                this.addParameterProperty(context, parameter, comment);\n            }\n        }\n\n        context.withScope(method, () => {\n            if (!hasBody || !method.signatures) {\n                var name = 'new ' + parent.name;\n                var signature = createSignature(context, node, name, ReflectionKind.ConstructorSignature);\n                signature.type = new ReferenceType(parent.name, ReferenceType.SYMBOL_ID_RESOLVED, parent);\n                method.signatures = method.signatures || [];\n                method.signatures.push(signature);\n            } else {\n                context.trigger(Converter.EVENT_FUNCTION_IMPLEMENTATION, method, node);\n            }\n        });\n\n        return method;\n    }\n\n\n    /**\n     * Analyze parameters in given constructor declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The constructor declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    private addParameterProperty(context:Context, parameter:ts.ParameterDeclaration, comment:Comment) {\n        var visibility = parameter.flags & (ts.NodeFlags.Public | ts.NodeFlags.Protected | ts.NodeFlags.Private);\n        if (!visibility) return;\n\n        const privateParameter = parameter.flags & ts.NodeFlags.Private;\n        if (privateParameter && context.converter.excludePrivate) return;\n\n        var property = createDeclaration(context, parameter, ReflectionKind.Property);\n        if (!property) return;\n\n        property.setFlag(ReflectionFlag.Static, false);\n        property.type = this.owner.convertType(context, parameter.type, context.getTypeAtLocation(parameter));\n\n        if (comment) {\n            var tag = comment.getTag('param', property.name);\n            if (tag && tag.text) {\n                property.comment = new Comment(tag.text);\n            }\n        }\n    }\n}\n"]}