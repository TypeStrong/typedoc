{"version":3,"file":"accessor.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/accessor.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAyC,oBAAoB,CAAC,CAAA;AAC9D,sBAAiD,oBAAoB,CAAC,CAAA;AAEtE,2BAAgD,eAAe,CAAC,CAAA;AAIhE;IAAuC,qCAA+C;IAAtF;QAAuC,8BAA+C;QAKlF,aAAQ,GAAmB;YACvB,GAAyB;YACzB,GAAyB;SAC5B,CAAC;IAuBN,CAAC;IAbG,mCAAO,GAAP,UAAQ,OAAe,EAAE,IAA4B;QACjD,IAAI,QAAQ,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,QAAQ,CAAC,CAAC;QAEzE,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,GAAyB,CAAC,CAAC,CAAC;gBACzC,QAAQ,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;YACjG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,QAAQ,CAAC,YAAY,GAAG,uBAAe,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,sBAAc,CAAC,YAAY,CAAC,CAAC;YACjG,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IA/BL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,eAAe,EAAC,CAAC;yBAAA;IAgClC,wBAAC;AAAD,CAAC,AA/BD,CAAuC,mCAAsB,GA+B5D;AA/BY,yBAAiB,oBA+B7B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {createDeclaration, createSignature} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:accessor'})\nexport class AccessorConverter extends ConverterNodeComponent<ts.SignatureDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.GetAccessor,\n        ts.SyntaxKind.SetAccessor\n    ];\n\n\n    /**\n     * Analyze the given getter declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The signature declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.SignatureDeclaration):Reflection {\n        var accessor = createDeclaration(context, node, ReflectionKind.Accessor);\n\n        context.withScope(accessor, () => {\n            if (node.kind == ts.SyntaxKind.GetAccessor) {\n                accessor.getSignature = createSignature(context, node, '__get', ReflectionKind.GetSignature);\n            } else {\n                accessor.setSignature = createSignature(context, node, '__set', ReflectionKind.SetSignature);\n            }\n        });\n\n        return accessor;\n    }\n}\n"]}