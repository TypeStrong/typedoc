{"version":3,"file":"signature-call.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/signature-call.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAgE,oBAAoB,CAAC,CAAA;AAErF,2BAAgD,eAAe,CAAC,CAAA;AAChE,sBAA8B,oBAAoB,CAAC,CAAA;AAInD;IAAwC,sCAA2F;IAAnI;QAAwC,8BAA2F;QAK/H,aAAQ,GAAmB;YACvB,GAA2B;YAC3B,GAA0B;YAC1B,GAAgC;YAChC,GAA2B;SAC9B,CAAC;IAqBN,CAAC;IAXG,oCAAO,GAAP,UAAQ,OAAe,EAAE,IAAwE;QAC7F,IAAI,KAAK,GAA0B,OAAO,CAAC,KAAK,CAAC;QACjD,EAAE,CAAC,CAAC,KAAK,YAAY,6BAAqB,CAAC,CAAC,CAAC;YACzC,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,sBAAc,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC;YACjF,IAAI,SAAS,GAAG,uBAAe,CAAC,OAAO,EAA2B,IAAI,EAAE,IAAI,EAAE,sBAAc,CAAC,aAAa,CAAC,CAAC;YAC5G,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;gBAAC,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;YAC7C,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IA/BL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,qBAAqB,EAAC,CAAC;0BAAA;IAgCxC,yBAAC;AAAD,CAAC,AA/BD,CAAwC,mCAAsB,GA+B7D;AA/BY,0BAAkB,qBA+B9B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind, DeclarationReflection} from \"../../models/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\nimport {createSignature} from \"../factories/index\";\n\n\n@Component({name:'node:signature-call'})\nexport class SignatureConverter extends ConverterNodeComponent<ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.CallSignature,\n        ts.SyntaxKind.FunctionType,\n        ts.SyntaxKind.FunctionExpression,\n        ts.SyntaxKind.ArrowFunction\n    ];\n\n\n    /**\n     * Analyze the given call signature declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The signature declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.FunctionExpression|ts.SignatureDeclaration|ts.FunctionExpression):Reflection {\n        var scope = <DeclarationReflection>context.scope;\n        if (scope instanceof DeclarationReflection) {\n            var name = scope.kindOf(ReflectionKind.FunctionOrMethod) ? scope.name : '__call';\n            var signature = createSignature(context, <ts.SignatureDeclaration>node, name, ReflectionKind.CallSignature);\n            if (!scope.signatures) scope.signatures = [];\n            scope.signatures.push(signature);\n        }\n\n        return scope;\n    }\n}\n"]}