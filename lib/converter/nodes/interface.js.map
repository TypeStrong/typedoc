{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/interface.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAgE,oBAAoB,CAAC,CAAA;AACrF,sBAAgC,oBAAoB,CAAC,CAAA;AAErD,2BAAgD,eAAe,CAAC,CAAA;AAIhE;IAAwC,sCAA+C;IAAvF;QAAwC,8BAA+C;QAKnF,aAAQ,GAAmB;YACvB,GAAkC;SACrC,CAAC;IA6CN,CAAC;IAnCG,oCAAO,GAAP,UAAQ,OAAe,EAAE,IAA4B;QAArD,iBAkCC;QAjCG,IAAI,UAAgC,CAAC;QACrC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;YACrD,UAAU,GAA0B,OAAO,CAAC,KAAK,CAAC;QACtD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,SAAS,CAAC,CAAC;QAC5E,CAAC;QAED,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,SAAS;oBACnC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,SAAS,GAAG,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;oBACvB,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;oBAC/C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wBACrB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC;4BAAC,UAAU,CAAC,aAAa,GAAG,EAAE,CAAC;wBAC7D,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;oBACnF,CAAC;oBAED,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACtB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;4BACzC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;wBACzD,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IApDL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,gBAAgB,EAAC,CAAC;0BAAA;IAqDnC,yBAAC;AAAD,CAAC,AApDD,CAAwC,mCAAsB,GAoD7D;AApDY,0BAAkB,qBAoD9B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind, DeclarationReflection} from \"../../models/index\";\nimport {createDeclaration} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:interface'})\nexport class InterfaceConverter extends ConverterNodeComponent<ts.InterfaceDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.InterfaceDeclaration\n    ];\n\n\n    /**\n     * Analyze the given interface declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The interface declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.InterfaceDeclaration):Reflection {\n        var reflection:DeclarationReflection;\n        if (context.isInherit && context.inheritParent == node) {\n            reflection = <DeclarationReflection>context.scope;\n        } else {\n            reflection = createDeclaration(context, node, ReflectionKind.Interface);\n        }\n\n        context.withScope(reflection, node.typeParameters, () => {\n            if (node.members) {\n                node.members.forEach((member, isInherit) => {\n                    this.owner.convertNode(context, member);\n                });\n            }\n\n            var baseTypes = ts.getInterfaceBaseTypeNodes(node);\n            if (baseTypes) {\n                baseTypes.forEach((baseType) => {\n                    var type = context.getTypeAtLocation(baseType);\n                    if (!context.isInherit) {\n                        if (!reflection.extendedTypes) reflection.extendedTypes = [];\n                        reflection.extendedTypes.push(this.owner.convertType(context, baseType, type));\n                    }\n\n                    if (type && type.symbol) {\n                        type.symbol.declarations.forEach((declaration) => {\n                            context.inherit(declaration, baseType.typeArguments);\n                        });\n                    }\n                });\n            }\n        });\n\n        return reflection;\n    }\n}\n"]}