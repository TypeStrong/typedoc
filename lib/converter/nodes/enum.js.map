{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/enum.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAyC,oBAAoB,CAAC,CAAA;AAC9D,sBAAgC,oBAAoB,CAAC,CAAA;AAErD,2BAAgD,eAAe,CAAC,CAAA;AAChE,sBAAkC,UAAU,CAAC,CAAA;AAI7C;IAAmC,iCAA0C;IAA7E;QAAmC,8BAA0C;QAKzE,aAAQ,GAAmB;YACvB,GAA6B;SAChC,CAAC;IAwCN,CAAC;IA9BG,+BAAO,GAAP,UAAQ,OAAe,EAAE,IAAuB;QAAhD,iBAYC;QAXG,IAAI,WAAW,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,IAAI,CAAC,CAAC;QAExE,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,GAAG,CAAC,CAAe,UAAY,EAAZ,KAAA,IAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY,CAAC;oBAA3B,IAAI,MAAM,SAAA;oBACX,KAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;iBACvC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAUO,qCAAa,GAArB,UAAsB,OAAe,EAAE,IAAkB;QACrD,IAAI,MAAM,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,UAAU,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,YAAY,GAAG,2BAAmB,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IA/CL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,WAAW,EAAC,CAAC;qBAAA;IAgD9B,oBAAC;AAAD,CAAC,AA/CD,CAAmC,mCAAsB,GA+CxD;AA/CY,qBAAa,gBA+CzB,CAAA","sourcesContent":["\nimport * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind} from \"../../models/index\";\nimport {createDeclaration} from \"../factories/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\nimport {convertDefaultValue} from \"../index\";\n\n\n@Component({name:'node:enum'})\nexport class EnumConverter extends ConverterNodeComponent<ts.EnumDeclaration>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.EnumDeclaration\n    ];\n\n\n    /**\n     * Analyze the given enumeration declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The enumeration declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context:Context, node:ts.EnumDeclaration):Reflection {\n        var enumeration = createDeclaration(context, node, ReflectionKind.Enum);\n\n        context.withScope(enumeration, () => {\n            if (node.members) {\n                for (var member of node.members) {\n                    this.convertMember(context, member);\n                }\n            }\n        });\n\n        return enumeration;\n    }\n\n\n    /**\n     * Analyze the given enumeration member node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The enumeration member node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    private convertMember(context:Context, node:ts.EnumMember):Reflection {\n        var member = createDeclaration(context, node, ReflectionKind.EnumMember);\n        if (member) {\n            member.defaultValue = convertDefaultValue(node);\n        }\n\n        return member;\n    }\n}\n"]}