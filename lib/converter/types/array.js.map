{"version":3,"file":"array.js","sourceRoot":"","sources":["../../../src/lib/converter/types/array.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAkC,oBAAoB,CAAC,CAAA;AACvD,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAAoC,kCAAsB;IAA1D;QAAoC,8BAAsB;IAkC1D,CAAC;IA7BG,qCAAY,GAAZ,UAAa,OAAe,EAAE,IAAqB;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,GAAuB,CAAC;IACjD,CAAC;IAgBD,oCAAW,GAAX,UAAY,OAAe,EAAE,IAAqB;QAC9C,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,IAAI,qBAAa,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAlCL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,YAAY,EAAC,CAAC;sBAAA;IAmC/B,qBAAC;AAAD,CAAC,AAlCD,CAAoC,mCAAsB,GAkCzD;AAlCY,sBAAc,iBAkC1B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, IntrinsicType} from \"../../models/index\";\nimport {Component, ConverterTypeComponent, ITypeNodeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:array'})\nexport class ArrayConverter extends ConverterTypeComponent implements ITypeNodeConverter<ts.Type, ts.ArrayTypeNode>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context:Context, node:ts.ArrayTypeNode):boolean {\n        return node.kind === ts.SyntaxKind.ArrayType;\n    }\n\n\n    /**\n     * Convert the given array type node to its type reflection.\n     *\n     * This is a node based converter with no type equivalent.\n     *\n     * ```\n     * var someValue:number[];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The array type node that should be converted.\n     * @returns The type reflection representing the given array type node.\n     */\n    convertNode(context:Context, node:ts.ArrayTypeNode):Type {\n        var result = this.owner.convertType(context, node.elementType);\n\n        if (result) {\n            result.isArray = true;\n        } else {\n            result = new IntrinsicType('Array');\n        }\n\n        return result;\n    }\n}\n"]}