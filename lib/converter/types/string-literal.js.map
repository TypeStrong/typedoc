{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../src/lib/converter/types/string-literal.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAsC,0BAA0B,CAAC,CAAA;AACjE,2BAAgE,eAAe,CAAC,CAAA;AAKhF;IAA4C,0CAAsB;IAAlE;QAA4C,8BAAsB;IAkDlE,CAAC;IA7CG,6CAAY,GAAZ,UAAa,OAAe,EAAE,IAAqB;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAA2B,CAAC;IACrD,CAAC;IAMD,6CAAY,GAAZ,UAAa,OAAe,EAAE,IAAmB;QAC7C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAA0B,CAAC,CAAC;IACvD,CAAC;IAeD,4CAAW,GAAX,UAAY,OAAe,EAAE,IAAqB;QAC9C,MAAM,CAAC,IAAI,yBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAeD,4CAAW,GAAX,UAAY,OAAe,EAAE,IAAmB;QAC5C,MAAM,CAAC,IAAI,yBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAlDL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,qBAAqB,EAAC,CAAC;8BAAA;IAmDxC,6BAAC;AAAD,CAAC,AAlDD,CAA4C,mCAAsB,GAkDjE;AAlDY,8BAAsB,yBAkDlC,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, StringLiteralType} from \"../../models/types/index\";\nimport {Component, ConverterTypeComponent, ITypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:string-literal'})\nexport class StringLiteralConverter extends ConverterTypeComponent implements ITypeConverter<ts.LiteralType, ts.StringLiteral>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context:Context, node:ts.StringLiteral):boolean {\n        return node.kind === ts.SyntaxKind.StringLiteral;\n    }\n\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.LiteralType):boolean {\n        return !!(type.flags & ts.TypeFlags.StringLiteral);\n    }\n\n\n    /**\n     * Convert the given string literal expression node to its type reflection.\n     *\n     * This is a node based converter, see [[convertStringLiteralType]] for the type equivalent.\n     *\n     * ```\n     * createElement(tagName:\"a\"):HTMLAnchorElement;\n     * ```\n     *\n     * @param node  The string literal node that should be converted.\n     * @returns The type reflection representing the given string literal node.\n     */\n    convertNode(context:Context, node:ts.StringLiteral):Type {\n        return new StringLiteralType(node.text);\n    }\n\n\n    /**\n     * Convert the given string literal type to its type reflection.\n     *\n     * This is a type based converter, see [[convertStringLiteralExpression]] for the node equivalent.\n     *\n     * ```\n     * createElement(tagName:\"a\"):HTMLAnchorElement;\n     * ```\n     *\n     * @param type  The intrinsic type that should be converted.\n     * @returns The type reflection representing the given string literal type.\n     */\n    convertType(context:Context, type:ts.LiteralType):Type {\n        return new StringLiteralType(type.text);\n    }\n}\n"]}