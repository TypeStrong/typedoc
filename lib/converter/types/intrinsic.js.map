{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../src/lib/converter/types/intrinsic.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAkC,oBAAoB,CAAC,CAAA;AACvD,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAAwC,sCAAsB;IAA9D;QAAwC,8BAAsB;IAyB9D,CAAC;IApBG,yCAAY,GAAZ,UAAa,OAAe,EAAE,IAAqB;QAC/C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,KAAsB,CAAC,CAAC;IACnD,CAAC;IAeD,wCAAW,GAAX,UAAY,OAAe,EAAE,IAAqB;QAC9C,MAAM,CAAC,IAAI,qBAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACjD,CAAC;IAzBL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,gBAAgB,EAAC,CAAC;0BAAA;IA0BnC,yBAAC;AAAD,CAAC,AAzBD,CAAwC,mCAAsB,GAyB7D;AAzBY,0BAAkB,qBAyB9B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, IntrinsicType} from \"../../models/index\";\nimport {Component, ConverterTypeComponent, ITypeTypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:intrinsic'})\nexport class IntrinsicConverter extends ConverterTypeComponent implements ITypeTypeConverter<ts.IntrinsicType>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.IntrinsicType):boolean {\n        return !!(type.flags & ts.TypeFlags.Intrinsic);\n    }\n\n\n    /**\n     * Convert the given intrinsic type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * ```\n     * var someValue:string;\n     * ```\n     *\n     * @param type  The intrinsic type that should be converted.\n     * @returns The type reflection representing the given intrinsic type.\n     */\n    convertType(context:Context, type:ts.IntrinsicType):IntrinsicType {\n        return new IntrinsicType(type.intrinsicName);\n    }\n}\n"]}