{"version":3,"file":"binding-array.js","sourceRoot":"","sources":["../../../src/lib/converter/types/binding-array.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAA8B,oBAAoB,CAAC,CAAA;AACnD,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAA2C,yCAAsB;IAAjE;QAA2C,8BAAsB;IA0BjE,CAAC;IArBG,4CAAY,GAAZ,UAAa,OAAe,EAAE,IAAsB;QAChD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,GAAiC,CAAC;IAC3D,CAAC;IAUD,2CAAW,GAAX,UAAY,OAAe,EAAE,IAAsB;QAAnD,iBAQC;QAPG,IAAI,KAAK,GAAU,EAAE,CAAC;QAEtB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YAC1B,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IA1BL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,oBAAoB,EAAC,CAAC;6BAAA;IA2BvC,4BAAC;AAAD,CAAC,AA1BD,CAA2C,mCAAsB,GA0BhE;AA1BY,6BAAqB,wBA0BjC,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, TupleType} from \"../../models/index\";\nimport {Component, ConverterTypeComponent, ITypeNodeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:binding-array'})\nexport class BindingArrayConverter extends ConverterTypeComponent implements ITypeNodeConverter<ts.Type, ts.BindingPattern>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context:Context, node:ts.BindingPattern):boolean {\n        return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n    }\n\n\n    /**\n     * Convert the given binding pattern to its type reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The binding pattern that should be converted.\n     * @returns The type reflection representing the given binding pattern.\n     */\n    convertNode(context:Context, node:ts.BindingPattern):Type {\n        var types:Type[] = [];\n\n        node.elements.forEach((element) => {\n            types.push(this.owner.convertType(context, element));\n        });\n\n        return new TupleType(types);\n    }\n}\n"]}