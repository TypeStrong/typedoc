{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../src/lib/converter/types/tuple.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAA8B,0BAA0B,CAAC,CAAA;AACzD,2BAAgE,eAAe,CAAC,CAAA;AAKhF;IAAoC,kCAAsB;IAA1D;QAAoC,8BAAsB;IAkE1D,CAAC;IA7DG,qCAAY,GAAZ,UAAa,OAAe,EAAE,IAAqB;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,GAAuB,CAAC;IACjD,CAAC;IAMD,qCAAY,GAAZ,UAAa,OAAe,EAAE,IAAqB;QAC/C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,MAAkB,CAAC,CAAC;IAC/C,CAAC;IAgBD,oCAAW,GAAX,UAAY,OAAe,EAAE,IAAqB;QAAlD,iBASC;QARG,IAAI,QAAe,CAAC;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAChF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAgBD,oCAAW,GAAX,UAAY,OAAe,EAAE,IAAqB;QAAlD,iBASC;QARG,IAAI,QAAe,CAAC;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;QACvF,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,QAAQ,GAAG,EAAE,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAlEL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,YAAY,EAAC,CAAC;sBAAA;IAmE/B,qBAAC;AAAD,CAAC,AAlED,CAAoC,mCAAsB,GAkEzD;AAlEY,sBAAc,iBAkE1B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, TupleType} from \"../../models/types/index\";\nimport {Component, ConverterTypeComponent, ITypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:tuple'})\nexport class TupleConverter extends ConverterTypeComponent implements ITypeConverter<ts.TypeReference, ts.TupleTypeNode>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context:Context, node:ts.TupleTypeNode):boolean {\n        return node.kind === ts.SyntaxKind.TupleType;\n    }\n\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.TypeReference):boolean {\n        return !!(type.flags & ts.TypeFlags.Tuple);\n    }\n\n\n    /**\n     * Convert the given tuple type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertTupleType]] for the type equivalent.\n     *\n     * ```\n     * var someValue:[string,number];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The tuple type node that should be converted.\n     * @returns The type reflection representing the given tuple type node.\n     */\n    convertNode(context:Context, node:ts.TupleTypeNode):TupleType {\n        var elements:Type[];\n        if (node.elementTypes) {\n            elements = node.elementTypes.map((n) => this.owner.convertType(context, n));\n        } else {\n            elements = [];\n        }\n\n        return new TupleType(elements);\n    }\n\n\n    /**\n     * Convert the given tuple type to its type reflection.\n     *\n     * This is a type based converter, see [[convertTupleTypeNode]] for the node equivalent.\n     *\n     * ```\n     * var someValue:[string,number];\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The tuple type that should be converted.\n     * @returns The type reflection representing the given tuple type.\n     */\n    convertType(context:Context, type:ts.TypeReference):TupleType {\n        var elements:Type[];\n        if (type.typeArguments) {\n            elements = type.typeArguments.map((t) => this.owner.convertType(context, null, t));\n        } else {\n            elements = [];\n        }\n\n        return new TupleType(elements);\n    }\n}\n"]}