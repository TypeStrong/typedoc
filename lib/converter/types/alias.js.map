{"version":3,"file":"alias.js","sourceRoot":"","sources":["../../../src/lib/converter/types/alias.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAA4B,oBAAoB,CAAC,CAAA;AACjD,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAAoC,kCAAsB;IAA1D;QAAoC,8BAAsB;QAMtD,aAAQ,GAAU,GAAG,CAAC;IAwD1B,CAAC;IAxCG,qCAAY,GAAZ,UAAa,OAAe,EAAE,IAAyB,EAAE,IAAY;QACjE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE9B,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9B,IAAI,UAAU,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACrC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC;YAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAE1D,IAAI,QAAQ,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAEnC,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC1D,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;QACvC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;QAEnC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC;IAmBD,oCAAW,GAAX,UAAY,OAAe,EAAE,IAAyB;QAClD,IAAI,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,qBAAa,CAAC,IAAI,EAAE,qBAAa,CAAC,yBAAyB,CAAC,CAAC;IAC5E,CAAC;IA9DL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,YAAY,EAAC,CAAC;sBAAA;IA+D/B,qBAAC;AAAD,CAAC,AA9DD,CAAoC,mCAAsB,GA8DzD;AA9DY,sBAAc,iBA8D1B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {ReferenceType} from \"../../models/index\";\nimport {Component, ConverterTypeComponent, ITypeNodeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:alias'})\nexport class AliasConverter extends ConverterTypeComponent implements ITypeNodeConverter<ts.Type, ts.TypeReferenceNode>\n{\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority:number = 100;\n\n\n\n    /**\n     * Test whether the given node and type definitions represent a type alias.\n     *\n     * The compiler resolves type aliases pretty early and there is no field telling us\n     * whether the given node was a type alias or not. So we have to compare the type name of the\n     * node with the type name of the type symbol.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The node that should be tested.\n     * @param type  The type of the node that should be tested.\n     * @returns TRUE when the given node and type look like a type alias, otherwise FALSE.\n     */\n    supportsNode(context:Context, node:ts.TypeReferenceNode, type:ts.Type):boolean {\n        if (!type || !node || !node.typeName) return false;\n        if (!type.symbol) return true;\n\n        var checker = context.checker;\n        var symbolName = checker.getFullyQualifiedName(type.symbol).split('.');\n        if (!symbolName.length) return false;\n        if (symbolName[0].substr(0, 1) == '\"') symbolName.shift();\n\n        var nodeName = ts.getTextOfNode(node.typeName).split('.');\n        if (!nodeName.length) return false;\n\n        var common = Math.min(symbolName.length, nodeName.length);\n        symbolName = symbolName.slice(-common);\n        nodeName = nodeName.slice(-common);\n\n        return nodeName.join('.') != symbolName.join('.');\n    }\n\n\n    /**\n     * Create a reflection for the given type alias node.\n     *\n     * This is a node based converter with no type equivalent.\n     *\n     * Use [[isTypeAlias]] beforehand to test whether a given type/node combination is\n     * pointing to a type alias.\n     *\n     * ```\n     * type MyNumber = number;\n     * var someValue:MyNumber;\n     * ```\n     *\n     * @param node  The node whose type should be reflected.\n     * @returns  A type reference pointing to the type alias definition.\n     */\n    convertNode(context:Context, node:ts.TypeReferenceNode):ReferenceType {\n        var name = ts.getTextOfNode(node.typeName);\n        return new ReferenceType(name, ReferenceType.SYMBOL_ID_RESOLVE_BY_NAME);\n    }\n}\n"]}