{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../src/lib/converter/types/enum.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAGjC,sBAAkC,oBAAoB,CAAC,CAAA;AACvD,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAAmC,iCAAsB;IAAzD;QAAmC,8BAAsB;IA2BzD,CAAC;IAtBG,oCAAY,GAAZ,UAAa,OAAe,EAAE,IAAY;QACtC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAiB,CAAC,CAAC;IAC9C,CAAC;IAiBD,mCAAW,GAAX,UAAY,OAAe,EAAE,IAAY;QACrC,MAAM,CAAC,2BAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IA3BL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,WAAW,EAAC,CAAC;qBAAA;IA4B9B,oBAAC;AAAD,CAAC,AA3BD,CAAmC,mCAAsB,GA2BxD;AA3BY,qBAAa,gBA2BzB,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type} from \"../../models/index\";\nimport {createReferenceType} from \"../factories/index\";\nimport {Component, ConverterTypeComponent, ITypeTypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:enum'})\nexport class EnumConverter extends ConverterTypeComponent implements ITypeTypeConverter<ts.Type>\n{\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.Type):boolean {\n        return !!(type.flags & ts.TypeFlags.Enum);\n    }\n\n\n    /**\n     * Convert the given enumeration type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * ```\n     * enum MyEnum { One, Two, Three }\n     * var someValue:MyEnum;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The enumeration type that should be converted.\n     * @returns The type reflection representing the given enumeration type.\n     */\n    convertType(context:Context, type:ts.Type):Type {\n        return createReferenceType(context, type.symbol);\n    }\n}\n"]}