{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../src/lib/converter/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAsC,0BAA0B,CAAC,CAAA;AACjE,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAA4C,0CAAsB;IAAlE;QAA4C,8BAAsB;QAM9D,aAAQ,GAAU,CAAC,EAAE,CAAC;IAuC1B,CAAC;IAhCG,6CAAY,GAAZ,UAAa,OAAe,EAAE,IAAyB,EAAE,IAAY;QACjE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,KAA0B,CAAC,CAAC;IACvD,CAAC;IAkBD,4CAAW,GAAX,UAAY,OAAe,EAAE,IAAyB;QAClD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;YAChD,CAAC;YAED,IAAI,MAAM,GAAG,IAAI,yBAAiB,EAAE,CAAC;YACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;IACL,CAAC;IA7CL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,qBAAqB,EAAC,CAAC;8BAAA;IA8CxC,6BAAC;AAAD,CAAC,AA7CD,CAA4C,mCAAsB,GA6CjE;AA7CY,8BAAsB,yBA6ClC,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, TypeParameterType} from \"../../models/types/index\";\nimport {Component, ConverterTypeComponent, ITypeNodeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:type-parameter'})\nexport class TypeParameterConverter extends ConverterTypeComponent implements ITypeNodeConverter<ts.Type, ts.TypeReferenceNode>\n{\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority:number = -50;\n\n\n\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context:Context, node:ts.TypeReferenceNode, type:ts.Type):boolean {\n        return !!(type.flags & ts.TypeFlags.TypeParameter);\n    }\n\n\n    /**\n     * Interpret the given type reference node as a type parameter and convert it to its type reflection.\n     *\n     * This is a node based converter with no type equivalent.\n     *\n     * ```\n     * class SomeClass<T> {\n     *   public someValue:T;\n     * }\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The type reference node representing a type parameter.\n     * @returns The type reflection representing the given type parameter.\n     */\n    convertNode(context:Context, node:ts.TypeReferenceNode):Type {\n        if (node.typeName) {\n            var name = ts.getTextOfNode(node.typeName);\n            if (context.typeParameters && context.typeParameters[name]) {\n                return context.typeParameters[name].clone();\n            }\n\n            var result = new TypeParameterType();\n            result.name = name;\n            return result;\n        }\n    }\n}\n"]}