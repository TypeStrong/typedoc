{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../../../src/lib/converter/types/unknown.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,sBAAgC,0BAA0B,CAAC,CAAA;AAC3D,2BAAoE,eAAe,CAAC,CAAA;AAKpF;IAAsC,oCAAsB;IAA5D;QAAsC,8BAAsB;QAMxD,aAAQ,GAAU,CAAC,GAAG,CAAC;IA6B3B,CAAC;IAtBG,uCAAY,GAAZ,UAAa,OAAe,EAAE,IAAY;QACtC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAgBD,sCAAW,GAAX,UAAY,OAAe,EAAE,IAAY;QACrC,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,mBAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAnCL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,cAAc,EAAC,CAAC;wBAAA;IAoCjC,uBAAC;AAAD,CAAC,AAnCD,CAAsC,mCAAsB,GAmC3D;AAnCY,wBAAgB,mBAmC5B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Type, UnknownType} from \"../../models/types/index\";\nimport {Component, ConverterTypeComponent, ITypeTypeConverter} from \"../components\";\nimport {Context} from \"../context\";\n\n\n@Component({name:'type:unknown'})\nexport class UnknownConverter extends ConverterTypeComponent implements ITypeTypeConverter<ts.Type>\n{\n    /**\n     * The priority this converter should be executed with.\n     * A higher priority means the converter will be applied earlier.\n     */\n    priority:number = -100;\n\n\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context:Context, type:ts.Type):boolean {\n        return true;\n    }\n\n\n    /**\n     * Convert the given type to its type reflection.\n     *\n     * This is a type based converter with no node based equivalent.\n     *\n     * If no other converter is able to reflect a type, this converter will produce a\n     * reflection by utilising ts.typeToString() to generate a string representation of the\n     * given type.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The type that should be converted.\n     * @returns The type reflection representing the given type.\n     */\n    convertType(context:Context, type:ts.Type):Type {\n        var name = context.checker.typeToString(type);\n        return new UnknownType(name);\n    }\n}\n"]}