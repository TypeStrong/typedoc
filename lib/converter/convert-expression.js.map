{"version":3,"file":"convert-expression.js","sourceRoot":"","sources":["../../src/lib/converter/convert-expression.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAUjC,6BAAoC,IAAiE;IACjG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AANe,2BAAmB,sBAMlC,CAAA;AAGD,2BAAkC,UAAwB;IAEtD,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB,KAAK,CAA2B;YAC5B,MAAM,CAAC,GAAG,GAA0B,UAAW,CAAC,IAAI,GAAG,GAAG,CAAC;QAC/D,KAAK,CAA4B;YAC7B,MAAM,CAAwB,UAAW,CAAC,IAAI,CAAC;QACnD,KAAK,EAAyB;YAC1B,MAAM,CAAC,MAAM,CAAC;QAClB,KAAK,EAA0B;YAC3B,MAAM,CAAC,OAAO,CAAC;QACnB;YACI,IAAI,MAAM,GAAG,EAAE,CAAC,mBAAmB,CAAU,UAAU,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;IACrE,CAAC;AACL,CAAC;AAfe,yBAAiB,oBAehC,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\n\n/**\n * Return the default value of the given node.\n *\n * @param node  The TypeScript node whose default value should be extracted.\n * @returns The default value as a string.\n */\n\nexport function convertDefaultValue(node:ts.VariableDeclaration|ts.ParameterDeclaration|ts.EnumMember):string {\n    if (node.initializer) {\n        return convertExpression(node.initializer);\n    } else {\n        return null;\n    }\n}\n\n\nexport function convertExpression(expression:ts.Expression):string\n{\n    switch (expression.kind) {\n        case ts.SyntaxKind.StringLiteral:\n            return '\"' + (<ts.LiteralExpression>expression).text + '\"';\n        case ts.SyntaxKind.NumericLiteral:\n            return (<ts.LiteralExpression>expression).text;\n        case ts.SyntaxKind.TrueKeyword:\n            return 'true';\n        case ts.SyntaxKind.FalseKeyword:\n            return 'false';\n        default:\n            var source = ts.getSourceFileOfNode(<ts.Node>expression);\n            return source.text.substring(expression.pos, expression.end);\n    }\n}\n"]}