{"version":3,"file":"SourcePlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/SourcePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as ts from \"typescript\";\n\nimport {Reflection, ProjectReflection, DeclarationReflection} from \"../../models/reflections/index\";\nimport {SourceDirectory, SourceFile} from \"../../models/sources/index\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {BasePath} from \"../utils/base-path\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\n\n\n/**\n * A handler that attaches source file information to reflections.\n */\n@Component({name:'source'})\nexport class SourcePlugin extends ConverterComponent\n{\n    /**\n     * Helper for resolving the base path of all source files.\n     */\n    private basePath = new BasePath();\n\n    /**\n     * A map of all generated [[SourceFile]] instances.\n     */\n    private fileMappings:{[name:string]:SourceFile} = {};\n\n\n    /**\n     * Create a new SourceHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:              this.onBegin,\n            [Converter.EVENT_FILE_BEGIN]:         this.onBeginDocument,\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]:   this.onDeclaration,\n            [Converter.EVENT_RESOLVE_BEGIN]:      this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]:            this.onResolve,\n            [Converter.EVENT_RESOLVE_END]:        this.onEndResolve\n        });\n    }\n\n\n    private getSourceFile(fileName:string, project:ProjectReflection):SourceFile {\n        if (!this.fileMappings[fileName]) {\n            var file = new SourceFile(fileName);\n            this.fileMappings[fileName] = file;\n            project.files.push(file);\n        }\n\n        return this.fileMappings[fileName];\n    }\n\n\n    /**\n     * Triggered once per project before the dispatcher invokes the compiler.\n     *\n     * @param event  An event object containing the related project and compiler instance.\n     */\n    private onBegin() {\n        this.basePath.reset();\n        this.fileMappings = {};\n    }\n\n\n    /**\n     * Triggered when the converter begins converting a source file.\n     *\n     * Create a new [[SourceFile]] instance for all TypeScript files.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onBeginDocument(context:Context, reflection:Reflection, node?:ts.SourceFile) {\n        if (!node) return;\n        var fileName = node.fileName;\n        this.basePath.add(fileName);\n        this.getSourceFile(fileName, context.project);\n    }\n\n\n    /**\n     * Triggered when the converter has created a declaration reflection.\n     *\n     * Attach the current source file to the [[DeclarationReflection.sources]] array.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context:Context, reflection:Reflection, node?:ts.Node) {\n        if (!node) return;\n        var sourceFile      = ts.getSourceFileOfNode(node);\n        var fileName        = sourceFile.fileName;\n        var file:SourceFile = this.getSourceFile(fileName, context.project);\n\n        var position:ts.LineAndCharacter;\n        if (node['name'] && node['name'].end) {\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node['name'].end);\n        } else {\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node.pos);\n        }\n\n        if (!reflection.sources) reflection.sources = [];\n        if (reflection instanceof DeclarationReflection) {\n            file.reflections.push(reflection);\n        }\n\n        reflection.sources.push({\n            file: file,\n            fileName: fileName,\n            line: position.line + 1,\n            character: position.character\n        });\n    }\n\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context:Context) {\n        context.project.files.forEach((file) => {\n            var fileName = file.fileName = this.basePath.trim(file.fileName);\n            this.fileMappings[fileName] = file;\n        });\n    }\n\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context:Context, reflection:Reflection) {\n        if (!reflection.sources) return;\n        reflection.sources.forEach((source) => {\n            source.fileName = this.basePath.trim(source.fileName);\n        });\n    }\n\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context:Context) {\n        var project = context.project;\n        var home = project.directory;\n        project.files.forEach((file) => {\n            var reflections:Reflection[] = [];\n            file.reflections.forEach((reflection) => {\n                reflections.push(reflection);\n            });\n\n            var directory = home;\n            var path = Path.dirname(file.fileName);\n            if (path != '.') {\n                path.split('/').forEach((path) => {\n                    if (!directory.directories[path]) {\n                        directory.directories[path] = new SourceDirectory(path, directory);\n                    }\n                    directory = directory.directories[path];\n                });\n            }\n\n            directory.files.push(file);\n            // reflections.sort(GroupHandler.sortCallback);\n            file.parent = directory;\n            file.reflections = reflections;\n        });\n    }\n}\n"]}