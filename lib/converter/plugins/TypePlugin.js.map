{"version":3,"file":"TypePlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/TypePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {Reflection, ReflectionKind, IDecorator, DeclarationReflection, IDeclarationHierarchy} from \"../../models/reflections/index\";\nimport {Type, ReferenceType, TupleType, UnionType} from \"../../models/types/index\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\n\n\n/**\n * A handler that converts all instances of [[LateResolvingType]] to their renderable equivalents.\n */\n@Component({name:'type'})\nexport class TypePlugin extends ConverterComponent\n{\n    reflections:DeclarationReflection[] = [];\n\n\n    /**\n     * Create a new TypeHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_RESOLVE]:     this.onResolve,\n            [Converter.EVENT_RESOLVE_END]: this.onResolveEnd\n        });\n    }\n\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context:Context, reflection:DeclarationReflection) {\n        var project = context.project;\n\n        resolveType(reflection, <ReferenceType>reflection.type);\n        resolveType(reflection, <ReferenceType>reflection.inheritedFrom);\n        resolveType(reflection, <ReferenceType>reflection.overwrites);\n        resolveTypes(reflection, reflection.extendedTypes);\n        resolveTypes(reflection, reflection.extendedBy);\n        resolveTypes(reflection, reflection.implementedTypes);\n\n        if (reflection.decorators) reflection.decorators.forEach((decorator:IDecorator) => {\n            if (decorator.type) {\n                resolveType(reflection, decorator.type);\n            }\n        });\n\n        if (reflection.kindOf(ReflectionKind.ClassOrInterface)) {\n            this.postpone(reflection);\n\n            walk(reflection.implementedTypes, (target) => {\n                this.postpone(target);\n                if (!target.implementedBy) target.implementedBy = [];\n                target.implementedBy.push(new ReferenceType(reflection.name, ReferenceType.SYMBOL_ID_RESOLVED, reflection));\n            });\n\n            walk(reflection.extendedTypes, (target) => {\n                this.postpone(target);\n                if (!target.extendedBy) target.extendedBy = [];\n                target.extendedBy.push(new ReferenceType(reflection.name, ReferenceType.SYMBOL_ID_RESOLVED, reflection));\n            });\n        }\n\n        function walk(types:Type[], callback:{(declaration:DeclarationReflection):void}) {\n            if (!types) return;\n            types.forEach((type:ReferenceType) => {\n                if (!(type instanceof ReferenceType)) return;\n                if (!type.reflection || !(type.reflection instanceof DeclarationReflection)) return;\n                callback(<DeclarationReflection>type.reflection);\n            });\n        }\n\n        function resolveTypes(reflection:Reflection, types:Type[]) {\n            if (!types) return;\n            for (var i = 0, c = types.length; i < c; i++) {\n                resolveType(reflection, <ReferenceType>types[i]);\n            }\n        }\n\n        function resolveType(reflection:Reflection, type:Type) {\n            if (type instanceof ReferenceType) {\n                var referenceType:ReferenceType = <ReferenceType>type;\n                if (referenceType.symbolID == ReferenceType.SYMBOL_ID_RESOLVE_BY_NAME) {\n                    referenceType.reflection = reflection.findReflectionByName(referenceType.name);\n                } else if (!referenceType.reflection && referenceType.symbolID != ReferenceType.SYMBOL_ID_RESOLVED) {\n                    referenceType.reflection = project.reflections[project.symbolMapping[referenceType.symbolID]];\n                }\n\n                if (referenceType.typeArguments) {\n                    referenceType.typeArguments.forEach((typeArgument:Type) => {\n                        resolveType(reflection, typeArgument);\n                    });\n                }\n            } else if (type instanceof TupleType) {\n                var tupleType:TupleType = <TupleType>type;\n                for (var index = 0, count = tupleType.elements.length; index < count; index++) {\n                    resolveType(reflection, tupleType.elements[index]);\n                }\n            } else if (type instanceof UnionType) {\n                var unionType:UnionType = <UnionType>type;\n                for (var index = 0, count = unionType.types.length; index < count; index++) {\n                    resolveType(reflection, unionType.types[index]);\n                }\n            }\n        }\n    }\n\n\n    private postpone(reflection:DeclarationReflection) {\n        if (this.reflections.indexOf(reflection) == -1) {\n            this.reflections.push(reflection);\n        }\n    }\n\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onResolveEnd(context:Context) {\n        this.reflections.forEach((reflection) => {\n            if (reflection.implementedBy) {\n                reflection.implementedBy.sort((a:Type, b:Type):number => {\n                    if (a['name'] == b['name']) return 0;\n                    return a['name'] > b['name'] ? 1 : -1;\n                });\n            }\n\n            var root:IDeclarationHierarchy;\n            var hierarchy:IDeclarationHierarchy;\n            function push(types:Type[]) {\n                var level:IDeclarationHierarchy = {types:types};\n                if (hierarchy) {\n                    hierarchy.next = level;\n                    hierarchy = level;\n                } else {\n                    root = hierarchy = level;\n                }\n            }\n\n\n            if (reflection.extendedTypes) {\n                push(reflection.extendedTypes);\n            }\n\n            push([new ReferenceType(reflection.name, ReferenceType.SYMBOL_ID_RESOLVED, reflection)]);\n            hierarchy.isTarget = true;\n\n            if (reflection.extendedBy) {\n                push(reflection.extendedBy);\n            }\n\n            reflection.typeHierarchy = root;\n        });\n    }\n}\n"]}