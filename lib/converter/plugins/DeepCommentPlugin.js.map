{"version":3,"file":"DeepCommentPlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/DeepCommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {Reflection, SignatureReflection, ProjectReflection, TypeParameterReflection} from \"../../models/reflections/index\";\nimport {Comment, CommentTag} from \"../../models/comments/index\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\n\n\n/**\n * A handler that moves comments with dot syntax to their target.\n */\n@Component({name:'deep-comment'})\nexport class DeepCommentPlugin extends ConverterComponent\n{\n    /**\n     * Create a new CommentHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, Converter.EVENT_RESOLVE_BEGIN, this.onBeginResolve, 512);\n    }\n\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context:Context) {\n        var project = context.project;\n        var name:string;\n        for (var key in project.reflections) {\n            var reflection = project.reflections[key];\n            if (!reflection.comment) {\n                findDeepComment(reflection);\n            }\n        }\n\n\n        function push(parent:Reflection) {\n            var part = parent.originalName;\n            if (!part || part.substr(0, 2) == '__' || parent instanceof SignatureReflection) {\n                part = '';\n            }\n\n            if (part && part != '') {\n                name = (name == '' ? part : part + '.' + name);\n            }\n        }\n\n\n        function findDeepComment(reflection:Reflection) {\n            name = '';\n            push(reflection);\n            var target = reflection.parent;\n\n            while (target && !(target instanceof ProjectReflection)) {\n                push(target);\n                if (target.comment) {\n                    var tag:CommentTag;\n                    if (reflection instanceof TypeParameterReflection) {\n                        tag = target.comment.getTag('typeparam', reflection.name);\n                        if (!tag) tag = target.comment.getTag('param', '<' + reflection.name + '>');\n                    }\n\n                    if (!tag) tag = target.comment.getTag('param', name);\n\n                    if (tag) {\n                        target.comment.tags.splice(target.comment.tags.indexOf(tag), 1);\n                        reflection.comment = new Comment('', tag.text);\n                        break;\n                    }\n                }\n\n                target = target.parent;\n            }\n        }\n    }\n}\n"]}