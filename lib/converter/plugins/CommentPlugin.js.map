{"version":3,"file":"CommentPlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/CommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Comment, CommentTag} from \"../../models/comments/index\";\nimport {IntrinsicType} from \"../../models/types/index\";\nimport {Reflection, ReflectionFlag, ReflectionKind, TraverseProperty,\n    TypeParameterReflection, DeclarationReflection, ProjectReflection,\n    SignatureReflection, ParameterReflection} from \"../../models/reflections/index\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {parseComment, getRawComment} from \"../factories/comment\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\n\n\n/**\n * Structure used by [[ContainerCommentHandler]] to store discovered module comments.\n */\ninterface IModuleComment\n{\n    /**\n     * The module reflection this comment is targeting.\n     */\n    reflection:Reflection;\n\n    /**\n     * The full text of the best matched comment.\n     */\n    fullText:string;\n\n    /**\n     * Has the full text been marked as being preferred?\n     */\n    isPreferred:boolean;\n}\n\n\n/**\n * A handler that parses javadoc comments and attaches [[Models.Comment]] instances to\n * the generated reflections.\n */\n@Component({name:'comment'})\nexport class CommentPlugin extends ConverterComponent\n{\n    /**\n     * List of discovered module comments.\n     */\n    private comments:{[id:number]:IModuleComment};\n\n    /**\n     * List of hidden reflections.\n     */\n    private hidden:Reflection[];\n\n\n    /**\n     * Create a new CommentPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:                   this.onBegin,\n            [Converter.EVENT_CREATE_DECLARATION]:      this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]:        this.onDeclaration,\n            [Converter.EVENT_CREATE_TYPE_PARAMETER]:   this.onCreateTypeParameter,\n            [Converter.EVENT_FUNCTION_IMPLEMENTATION]: this.onFunctionImplementation,\n            [Converter.EVENT_RESOLVE_BEGIN]:           this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]:                 this.onResolve\n        });\n    }\n\n\n    private storeModuleComment(comment:string, reflection:Reflection) {\n        var isPreferred = (comment.toLowerCase().indexOf('@preferred') != -1);\n\n        if (this.comments[reflection.id]) {\n            var info = this.comments[reflection.id];\n            if (!isPreferred && (info.isPreferred || info.fullText.length > comment.length)) {\n                return;\n            }\n\n            info.fullText    = comment;\n            info.isPreferred = isPreferred;\n        } else {\n            this.comments[reflection.id] = {\n                reflection:  reflection,\n                fullText:    comment,\n                isPreferred: isPreferred\n            };\n        }\n    }\n\n\n    /**\n     * Apply all comment tag modifiers to the given reflection.\n     *\n     * @param reflection  The reflection the modifiers should be applied to.\n     * @param comment  The comment that should be searched for modifiers.\n     */\n    private applyModifiers(reflection:Reflection, comment:Comment) {\n        if (comment.hasTag('private')) {\n            reflection.setFlag(ReflectionFlag.Private);\n            CommentPlugin.removeTags(comment, 'private');\n        }\n\n        if (comment.hasTag('protected')) {\n            reflection.setFlag(ReflectionFlag.Protected);\n            CommentPlugin.removeTags(comment, 'protected');\n        }\n\n        if (comment.hasTag('public')) {\n            reflection.setFlag(ReflectionFlag.Public);\n            CommentPlugin.removeTags(comment, 'public');\n        }\n\n        if (comment.hasTag('event')) {\n            reflection.kind = ReflectionKind.Event;\n            // reflection.setFlag(ReflectionFlag.Event);\n            CommentPlugin.removeTags(comment, 'event');\n        }\n\n        if (comment.hasTag('hidden')) {\n            if (!this.hidden) this.hidden = [];\n            this.hidden.push(reflection);\n        }\n    }\n\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context:Context) {\n        this.comments = {};\n    }\n\n\n    /**\n     * Triggered when the converter has created a type parameter reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onCreateTypeParameter(context:Context, reflection:TypeParameterReflection, node?:ts.Node) {\n        var comment = reflection.parent.comment;\n        if (comment) {\n            var tag = comment.getTag('typeparam', reflection.name);\n            if (!tag) tag = comment.getTag('param', '<' + reflection.name + '>');\n            if (!tag) tag = comment.getTag('param', reflection.name);\n\n            if (tag) {\n                reflection.comment = new Comment(tag.text);\n                comment.tags.splice(comment.tags.indexOf(tag), 1);\n            }\n        }\n    }\n\n\n    /**\n     * Triggered when the converter has created a declaration or signature reflection.\n     *\n     * Invokes the comment parser.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context:Context, reflection:Reflection, node?:ts.Node) {\n        if (!node) return;\n        var rawComment = getRawComment(node);\n        if (!rawComment) return;\n\n        if (reflection.kindOf(ReflectionKind.FunctionOrMethod) || (reflection.kindOf(ReflectionKind.Event) && reflection['signatures'])) {\n            var comment = parseComment(rawComment, reflection.comment);\n            this.applyModifiers(reflection, comment);\n        } else if (reflection.kindOf(ReflectionKind.Module)) {\n            this.storeModuleComment(rawComment, reflection);\n        } else {\n            var comment = parseComment(rawComment, reflection.comment);\n            this.applyModifiers(reflection, comment);\n            reflection.comment = comment;\n        }\n    }\n\n\n    /**\n     * Triggered when the converter has found a function implementation.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onFunctionImplementation(context:Context, reflection:Reflection, node?:ts.Node) {\n        if (!node) return;\n\n        var comment = getRawComment(node);\n        if (comment) {\n            reflection.comment = parseComment(comment, reflection.comment);\n        }\n    }\n\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context:Context) {\n        for (var id in this.comments) {\n            if (!this.comments.hasOwnProperty(id)) continue;\n\n            var info    = this.comments[id];\n            var comment = parseComment(info.fullText);\n            CommentPlugin.removeTags(comment, 'preferred');\n\n            this.applyModifiers(info.reflection, comment);\n            info.reflection.comment = comment;\n        }\n\n        if (this.hidden) {\n            var project = context.project;\n            this.hidden.forEach((reflection) => {\n                CommentPlugin.removeReflection(project, reflection);\n            });\n        }\n    }\n\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * Cleans up comment tags related to signatures like @param or @return\n     * and moves their data to the corresponding parameter reflections.\n     *\n     * This hook also copies over the comment of function implementations to their\n     * signatures.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context:Context, reflection:DeclarationReflection) {\n        if (!(reflection instanceof DeclarationReflection)) return;\n\n        var signatures = reflection.getAllSignatures();\n        if (signatures.length) {\n            var comment = reflection.comment;\n            if (comment && comment.hasTag('returns')) {\n                comment.returns = comment.getTag('returns').text;\n                CommentPlugin.removeTags(comment, 'returns');\n            }\n\n            signatures.forEach((signature) => {\n                var childComment = signature.comment;\n                if (childComment && childComment.hasTag('returns')) {\n                    childComment.returns = childComment.getTag('returns').text;\n                    CommentPlugin.removeTags(childComment, 'returns');\n                }\n\n                if (comment) {\n                    if (!childComment) {\n                        childComment = signature.comment = new Comment();\n                    }\n\n                    childComment.shortText = childComment.shortText || comment.shortText;\n                    childComment.text      = childComment.text      || comment.text;\n                    childComment.returns   = childComment.returns   || comment.returns;\n                }\n\n                if (signature.parameters) {\n                    signature.parameters.forEach((parameter) => {\n                        var tag:CommentTag;\n                        if (childComment)    tag = childComment.getTag('param', parameter.name);\n                        if (comment && !tag) tag = comment.getTag('param', parameter.name);\n                        if (tag) {\n                            parameter.comment = new Comment(tag.text);\n                        }\n                    });\n                }\n\n                CommentPlugin.removeTags(childComment, 'param');\n            });\n\n            CommentPlugin.removeTags(comment, 'param');\n        }\n    }\n\n\n    /**\n     * Remove all tags with the given name from the given comment instance.\n     *\n     * @param comment  The comment that should be modified.\n     * @param tagName  The name of the that that should be removed.\n     */\n    static removeTags(comment:Comment, tagName:string) {\n        if (!comment || !comment.tags) return;\n\n        var i = 0, c = comment.tags.length;\n        while (i < c) {\n            if (comment.tags[i].tagName == tagName) {\n                comment.tags.splice(i, 1);\n                c--;\n            } else {\n                i++;\n            }\n        }\n    }\n\n\n    /**\n     * Remove the given reflection from the project.\n     */\n    static removeReflection(project:ProjectReflection, reflection:Reflection) {\n        reflection.traverse((child) => CommentPlugin.removeReflection(project, child));\n\n        var parent = <DeclarationReflection>reflection.parent;\n        parent.traverse((child:Reflection, property:TraverseProperty) => {\n            if (child == reflection) {\n                switch (property) {\n                    case TraverseProperty.Children:\n                        if (parent.children) {\n                            var index = parent.children.indexOf(<DeclarationReflection>reflection);\n                            if (index != -1) parent.children.splice(index, 1);\n                        }\n                        break;\n                    case TraverseProperty.GetSignature:\n                        delete parent.getSignature;\n                        break;\n                    case TraverseProperty.IndexSignature:\n                        delete parent.indexSignature;\n                        break;\n                    case TraverseProperty.Parameters:\n                        if ((<SignatureReflection>reflection.parent).parameters) {\n                            var index = (<SignatureReflection>reflection.parent).parameters.indexOf(<ParameterReflection>reflection);\n                            if (index != -1) (<SignatureReflection>reflection.parent).parameters.splice(index, 1);\n                        }\n                        break;\n                    case TraverseProperty.SetSignature:\n                        delete parent.setSignature;\n                        break;\n                    case TraverseProperty.Signatures:\n                        if (parent.signatures) {\n                            var index = parent.signatures.indexOf(<SignatureReflection>reflection);\n                            if (index != -1) parent.signatures.splice(index, 1);\n                        }\n                        break;\n                    case TraverseProperty.TypeLiteral:\n                        parent.type = new IntrinsicType('Object');\n                        break;\n                    case TraverseProperty.TypeParameter:\n                        if (parent.typeParameters) {\n                            var index = parent.typeParameters.indexOf(<TypeParameterReflection>reflection);\n                            if (index != -1) parent.typeParameters.splice(index, 1);\n                        }\n                        break;\n                }\n            }\n        });\n\n        var id = reflection.id;\n        delete project.reflections[id];\n\n        for (var key in project.symbolMapping) {\n            if (project.symbolMapping.hasOwnProperty(key) && project.symbolMapping[key] == id) {\n                delete project.symbolMapping[key];\n            }\n        }\n    }\n}\n"]}