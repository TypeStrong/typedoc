{"version":3,"file":"PackagePlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/PackagePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs\";\nimport * as ts from \"typescript\";\n\nimport {Reflection} from \"../../models/reflections/abstract\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\nimport {Option} from \"../../utils/component\";\n\n\n/**\n * A handler that tries to find the package.json and readme.md files of the\n * current project.\n *\n * The handler traverses the file tree upwards for each file processed by the processor\n * and records the nearest package info files it can find. Within the resolve files, the\n * contents of the found files will be read and appended to the ProjectReflection.\n */\n@Component({name:'package'})\nexport class PackagePlugin extends ConverterComponent\n{\n    @Option({\n        name: 'readme',\n        help: 'Path to the readme file that should be displayed on the index page. Pass `none` to disable the index page and start the documentation on the globals page.'\n    })\n    readme:string;\n\n    /**\n     * The file name of the found readme.md file.\n     */\n    private readmeFile:string;\n\n    /**\n     * The file name of the found package.json file.\n     */\n    private packageFile:string;\n\n    /**\n     * List of directories the handler already inspected.\n     */\n    private visited:string[];\n\n    /**\n     * Should the readme file be ignored?\n     */\n    private noReadmeFile:boolean;\n\n\n    /**\n     * Create a new PackageHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:         this.onBegin,\n            [Converter.EVENT_FILE_BEGIN]:    this.onBeginDocument,\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve\n        });\n    }\n\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context:Context) {\n        this.readmeFile  = null;\n        this.packageFile = null;\n        this.visited     = [];\n\n        var readme = this.readme;\n        this.noReadmeFile = (readme == 'none');\n        if (!this.noReadmeFile && readme) {\n            readme = Path.resolve(readme);\n            if (FS.existsSync(readme)) {\n                this.readmeFile = readme;\n            }\n        }\n    }\n\n\n    /**\n     * Triggered when the converter begins converting a source file.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onBeginDocument(context:Context, reflection:Reflection, node?:ts.SourceFile) {\n        if (!node) return;\n        if (this.readmeFile && this.packageFile) {\n            return;\n        }\n\n        var fileName = node.fileName;\n        var dirName:string, parentDir = Path.resolve(Path.dirname(fileName));\n        do {\n            dirName = parentDir;\n            if (this.visited.indexOf(dirName) != -1) {\n                break;\n            }\n\n            FS.readdirSync(dirName).forEach((file) => {\n                var lfile = file.toLowerCase();\n                if (!this.noReadmeFile && !this.readmeFile && lfile == 'readme.md') {\n                    this.readmeFile = Path.join(dirName, file);\n                }\n\n                if (!this.packageFile && lfile == 'package.json') {\n                    this.packageFile = Path.join(dirName, file);\n                }\n            });\n\n            this.visited.push(dirName);\n            parentDir = Path.resolve(Path.join(dirName, '..'));\n        } while (dirName != parentDir);\n    }\n\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context:Context) {\n        var project = context.project;\n        if (this.readmeFile) {\n            project.readme = FS.readFileSync(this.readmeFile, 'utf-8');\n        }\n\n        if (this.packageFile) {\n            project.packageInfo = JSON.parse(FS.readFileSync(this.packageFile, 'utf-8'));\n            if (!project.name) {\n                project.name = project.packageInfo.name;\n            }\n        }\n    }\n}\n"]}