{"version":3,"file":"DecoratorPlugin.js","sourceRoot":"","sources":["../../../src/lib/converter/plugins/DecoratorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport {ReferenceType} from \"../../models/types/index\";\nimport {Reflection, IDecorator} from \"../../models/reflections/index\";\nimport {Component, ConverterComponent} from \"../components\";\nimport {Converter} from \"../converter\";\nimport {Context} from \"../context\";\n\n\n/**\n * A plugin that detects decorators.\n */\n@Component({name:'decorator'})\nexport class DecoratorPlugin extends ConverterComponent\n{\n    private usages:{[symbolID:number]:ReferenceType[]};\n\n\n    /**\n     * Create a new ImplementsPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:              this.onBegin,\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_RESOLVE]:            this.onBeginResolve,\n        });\n    }\n\n\n    /**\n     * Create an object describing the arguments a decorator is set with.\n     *\n     * @param args  The arguments resolved from the decorator's call expression.\n     * @param signature  The signature definition of the decorator being used.\n     * @returns An object describing the decorator parameters,\n     */\n    private extractArguments(args:ts.NodeArray<ts.Expression>, signature:ts.Signature):any {\n        var result = {};\n        args.forEach((arg:ts.Expression, index:number) => {\n            if (index < signature.parameters.length) {\n                var parameter = signature.parameters[index];\n                result[parameter.name] = ts.getTextOfNode(arg);\n            } else {\n                if (!result['...']) result['...'] = [];\n                result['...'].push(ts.getTextOfNode(arg));\n            }\n        });\n\n        return result;\n    }\n\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context:Context) {\n        this.usages = {};\n    }\n\n\n    /**\n     * Triggered when the converter has created a declaration or signature reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context:Context, reflection:Reflection, node?:ts.Node) {\n        if (!node || !node.decorators) return;\n        node.decorators.forEach((decorator:ts.Decorator) => {\n            var callExpression:ts.CallExpression;\n            var identifier:ts.Expression;\n\n            switch (decorator.expression.kind) {\n                case ts.SyntaxKind.Identifier:\n                    identifier = decorator.expression;\n                    break;\n                case ts.SyntaxKind.CallExpression:\n                    callExpression = <ts.CallExpression>decorator.expression;\n                    identifier = callExpression.expression;\n                    break;\n                default:\n                    return;\n            }\n\n            var info:IDecorator = {\n                name: ts.getTextOfNode(identifier)\n            };\n\n            var type = context.checker.getTypeAtLocation(identifier);\n            if (type && type.symbol) {\n                var symbolID = context.getSymbolID(type.symbol);\n                info.type = new ReferenceType(info.name, symbolID);\n\n                if (callExpression && callExpression.arguments) {\n                    var signature = context.checker.getResolvedSignature(callExpression);\n                    if (signature) {\n                        info.arguments = this.extractArguments(callExpression.arguments, signature);\n                    }\n                }\n\n                if (!this.usages[symbolID]) this.usages[symbolID] = [];\n                this.usages[symbolID].push(new ReferenceType(reflection.name, ReferenceType.SYMBOL_ID_RESOLVED, reflection));\n            }\n\n            if (!reflection.decorators) reflection.decorators = [];\n            reflection.decorators.push(info);\n        });\n    }\n\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onBeginResolve(context:Context) {\n        for (var symbolID in this.usages) {\n            if (!this.usages.hasOwnProperty(symbolID)) continue;\n\n            var id = context.project.symbolMapping[symbolID];\n            if (!id) continue;\n\n            var reflection = context.project.reflections[id];\n            if (reflection) {\n                reflection.decorates = this.usages[symbolID];\n            }\n        }\n    }\n}\n"]}