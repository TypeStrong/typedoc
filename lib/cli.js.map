{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/lib/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as typescript from \"typescript\";\n\nimport {Application} from \"./application\";\nimport {Option} from \"./utils/component\";\nimport {OptionsReadMode, IOptionsReadResult} from \"./utils/options/options\";\nimport {ParameterHint, ParameterType} from \"./utils/options/declaration\";\nimport {getOptionsHelp} from \"./utils/options/help\";\n\n\nexport const enum ExitCode\n{\n    OptionError  = 1,\n    NoInputFiles = 2,\n    NoOutput     = 3,\n    CompileError = 4,\n    OutputError  = 5\n}\n\n\nexport class CliApplication extends Application\n{\n    @Option({\n        name:  'out',\n        help:  'Specifies the location the documentation should be written to.',\n        hint:  ParameterHint.Directory\n    })\n    out:string;\n\n    @Option({\n        name:  'json',\n        help:  'Specifies the location and file name a json file describing the project is written to.',\n        hint:  ParameterHint.File\n    })\n    json:string;\n\n    @Option({\n        name:  'version',\n        short: 'v',\n        help:  'Print the TypeDoc\\'s version.',\n        type:  ParameterType.Boolean\n    })\n    version:boolean;\n\n    @Option({\n        name:  'help',\n        short: 'h',\n        help:  'Print this message.',\n        type:  ParameterType.Boolean\n    })\n    help:boolean;\n\n\n\n    /**\n     * Run TypeDoc from the command line.\n     */\n    protected bootstrap(options?:Object):IOptionsReadResult {\n        var result = super.bootstrap(options);\n        if (result.hasErrors) {\n            process.exit(ExitCode.OptionError);\n            return;\n        }\n\n        if (this.version) {\n            typescript.sys.write(this.toString());\n        } else if (this.help) {\n            typescript.sys.write(getOptionsHelp(this.options));\n        } else if (result.inputFiles.length === 0) {\n            typescript.sys.write(getOptionsHelp(this.options));\n            process.exit(ExitCode.NoInputFiles);\n        } else if (!this.out && !this.json) {\n            this.logger.error(\"You must either specify the 'out' or 'json' option.\");\n            process.exit(ExitCode.NoOutput);\n        } else {\n            var src = this.expandInputFiles(result.inputFiles);\n            var project = this.convert(src);\n            if (project) {\n                if (this.out) this.generateDocs(project, this.out);\n                if (this.json) this.generateJson(project, this.json);\n                if (this.logger.hasErrors()) {\n                    process.exit(ExitCode.OutputError);\n                }\n            } else {\n                process.exit(ExitCode.CompileError);\n            }\n        }\n\n        return result;\n    }\n\n\n    get isCLI():boolean {\n        return true;\n    }\n}\n"]}