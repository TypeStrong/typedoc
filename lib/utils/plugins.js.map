{"version":3,"file":"plugins.js","sourceRoot":"","sources":["../../src/lib/utils/plugins.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from \"fs\";\nimport * as Path from \"path\";\nimport * as Util from \"util\";\n\nimport {Application} from \"../application\";\nimport {AbstractComponent, Component, Option} from \"./component\";\nimport {ParameterType} from \"./options/declaration\";\n\n\n@Component({name:'plugin-host', internal:true})\nexport class PluginHost extends AbstractComponent<Application>\n{\n    @Option({\n        name: 'plugin',\n        help: 'Specify the npm plugins that should be loaded. Omit to load all installed plugins, set to \\'none\\' to load no plugins.',\n        type: ParameterType.String,\n        isArray: true\n    })\n    plugins:string[];\n\n\n    /**\n     * Load the given list of npm plugins.\n     *\n     * @param plugins  A list of npm modules that should be loaded as plugins. When not specified\n     *   this function will invoke [[discoverNpmPlugins]] to find a list of all installed plugins.\n     * @returns TRUE on success, otherwise FALSE.\n     */\n    load():boolean {\n        var logger = this.application.logger;\n        var plugins = this.plugins || this.discoverNpmPlugins();\n\n        var i:number, c:number = plugins.length;\n        for (i = 0; i < c; i++) {\n            var plugin = plugins[i];\n            if (typeof plugin != 'string') {\n                logger.error('Unknown plugin %s', plugin);\n                return false;\n            } else if (plugin.toLowerCase() == 'none') {\n                return true;\n            }\n        }\n\n        for (i = 0; i < c; i++) {\n            var plugin = plugins[i];\n            try {\n                var instance = require(plugin);\n                if (typeof instance == 'function') {\n                    instance(this);\n                    logger.write('Loaded plugin %s', plugin);\n                } else {\n                    logger.error('The plugin %s did not return a function.', plugin);\n                }\n            } catch (error) {\n                logger.error('The plugin %s could not be loaded.', plugin);\n                logger.writeln(error.stack);\n            }\n        }\n    }\n\n\n    /**\n     * Discover all installed TypeDoc plugins.\n     *\n     * @returns A list of all npm module names that are qualified TypeDoc plugins.\n     */\n    private discoverNpmPlugins():string[] {\n        var result:string[] = [];\n        var logger = this.application.logger;\n        discover();\n        return result;\n\n        /**\n         * Find all parent folders containing a `node_modules` subdirectory.\n         */\n        function discover() {\n            var path = process.cwd(), previous:string;\n            do {\n                var modules = Path.join(path, 'node_modules');\n                if (FS.existsSync(modules) && FS.lstatSync(modules).isDirectory()) {\n                    discoverModules(modules);\n                }\n\n                previous = path;\n                path = Path.resolve(Path.join(previous, '..'));\n            } while (previous != path);\n        }\n\n        /**\n         * Scan the given `node_modules` directory for TypeDoc plugins.\n         */\n        function discoverModules(basePath:string) {\n            FS.readdirSync(basePath).forEach((name) => {\n                var dir = Path.join(basePath, name);\n                var infoFile = Path.join(dir, 'package.json');\n                if (!FS.existsSync(infoFile)) {\n                    return;\n                }\n\n                var info = loadPackageInfo(infoFile);\n                if (isPlugin(info)) {\n                    result.push(name);\n                }\n            });\n        }\n\n        /**\n         * Load and parse the given `package.json`.\n         */\n        function loadPackageInfo(fileName:string):any {\n            try {\n                return JSON.parse(FS.readFileSync(fileName, {encoding: 'utf-8'}));\n            } catch (error) {\n                logger.error('Could not parse %s', fileName);\n                return {};\n            }\n        }\n\n        /**\n         * Test whether the given package info describes a TypeDoc plugin.\n         */\n        function isPlugin(info:any):boolean {\n            var keywords:string[] = info.keywords;\n            if (!keywords || !Util.isArray(keywords)) {\n                return false;\n            }\n\n            for (var i = 0, c = keywords.length; i < c; i++) {\n                var keyword = keywords[i];\n                if (typeof keyword == 'string' && keyword.toLowerCase() == 'typedocplugin') {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n"]}