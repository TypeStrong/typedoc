{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../src/lib/utils/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\nimport * as FS from \"fs\";\n\n\n/**\n * List of known existent directories. Used to speed up [[directoryExists]].\n */\nvar existingDirectories:ts.MapLike<boolean> = {};\n\n\n/**\n * Normalize the given path.\n *\n * @param path  The path that should be normalized.\n * @returns The normalized path.\n */\nexport function normalizePath(path:string) {\n    return ts.normalizePath(path);\n}\n\n\n/**\n * Test whether the given directory exists.\n *\n * @param directoryPath  The directory that should be tested.\n * @returns TRUE if the given directory exists, FALSE otherwise.\n */\nexport function directoryExists(directoryPath: string): boolean {\n    if (ts.hasProperty(existingDirectories, directoryPath)) {\n        return true;\n    }\n\n    if (ts.sys.directoryExists(directoryPath)) {\n        existingDirectories[directoryPath] = true;\n        return true;\n    }\n\n    return false;\n}\n\n\n/**\n * Make sure that the given directory exists.\n *\n * @param directoryPath  The directory that should be validated.\n */\nexport function ensureDirectoriesExist(directoryPath: string) {\n    if (directoryPath.length > ts.getRootLength(directoryPath) && !directoryExists(directoryPath)) {\n        var parentDirectory = ts.getDirectoryPath(directoryPath);\n        ensureDirectoriesExist(parentDirectory);\n        ts.sys.createDirectory(directoryPath);\n    }\n}\n\n\n/**\n * Write a file to disc.\n *\n * If the containing directory does not exist it will be created.\n *\n * @param fileName  The name of the file that should be written.\n * @param data  The contents of the file.\n * @param writeByteOrderMark  Whether the UTF-8 BOM should be written or not.\n * @param onError  A callback that will be invoked if an error occurs.\n */\nexport function writeFile(fileName:string, data:string, writeByteOrderMark:boolean, onError?:(message:string) => void) {\n    try {\n        ensureDirectoriesExist(ts.getDirectoryPath(ts.normalizePath(fileName)));\n        ts.sys.writeFile(fileName, data, writeByteOrderMark);\n    } catch (e) {\n        if (onError) onError(e.message);\n    }\n}\n\n\n/**\n * Load the given file and return its contents.\n *\n * @param file  The path of the file to read.\n * @returns The files contents.\n */\nexport function readFile(file:string):string\n{\n    var buffer = FS.readFileSync(file);\n    switch (buffer[0]) {\n        case 0xFE:\n            if (buffer[1] === 0xFF) {\n                var i = 0;\n                while ((i + 1) < buffer.length) {\n                    var temp = buffer[i];\n                    buffer[i] = buffer[i + 1];\n                    buffer[i + 1] = temp;\n                    i += 2;\n                }\n                return buffer.toString(\"ucs2\", 2);\n            }\n            break;\n        case 0xFF:\n            if (buffer[1] === 0xFE) {\n                return buffer.toString(\"ucs2\", 2);\n            }\n            break;\n        case 0xEF:\n            if (buffer[1] === 0xBB) {\n                return buffer.toString(\"utf8\", 3);\n            }\n    }\n\n    return buffer.toString(\"utf8\", 0);\n}\n"]}