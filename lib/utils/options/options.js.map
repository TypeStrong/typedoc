{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../src/lib/utils/options/options.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\nimport * as Util from \"util\";\nimport * as ts from \"typescript\";\n\nimport {Event} from \"../events\";\nimport {Component, AbstractComponent, ChildableComponent} from \"../component\";\nimport {Application} from \"../../application\";\nimport {OptionDeclaration, IOptionDeclaration, ParameterScope} from \"./declaration\";\n\n\nexport class OptionsComponent extends AbstractComponent<Options> { }\n\n\nexport enum OptionsReadMode {\n    Prefetch,\n    Fetch\n}\n\n\nexport interface IOptionsReadResult {\n    hasErrors:boolean;\n    inputFiles:string[];\n}\n\n\nexport class DiscoverEvent extends Event\n{\n    data:any;\n\n    mode:OptionsReadMode;\n\n    inputFiles:string[] = [];\n\n    errors:string[] = [];\n\n    static DISCOVER:string = 'optionsDiscover';\n\n\n    /**\n     * Add an input/source file.\n     *\n     * The input files will be used as source files for the compiler. All command line\n     * arguments without parameter will be interpreted as being input files.\n     *\n     * @param fileName The path and filename of the input file.\n     */\n    addInputFile(fileName:string) {\n        this.inputFiles.push(fileName);\n    }\n\n\n    addError(message:string, ...args:string[]) {\n        this.errors.push(Util.format.apply(this, arguments));\n    }\n}\n\n\n@Component({name:\"options\", internal:true, childClass:OptionsComponent})\nexport class Options extends ChildableComponent<Application, OptionsComponent>\n{\n    private declarations:{[name:string]:OptionDeclaration};\n\n    private values:{[name:string]:any};\n\n    private compilerOptions:ts.CompilerOptions;\n\n\n    initialize() {\n        this.declarations = {};\n        this.values = {};\n        this.compilerOptions = {\n            target: ts.ScriptTarget.ES3,\n            module: ts.ModuleKind.None\n        };\n    }\n\n\n    read(data:any = {}, mode:OptionsReadMode = OptionsReadMode.Fetch):IOptionsReadResult {\n        var event  = new DiscoverEvent(DiscoverEvent.DISCOVER);\n        event.data = data;\n        event.mode = mode;\n\n        this.trigger(event);\n        this.setValues(event.data, '', event.addError.bind(event));\n\n        if (mode == OptionsReadMode.Fetch) {\n            var logger = this.application.logger;\n            for (var error of event.errors) {\n                logger.error(error);\n            }\n        }\n\n        return {\n            hasErrors: event.errors.length > 0,\n            inputFiles: event.inputFiles\n        };\n    }\n\n\n    getValue(name:string):any {\n        var declaration = this.getDeclaration(name);\n        if (!declaration) {\n            throw new Error(Util.format(\"Unknown option `%s`.\", name));\n        }\n\n        if (declaration.scope == ParameterScope.TypeScript) {\n            throw new Error(\"TypeScript options cannot be fetched using `getValue`, use `getCompilerOptions` instead.\");\n        }\n\n        if (name in this.values) {\n            return this.values[name];\n        } else {\n            return declaration.defaultValue;\n        }\n    }\n\n\n    getRawValues():any {\n        return _.clone(this.values);\n    }\n\n\n    getDeclaration(name:string):OptionDeclaration {\n        name = name.toLowerCase();\n\n        if (name in this.declarations) {\n            return this.declarations[name];\n        }\n    }\n\n\n    getDeclarationsByScope(scope:ParameterScope):OptionDeclaration[] {\n        var result:OptionDeclaration[] = [];\n        for (var name in this.declarations) {\n            var declaration = this.declarations[name];\n            if (declaration.scope == scope) {\n                result.push(declaration);\n            }\n        }\n\n        return _.uniq(result);\n    }\n\n\n    getCompilerOptions():ts.CompilerOptions {\n        return this.compilerOptions;\n    }\n\n\n    setValue(name:string|OptionDeclaration, value:any, errorCallback?:Function) {\n        var declaration = name instanceof OptionDeclaration ? name : this.getDeclaration(<string>name);\n        if (!declaration) {\n            if (errorCallback) {\n                errorCallback('Unknown option `%s`.', name.toString());\n            }\n            return;\n        }\n\n        var key = declaration.name;\n        if (declaration.scope == ParameterScope.TypeScript) {\n            this.compilerOptions[key] = declaration.convert(value, errorCallback);\n        } else {\n            this.values[key] = declaration.convert(value, errorCallback);\n        }\n    }\n\n\n    setValues(obj:Object, prefix:string = '', errorCallback?:Function) {\n        for (var key in obj) {\n            var value = obj[key];\n            if (typeof value === 'object') {\n                this.setValues(value, prefix + key + '.', errorCallback);\n            } else {\n                this.setValue(prefix + key, value, errorCallback);\n            }\n        }\n    }\n\n\n    addDeclaration(declaration:OptionDeclaration|IOptionDeclaration) {\n        var decl:OptionDeclaration;\n        if (!(declaration instanceof OptionDeclaration)) {\n            decl = new OptionDeclaration(<IOptionDeclaration>declaration)\n        } else {\n            decl = <OptionDeclaration>declaration;\n        }\n\n        for (var name of decl.getNames()) {\n            if (name in this.declarations) {\n                this.application.logger.error('The option \"%s\" has already been registered by the \"%s\" component.', name, this.declarations[name].component);\n            } else {\n                this.declarations[name] = decl;\n            }\n        }\n    }\n\n\n    addDeclarations(declarations:(OptionDeclaration|IOptionDeclaration)[]) {\n        for (var declaration of declarations) {\n            this.addDeclaration(declaration);\n        }\n    }\n\n\n    removeDeclaration(declaration:OptionDeclaration) {\n        var names = _.keys(this.declarations);\n        for (var name in names) {\n            if (this.declarations[name] === declaration) {\n                delete this.declarations[name];\n            }\n        }\n\n        name = declaration.name;\n        if (name in this.values) {\n            delete this.values[name];\n        }\n    }\n\n\n    removeDeclarationByName(name:string) {\n        var declaration = this.getDeclaration(name);\n        if (declaration) {\n            this.removeDeclaration(declaration);\n        }\n    }\n}\n"]}