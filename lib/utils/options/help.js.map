{"version":3,"file":"help.js","sourceRoot":"","sources":["../../../src/lib/utils/options/help.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Options} from \"./options\";\nimport {ParameterScope, ParameterHint} from \"./declaration\";\n\n\nexport interface IParameterHelp {\n    names:string[];\n    helps:string[];\n    margin:number;\n}\n\n\n/**\n * Prepare parameter information for the [[toString]] method.\n *\n * @param scope  The scope of the parameters whose help should be returned.\n * @returns The columns and lines for the help of the requested parameters.\n */\nfunction getParameterHelp(options:Options, scope:ParameterScope):IParameterHelp {\n    var parameters = options.getDeclarationsByScope(scope);\n    parameters.sort((a, b) => {\n        return <number>ts.compareValues<string>(a.name.toLowerCase(), b.name.toLowerCase())\n    });\n\n    var names:string[] = [];\n    var helps:string[] = [];\n    var margin = 0;\n\n    for (var i = 0; i < parameters.length; i++) {\n        var parameter = parameters[i];\n        if (!parameter.help) continue;\n\n        var name = \" \";\n        if (parameter.short) {\n            name += \"-\" + parameter.short;\n            if (typeof parameter.hint != 'undefined') {\n                name += ' ' + ParameterHint[parameter.hint].toUpperCase();\n            }\n            name += \", \";\n        }\n\n        name += \"--\" + parameter.name;\n        if (parameter.hint) name += ' ' + ParameterHint[parameter.hint].toUpperCase();\n\n        names.push(name);\n        helps.push(parameter.help);\n        margin = Math.max(name.length, margin);\n    }\n\n    return {names:names, helps:helps, margin:margin};\n}\n\n\n/**\n * Print some usage information.\n *\n * Taken from TypeScript (src/compiler/tsc.ts)\n */\nexport function getOptionsHelp(options:Options):string {\n    var typeDoc = getParameterHelp(options, ParameterScope.TypeDoc);\n    var typeScript = getParameterHelp(options, ParameterScope.TypeScript);\n    var margin = Math.max(typeDoc.margin, typeScript.margin);\n\n    var output:string[] = [];\n    output.push('Usage:');\n    output.push(' typedoc --mode modules --out path/to/documentation path/to/sourcefiles');\n\n    output.push('', 'TypeDoc options:');\n    pushHelp(typeDoc);\n\n    output.push('', 'TypeScript options:');\n    pushHelp(typeScript);\n\n    output.push('');\n    return output.join(ts.sys.newLine);\n\n    function pushHelp(columns:IParameterHelp) {\n        for (var i = 0; i < columns.names.length; i++) {\n            var usage = columns.names[i];\n            var description = columns.helps[i];\n            output.push(usage + padding(margin - usage.length + 2) + description);\n        }\n    }\n\n    function padding(length: number): string {\n        return Array(length + 1).join(\" \");\n    }\n}\n"]}