{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/readers/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs\";\nimport * as _ from \"lodash\";\n\nimport {Component, Option} from \"../../component\";\nimport {OptionsComponent, DiscoverEvent} from \"../options\";\nimport {ParameterType, ParameterHint} from \"../declaration\";\n\n\n@Component({name:\"options:typedoc\"})\nexport class TypedocReader extends OptionsComponent\n{\n    @Option({\n        name: TypedocReader.OPTIONS_KEY,\n        help: 'Specify a js option file that should be loaded. If not specified TypeDoc will look for \\'typedoc.js\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options:string;\n\n    /**\n     * The name of the parameter that specifies the options file.\n     */\n    private static OPTIONS_KEY:string = 'options';\n\n\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\n    }\n\n\n    onDiscover(event:DiscoverEvent) {\n        if (TypedocReader.OPTIONS_KEY in event.data) {\n            this.load(event, Path.resolve(event.data[TypedocReader.OPTIONS_KEY]));\n        } else if (this.application.isCLI) {\n            var file = Path.resolve('typedoc.js');\n            if (FS.existsSync(file)) {\n                this.load(event, file);\n            }\n        }\n    }\n\n\n    /**\n     * Load the specified option file.\n     *\n     * @param optionFile  The absolute path and file name of the option file.\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored? If so the parser\n     *   will simply skip all unknown arguments.\n     * @returns TRUE on success, otherwise FALSE.\n     */\n    load(event:DiscoverEvent, optionFile:string) {\n        if (!FS.existsSync(optionFile)) {\n            event.addError('The option file %s does not exist.', optionFile);\n            return;\n        }\n\n        var data = require(optionFile);\n        if (typeof data == 'function') {\n            data = data(this.application);\n        }\n\n        if (!(typeof data == 'object')) {\n            event.addError('The option file %s could not be read, it must either export a function or an object.', optionFile);\n        } else {\n            if (data.src) {\n                if (typeof data.src == 'string') {\n                    event.inputFiles = [data.src];\n                } else if (_.isArray(data.src)) {\n                    event.inputFiles = data.src;\n                } else {\n                    event.addError('The property \\'src\\' of the option file %s must be a string or an array.', optionFile);\n                }\n\n                delete data.src;\n            }\n\n            _.defaultsDeep(event.data, data);\n        }\n    }\n}\n"]}