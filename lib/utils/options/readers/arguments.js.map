{"version":3,"file":"arguments.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/readers/arguments.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Component} from \"../../component\";\nimport {DiscoverEvent, OptionsComponent} from \"../options\";\nimport {ParameterType} from \"../declaration\";\n\n\n@Component({name:\"options:arguments\"})\nexport class ArgumentsReader extends OptionsComponent\n{\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover);\n    }\n\n\n    onDiscover(event:DiscoverEvent) {\n        if (this.application.isCLI) {\n            this.parseArguments(event);\n        }\n    }\n\n\n    /**\n     * Read and store the given list of arguments.\n     *\n     * @param args  The list of arguments that should be parsed. When omitted the\n     *   current command line arguments will be used.\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored? If so the parser\n     *   will simply skip all unknown arguments.\n     * @returns TRUE on success, otherwise FALSE.\n     */\n    private parseArguments(event:DiscoverEvent, args?:string[]) {\n        var index = 0;\n        var owner = this.owner;\n        args = args || process.argv.slice(2);\n\n        function readArgument(arg:string) {\n            var declaration = owner.getDeclaration(arg);\n            if (!declaration) {\n                event.addError('Unknown option: %s', arg);\n            } else if (declaration.type !== ParameterType.Boolean) {\n                if (!args[index]) {\n                    event.addError('Option \"%s\" expects an argument', declaration.name);\n                } else {\n                    event.data[declaration.name] = args[index++];\n                }\n            } else {\n                event.data[declaration.name] = true;\n            }\n        }\n\n        while (index < args.length) {\n            var arg = args[index++];\n\n            if (arg.charCodeAt(0) === ts.CharacterCodes.at) {\n                this.parseResponseFile(event, arg.slice(1));\n            } else if (arg.charCodeAt(0) === ts.CharacterCodes.minus) {\n                readArgument(arg.slice(arg.charCodeAt(1) === ts.CharacterCodes.minus ? 2 : 1).toLowerCase());\n            } else {\n                event.addInputFile(arg);\n            }\n        }\n    }\n\n\n    /**\n     * Read the arguments stored in the given file.\n     *\n     * @param filename  The path and filename that should be parsed.\n     * @param ignoreUnknownArgs  Should unknown arguments be ignored?\n     * @returns TRUE on success, otherwise FALSE.\n     */\n    private parseResponseFile(event:DiscoverEvent, filename:string) {\n        var text = ts.sys.readFile(filename);\n        if (!text) {\n            event.addError('File not found: \"%s\"', filename);\n            return;\n        }\n\n        var args:string[] = [];\n        var pos = 0;\n        while (true) {\n            while (pos < text.length && text.charCodeAt(pos) <= ts.CharacterCodes.space) pos++;\n            if (pos >= text.length) break;\n\n            var start = pos;\n            if (text.charCodeAt(start) === ts.CharacterCodes.doubleQuote) {\n                pos++;\n                while (pos < text.length && text.charCodeAt(pos) !== ts.CharacterCodes.doubleQuote) pos++;\n                if (pos < text.length) {\n                    args.push(text.substring(start + 1, pos));\n                    pos++;\n                } else {\n                    event.addError('Unterminated quoted string in response file \"%s\"', filename);\n                    return;\n                }\n            } else {\n                while (text.charCodeAt(pos) > ts.CharacterCodes.space) pos++;\n                args.push(text.substring(start, pos));\n            }\n        }\n\n        this.parseArguments(event, args);\n    }\n}\n"]}