{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs\";\nimport * as _ from \"lodash\";\nimport * as ts from \"typescript\";\n\nimport {Component, Option} from \"../../component\";\nimport {OptionsComponent, DiscoverEvent} from \"../options\";\nimport {ParameterType, ParameterHint} from \"../declaration\";\nimport {TypeScriptSource} from \"../sources/typescript\";\n\n\n@Component({name:\"options:tsconfig\"})\nexport class TSConfigReader extends OptionsComponent\n{\n    @Option({\n        name: TSConfigReader.OPTIONS_KEY,\n        help: 'Specify a js option file that should be loaded. If not specified TypeDoc will look for \\'typedoc.js\\' in the current directory.',\n        type: ParameterType.String,\n        hint: ParameterHint.File\n    })\n    options:string;\n\n    /**\n     * The name of the parameter that specifies the tsconfig file.\n     */\n    private static OPTIONS_KEY:string = 'tsconfig';\n\n\n\n    initialize() {\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\n    }\n\n\n    onDiscover(event:DiscoverEvent) {\n        if (TSConfigReader.OPTIONS_KEY in event.data) {\n            this.load(event, Path.resolve(event.data[TSConfigReader.OPTIONS_KEY]));\n        } else if (this.application.isCLI) {\n            var file = Path.resolve('tsconfig.json');\n            if (FS.existsSync(file)) {\n                this.load(event, file);\n            }\n        }\n    }\n\n\n    /**\n     * Load the specified tsconfig file.\n     *\n     * @param event  The event that triggered the loading. Used to store error messages.\n     * @param fileName  The absolute path and file name of the tsconfig file.\n     */\n    load(event:DiscoverEvent, fileName:string) {\n        if (!FS.existsSync(fileName)) {\n            event.addError('The tsconfig file %s does not exist.', fileName);\n            return;\n        }\n\n        var data = ts.readConfigFile(fileName, (fileName) => ts.sys.readFile(fileName)).config;\n        if (data === undefined) {\n            event.addError('The tsconfig file %s does not contain valid JSON.', fileName);\n            return;\n        }\n        if (!_.isPlainObject(data)) {\n            event.addError('The tsconfig file %s does not contain a JSON object.', fileName);\n            return;\n        }\n\n        if (\"files\" in data && _.isArray(data.files)) {\n            event.inputFiles = data.files;\n        }\n\n        if (\"compilerOptions\" in data) {\n            var ignored = TypeScriptSource.IGNORED;\n            var compilerOptions = _.clone(data.compilerOptions);\n            for (var key of ignored) {\n                delete compilerOptions[key];\n            }\n\n            _.merge(event.data, compilerOptions);\n        }\n\n        if (\"typedocOptions\" in data) {\n            _.merge(event.data, data.typedocOptions);\n        }\n    }\n}\n"]}