{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../../src/lib/utils/options/declaration.ts"],"names":[],"mappings":";AAIA,WAAY,aAAa;IACrB,iDAAI,CAAA;IACJ,2DAAS,CAAA;AACb,CAAC,EAHW,qBAAa,KAAb,qBAAa,QAGxB;AAHD,IAAY,aAAa,GAAb,qBAGX,CAAA;AAED,WAAY,aAAa;IACrB,qDAAM,CAAA;IACN,qDAAM,CAAA;IACN,uDAAO,CAAA;IACP,+CAAG,CAAA;IACH,mDAAK,CAAA;AACT,CAAC,EANW,qBAAa,KAAb,qBAAa,QAMxB;AAND,IAAY,aAAa,GAAb,qBAMX,CAAA;AAGD,WAAY,cAAc;IACtB,yDAAO,CAAA;IAAE,+DAAU,CAAA;AACvB,CAAC,EAFW,sBAAc,KAAd,sBAAc,QAEzB;AAFD,IAAY,cAAc,GAAd,sBAEX,CAAA;AAoBD;IA0BI,2BAAY,IAAuB;QAC/B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,IAAI,GAAI,IAAI,CAAC,IAAI,IAAK,aAAa,CAAC,MAAM,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,cAAc,CAAC,OAAO,CAAC;IACtD,CAAC;IAGD,oCAAQ,GAAR;QACI,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAGD,mCAAO,GAAP,UAAQ,KAAS,EAAE,aAAuB;QACtC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,KAAK,aAAa,CAAC,MAAM;gBACrB,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACxB,KAAK,CAAC;YACV,KAAK,aAAa,CAAC,OAAO;gBACtB,KAAK,GAAG,CAAC,OAAO,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;gBACnD,KAAK,CAAC;YACV,KAAK,aAAa,CAAC,MAAM;gBACrB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;gBACpB,KAAK,CAAC;YACV,KAAK,aAAa,CAAC,GAAG;gBAClB,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;gBAClD,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAChB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACjC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,aAAa,CAAC,gCAAgC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC/D,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;QACd,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,wBAAC;AAAD,CAAC,AA1ED,IA0EC;AA1EY,yBAAiB,oBA0E7B,CAAA","sourcesContent":["import * as ts from \"typescript\";\nimport * as Util from \"util\";\n\n\nexport enum ParameterHint {\n    File,\n    Directory\n}\n\nexport enum ParameterType {\n    String,\n    Number,\n    Boolean,\n    Map,\n    Mixed\n}\n\n\nexport enum ParameterScope {\n    TypeDoc, TypeScript\n}\n\n\nexport interface IOptionDeclaration\n{\n    name:string;\n    component?:string;\n    short?:string;\n    help:string;\n    type?:ParameterType;\n    hint?:ParameterHint;\n    scope?:ParameterScope;\n    map?:{};\n    mapError?:string;\n    isArray?:boolean;\n    defaultValue?:any;\n    convert?:(param:OptionDeclaration, value?:any) => any;\n}\n\n\nexport class OptionDeclaration\n{\n    name:string;\n\n    short:string;\n\n    component:string;\n\n    help:string;\n\n    type:ParameterType;\n\n    hint:ParameterHint;\n\n    scope:ParameterScope;\n\n    map:Object;\n\n    mapError:string;\n\n    isArray:boolean;\n\n    defaultValue:any;\n\n\n\n    constructor(data:IOptionDeclaration) {\n        for (var key in data) {\n            this[key] = data[key];\n        }\n\n        this.type  = this.type  || ParameterType.String;\n        this.scope = this.scope || ParameterScope.TypeDoc;\n    }\n\n\n    getNames():string[] {\n        var result = [this.name.toLowerCase()];\n\n        if (this.short) {\n            result.push(this.short.toLowerCase());\n        }\n\n        return result;\n    }\n\n\n    convert(value:any, errorCallback?:Function):any {\n        switch (this.type) {\n            case ParameterType.Number:\n                value = parseInt(value);\n                break;\n            case ParameterType.Boolean:\n                value = (typeof value === void 0 ? true : !!value);\n                break;\n            case ParameterType.String:\n                value = value || \"\";\n                break;\n            case ParameterType.Map:\n                var key = value ? (value + \"\").toLowerCase() : '';\n                if (key in this.map) {\n                    value = this.map[key];\n                } else if (errorCallback) {\n                    if (this.mapError) {\n                        errorCallback(this.mapError);\n                    } else {\n                        errorCallback('Invalid value for option \"%s\".', this.name);\n                    }\n                }\n                break;\n        }\n\n        return value;\n    }\n}\n"]}