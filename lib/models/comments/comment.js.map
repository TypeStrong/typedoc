{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../src/lib/models/comments/comment.ts"],"names":[],"mappings":"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","sourcesContent":["import {CommentTag} from \"./tag\";\n\n\n/**\n * A model that represents a javadoc comment.\n *\n * Instances of this model are created by the [[CommentHandler]]. You can retrieve comments\n * through the [[BaseReflection.comment]] property.\n */\nexport class Comment\n{\n    /**\n     * The abstract of the comment. TypeDoc interprets the first paragraph of a comment\n     * as the abstract.\n     */\n    shortText:string;\n\n    /**\n     * The full body text of the comment. Excludes the [[shortText]].\n     */\n    text:string;\n\n    /**\n     * The text of the ```@returns``` tag if present.\n     */\n    returns:string;\n\n    /**\n     * All associated javadoc tags.\n     */\n    tags:CommentTag[];\n\n\n\n    /**\n     * Creates a new Comment instance.\n     */\n    constructor(shortText?:string, text?:string) {\n        this.shortText = shortText || '';\n        this.text = text || '';\n    }\n\n\n    /**\n     * Has this comment a visible component?\n     *\n     * @returns TRUE when this comment has a visible component.\n     */\n    hasVisibleComponent():boolean {\n        return <boolean>(!!this.shortText || !!this.text || !!this.tags);\n    }\n\n\n    /**\n     * Test whether this comment contains a tag with the given name.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @returns TRUE when this comment contains a tag with the given name, otherwise FALSE.\n     */\n    hasTag(tagName:string):boolean {\n        if (!this.tags) return false;\n        for (var i = 0, c = this.tags.length; i < c; i++) {\n            if (this.tags[i].tagName == tagName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Return the first tag with the given name.\n     *\n     * You can optionally pass a parameter name that should be searched to.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @param paramName  An optional parameter name to look for.\n     * @returns The found tag or NULL.\n     */\n    getTag(tagName:string, paramName?:string):CommentTag {\n        if (!this.tags) return null;\n        for (var i = 0, c = this.tags.length; i < c; i++) {\n            var tag = this.tags[i];\n            if (tag.tagName == tagName && (paramName == void 0 || tag.paramName == paramName)) {\n                return this.tags[i];\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * Copy the data of the given comment into this comment.\n     *\n     * @param comment\n     */\n    copyFrom(comment:Comment) {\n        this.shortText = comment.shortText;\n        this.text      = comment.text;\n        this.returns   = comment.returns;\n        this.tags      = comment.tags ? comment.tags.map((tag) => new CommentTag(tag.tagName, tag.paramName, tag.text)) : null;\n    }\n\n\n    /**\n     * Return a raw object representation of this comment.\n     */\n    toObject():any {\n        var result:any = {};\n        if (this.shortText) result.shortText = this.shortText;\n        if (this.text)      result.text      = this.text;\n        if (this.returns)   result.returns   = this.returns;\n\n        if (this.tags && this.tags.length) {\n            result.tags = [];\n            this.tags.forEach((tag) => result.tags.push(tag.toObject()));\n        }\n\n        return result;\n    }\n}\n"]}