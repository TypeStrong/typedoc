{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../src/lib/models/types/type-parameter.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAAuC,qCAAI;IAA3C;QAAuC,8BAAI;IAwE3C,CAAC;IAxDG,iCAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACpC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,kCAAM,GAAN,UAAO,IAAsB;QACzB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,gBAAwB,CAAC;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC9C,gBAAgB,GAAG,IAAI,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,gBAAgB;YACnB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;IACrC,CAAC;IAMD,oCAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,eAAe,CAAC;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QACnD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,oCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,wBAAC;AAAD,CAAC,AAxED,CAAuC,eAAI,GAwE1C;AAxEY,yBAAiB,oBAwE7B,CAAA","sourcesContent":["import {Type} from \"./abstract\";\n\n\n/**\n * Represents a type parameter type.\n *\n * ~~~\n * var value:T;\n * ~~~\n */\nexport class TypeParameterType extends Type\n{\n    /**\n     *\n     */\n    name:string;\n\n    constraint:Type;\n\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new TypeParameterType();\n        clone.isArray = this.isArray;\n        clone.name = this.name;\n        clone.constraint = this.constraint;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:TypeParameterType):boolean {\n        if (!(type instanceof TypeParameterType)) {\n            return false;\n        }\n\n        var constraintEquals:boolean;\n        if (this.constraint && type.constraint) {\n            constraintEquals = type.constraint.equals(this.constraint);\n        } else if (!this.constraint && !type.constraint) {\n            constraintEquals = true;\n        } else {\n            return false;\n        }\n\n        return constraintEquals &&\n            type.isArray == this.isArray;\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'typeParameter';\n        result.name = this.name;\n\n        if (this.constraint) {\n            result.constraint = this.constraint.toObject();\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return this.name;\n    }\n}\n"]}