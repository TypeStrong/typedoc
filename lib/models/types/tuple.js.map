{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../src/lib/models/types/tuple.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAA+B,6BAAI;IAa/B,mBAAY,QAAe;QACvB,iBAAO,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAQD,yBAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,0BAAM,GAAN,UAAO,IAAc;QACjB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC/C,MAAM,CAAC,eAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAMD,4BAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;QAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,4BAAQ,GAAR;QACI,IAAI,KAAK,GAAY,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YAC1B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QAClC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACxC,CAAC;IACL,gBAAC;AAAD,CAAC,AAtED,CAA+B,eAAI,GAsElC;AAtEY,iBAAS,YAsErB,CAAA","sourcesContent":["import {Type} from \"./abstract\";\n\n\n/**\n * Represents a tuple type.\n *\n * ~~~\n * var value:[string,boolean];\n * ~~~\n */\nexport class TupleType extends Type\n{\n    /**\n     * The ordered type elements of the tuple type.\n     */\n    elements:Type[];\n\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param elements  The ordered type elements of the tuple type.\n     */\n    constructor(elements:Type[]) {\n        super();\n        this.elements = elements;\n    }\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new TupleType(this.elements);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:TupleType):boolean {\n        if (!(type instanceof TupleType)) return false;\n        if (type.isArray != this.isArray) return false;\n        return Type.isTypeListEqual(type.elements, this.elements);\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'tuple';\n\n        if (this.elements && this.elements.length) {\n            result.elements = this.elements.map((e) => e.toObject());\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        var names:string[] = [];\n        this.elements.forEach((element) => {\n            names.push(element.toString())\n        });\n\n        return '[' + names.join(', ') + ']';\n    }\n}\n"]}