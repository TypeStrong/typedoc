{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../src/lib/models/types/abstract.ts"],"names":[],"mappings":";AAKA;IAAA;QAKI,YAAO,GAAW,KAAK,CAAC;IAmF5B,CAAC;IAjEG,qBAAM,GAAN,UAAO,IAAS;QACZ,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAMD,uBAAQ,GAAR;QACI,IAAI,MAAM,GAAO,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,uBAAQ,GAAR;QACI,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IASM,uBAAkB,GAAzB,UAA0B,CAAQ,EAAE,CAAQ;QACxC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACvC,SAAS,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;YAC7D,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YACf,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;gBAChC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAAC,QAAQ,CAAC,SAAS,CAAC;YAC7C,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IASM,oBAAe,GAAtB,UAAuB,CAAQ,EAAE,CAAQ;QACrC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACvC,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC;YAC3D,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,WAAC;AAAD,CAAC,AAxFD,IAwFC;AAxFqB,YAAI,OAwFzB,CAAA","sourcesContent":["/**\n * Base class of all type definitions.\n *\n * Instances of this class are also used to represent the type `void`.\n */\nexport abstract class Type\n{\n    /**\n     * Is this an array type?\n     */\n    isArray:boolean = false;\n\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    abstract clone():Type;\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:Type):boolean {\n        return false;\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = {};\n        result.type = 'void';\n\n        if (this.isArray) {\n            result.isArray = this.isArray;\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString():string {\n        return 'void';\n    }\n\n\n    /**\n     * Test whether the two given list of types contain equal types.\n     *\n     * @param a\n     * @param b\n     */\n    static isTypeListSimiliar(a:Type[], b:Type[]):boolean {\n        if (a.length != b.length) return false;\n        outerLoop: for (var an = 0, count = a.length; an < count; an++) {\n            var at = a[an];\n            for (var bn = 0; bn < count; bn++) {\n                if (b[bn].equals(at)) continue outerLoop;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n\n    /**\n     * Test whether the two given list of types are equal.\n     *\n     * @param a\n     * @param b\n     */\n    static isTypeListEqual(a:Type[], b:Type[]):boolean {\n        if (a.length != b.length) return false;\n        for (var index = 0, count = a.length; index < count; index++) {\n            if (!a[index].equals(b[index])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"]}