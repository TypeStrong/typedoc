{"version":3,"file":"reference.js","sourceRoot":"","sources":["../../../src/lib/models/types/reference.ts"],"names":[],"mappings":";;;;;;AACA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAAmC,iCAAI;IAgDnC,uBAAY,IAAW,EAAE,QAAe,EAAE,UAAsB;QAC5D,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAQD,6BAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzE,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,8BAAM,GAAN,UAAO,IAAkB;QACrB,MAAM,CAAC,IAAI,YAAY,aAAa;YAChC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO;YAC5B,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/E,CAAC;IAMD,gCAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC;QAC1B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,gCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAClD,CAAC;IACL,CAAC;IA9EM,gCAAkB,GAAU,CAAC,CAAC,CAAC;IAK/B,uCAAyB,GAAU,CAAC,CAAC,CAAC;IA0EjD,oBAAC;AAAD,CAAC,AAhHD,CAAmC,eAAI,GAgHtC;AAhHY,qBAAa,gBAgHzB,CAAA","sourcesContent":["import {Reflection} from \"../reflections/abstract\";\nimport {Type} from \"./abstract\";\n\n\n/**\n * Represents a type that refers to another reflection like a class, interface or enum.\n *\n * ~~~\n * var value:MyClass;\n * ~~~\n */\nexport class ReferenceType extends Type\n{\n    /**\n     * The name of the referenced type.\n     *\n     * If the symbol cannot be found cause it's not part of the documentation this\n     * can be used to represent the type.\n     */\n    name:string;\n\n    /**\n     * The type arguments of this reference.\n     */\n    typeArguments:Type[];\n\n    /**\n     * The symbol id of the referenced type as returned from the TypeScript compiler.\n     *\n     * After the all reflections have been generated this is can be used to lookup the\n     * relevant reflection with [[ProjectReflection.symbolMapping]].\n     */\n    symbolID:number;\n\n    /**\n     * The resolved reflection.\n     *\n     * The [[TypePlugin]] will try to set this property in the resolving phase.\n     */\n    reflection:Reflection;\n\n    /**\n     * Special symbol ID noting that the reference of a ReferenceType was known when creating the type.\n     */\n    static SYMBOL_ID_RESOLVED:number = -1;\n\n    /**\n     * Special symbol ID noting that the reference should be resolved by the type name.\n     */\n    static SYMBOL_ID_RESOLVE_BY_NAME:number = -2;\n\n\n    /**\n     * Create a new instance of ReferenceType.\n     *\n     * @param name        The name of the referenced type.\n     * @param symbolID    The symbol id of the referenced type as returned from the TypeScript compiler.\n     * @param reflection  The resolved reflection if already known.\n     */\n    constructor(name:string, symbolID:number, reflection?:Reflection) {\n        super();\n        this.name = name;\n        this.symbolID = symbolID;\n        this.reflection = reflection;\n    }\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new ReferenceType(this.name, this.symbolID, this.reflection);\n        clone.isArray = this.isArray;\n        clone.typeArguments = this.typeArguments;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:ReferenceType):boolean {\n        return type instanceof ReferenceType &&\n            type.isArray == this.isArray &&\n            (type.symbolID == this.symbolID || type.reflection == this.reflection);\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'reference';\n        result.name = this.name;\n\n        if (this.reflection) {\n            result.id = this.reflection.id;\n        }\n\n        if (this.typeArguments) {\n            result.typeArguments = this.typeArguments.map((t) => t.toObject());\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        if (this.reflection) {\n            return this.reflection.name + (this.isArray ? '[]' : '');\n        } else {\n            return this.name + (this.isArray ? '[]' : '');\n        }\n    }\n}\n"]}