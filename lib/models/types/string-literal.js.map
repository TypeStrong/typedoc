{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../src/lib/models/types/string-literal.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAAuC,qCAAI;IAavC,2BAAY,KAAY;QACpB,iBAAO,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAQD,iCAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,kCAAM,GAAN,UAAO,IAAsB;QACzB,MAAM,CAAC,IAAI,YAAY,iBAAiB;YACpC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO;YAC5B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;IACjC,CAAC;IAMD,oCAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,eAAe,CAAC;QAC9B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,oCAAQ,GAAR;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClC,CAAC;IACL,wBAAC;AAAD,CAAC,AA7DD,CAAuC,eAAI,GA6D1C;AA7DY,yBAAiB,oBA6D7B,CAAA","sourcesContent":["import {Type} from \"./abstract\";\n\n\n/**\n * Represents a string literal type.\n *\n * ~~~\n * var value:\"DIV\";\n * ~~~\n */\nexport class StringLiteralType extends Type\n{\n    /**\n     * The string literal value.\n     */\n    value:string;\n\n\n    /**\n     * Create a new instance of StringLiteralType.\n     *\n     * @param value The string literal value.\n     */\n    constructor(value:string) {\n        super();\n        this.value = value;\n    }\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new StringLiteralType(this.value);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:StringLiteralType):boolean {\n        return type instanceof StringLiteralType &&\n            type.isArray == this.isArray &&\n            type.value == this.value;\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'stringLiteral';\n        result.value = this.value;\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString():string {\n        return '\"' + this.value + '\"';\n    }\n}\n"]}