{"version":3,"file":"reflection.js","sourceRoot":"","sources":["../../../src/lib/models/types/reflection.ts"],"names":[],"mappings":";;;;;;AACA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAAoC,kCAAI;IAcpC,wBAAY,WAAiC;QACzC,iBAAO,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAQD,8BAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,+BAAM,GAAN,UAAO,IAAmB;QACtB,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;IACxB,CAAC;IAMD,iCAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,iCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;IACL,CAAC;IACL,qBAAC;AAAD,CAAC,AApED,CAAoC,eAAI,GAoEvC;AApEY,sBAAc,iBAoE1B,CAAA","sourcesContent":["import {DeclarationReflection} from \"../reflections/declaration\";\nimport {Type} from \"./abstract\";\n\n\n/**\n * Represents a type which has it's own reflection like literal types.\n *\n * ~~~\n * var value:{subValueA;subValueB;subValueC;};\n * ~~~\n */\nexport class ReflectionType extends Type\n{\n    /**\n     * The reflection of the type.\n     */\n    declaration:DeclarationReflection;\n\n\n\n    /**\n     * Create a new instance of ReflectionType.\n     *\n     * @param declaration  The reflection of the type.\n     */\n    constructor(declaration:DeclarationReflection) {\n        super();\n        this.declaration = declaration;\n    }\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new ReflectionType(this.declaration);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:ReflectionType):boolean {\n        return type == this;\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'reflection';\n\n        if (this.declaration) {\n            result.declaration = this.declaration.toObject();\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        if (!this.declaration.children && this.declaration.signatures) {\n            return 'function';\n        } else {\n            return 'object';\n        }\n    }\n}\n"]}