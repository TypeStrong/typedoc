{"version":3,"file":"union.js","sourceRoot":"","sources":["../../../src/lib/models/types/union.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAmB,YAAY,CAAC,CAAA;AAUhC;IAA+B,6BAAI;IAa/B,mBAAY,KAAY;QACpB,iBAAO,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAQD,yBAAK,GAAL;QACI,IAAI,KAAK,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IASD,0BAAM,GAAN,UAAO,IAAc;QACjB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAC/C,MAAM,CAAC,eAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAMD,4BAAQ,GAAR;QACI,IAAI,MAAM,GAAO,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAClC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;QAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,4BAAQ,GAAR;QACI,IAAI,KAAK,GAAY,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QAClC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACL,gBAAC;AAAD,CAAC,AAtED,CAA+B,eAAI,GAsElC;AAtEY,iBAAS,YAsErB,CAAA","sourcesContent":["import {Type} from \"./abstract\";\n\n\n/**\n * Represents an union type.\n *\n * ~~~\n * var value:string | string[];\n * ~~~\n */\nexport class UnionType extends Type\n{\n    /**\n     * The types this union consists of.\n     */\n    types:Type[];\n\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param types  The types this union consists of.\n     */\n    constructor(types:Type[]) {\n        super();\n        this.types = types;\n    }\n\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone():Type {\n        var clone = new UnionType(this.types);\n        clone.isArray = this.isArray;\n        return clone;\n    }\n\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type:UnionType):boolean {\n        if (!(type instanceof UnionType)) return false;\n        if (type.isArray != this.isArray) return false;\n        return Type.isTypeListSimiliar(type.types, this.types);\n    }\n\n\n    /**\n     * Return a raw object representation of this type.\n     */\n    toObject():any {\n        var result:any = super.toObject();\n        result.type = 'union';\n\n        if (this.types && this.types.length) {\n            result.types = this.types.map((e) => e.toObject());\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        var names:string[] = [];\n        this.types.forEach((element) => {\n            names.push(element.toString())\n        });\n\n        return names.join(' | ');\n    }\n}\n"]}