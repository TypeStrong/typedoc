{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../src/lib/models/sources/directory.ts"],"names":[],"mappings":";AAYA;IAyCI,yBAAY,IAAY,EAAE,MAAuB;QApCjD,WAAM,GAAmB,IAAI,CAAC;QAK9B,gBAAW,GAAmC,EAAE,CAAC;QAOjD,UAAK,GAAgB,EAAE,CAAC;QAKxB,SAAI,GAAU,IAAI,CAAC;QAKnB,YAAO,GAAU,IAAI,CAAC;QAelB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,GAAM,IAAI,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;YACnE,IAAI,CAAC,MAAM,GAAI,MAAM,CAAC;QAC1B,CAAC;IACL,CAAC;IASD,kCAAQ,GAAR,UAAS,MAAkB;QAAlB,sBAAkB,GAAlB,WAAkB;QACvB,IAAI,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAAC,QAAQ,CAAC;YACpD,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACpB,GAAG,IAAI,IAAI,GAAG,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IASD,2CAAiB,GAAjB;QACI,IAAI,WAAW,GAAgB,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;YACpB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAGH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IACL,sBAAC;AAAD,CAAC,AAvFD,IAuFC;AAvFY,uBAAe,kBAuF3B,CAAA","sourcesContent":["import {Reflection} from \"../reflections/abstract\";\nimport {ReflectionGroup} from \"../ReflectionGroup\";\nimport {SourceFile} from \"./file\";\n\n\n/**\n * Exposes information about a directory containing source files.\n *\n * One my access the root directory of a project through the [[ProjectReflection.directory]]\n * property. Traverse through directories by utilizing the [[SourceDirectory.parent]] or\n * [[SourceDirectory.directories]] properties.\n */\nexport class SourceDirectory\n{\n    /**\n     * The parent directory or NULL if this is a root directory.\n     */\n    parent:SourceDirectory = null;\n\n    /**\n     * A list of all subdirectories.\n     */\n    directories:{[name:string]:SourceDirectory} = {};\n\n    groups:ReflectionGroup[];\n\n    /**\n     * A list of all files in this directory.\n     */\n    files:SourceFile[] = [];\n\n    /**\n     * The name of this directory.\n     */\n    name:string = null;\n\n    /**\n     * The relative path from the root directory to this directory.\n     */\n    dirName:string = null;\n\n    /**\n     * The url of the page displaying the directory contents.\n     */\n    url:string;\n\n\n    /**\n     * Create a new SourceDirectory instance.\n     *\n     * @param name  The new of directory.\n     * @param parent  The parent directory instance.\n     */\n    constructor(name?:string, parent?:SourceDirectory) {\n        if (name && parent) {\n            this.name    = name;\n            this.dirName = (parent.dirName ? parent.dirName + '/' : '') + name;\n            this.parent  = parent;\n        }\n    }\n\n\n    /**\n     * Return a string describing this directory and its contents.\n     *\n     * @param indent  Used internally for indention.\n     * @returns A string representing this directory and all of its children.\n     */\n    toString(indent:string = '') {\n        var res = indent + this.name;\n\n        for (var key in this.directories) {\n            if (!this.directories.hasOwnProperty(key)) continue;\n            res += '\\n' + this.directories[key].toString(indent + '  ');\n        }\n\n        this.files.forEach((file) => {\n            res += '\\n' + indent + '  ' + file.fileName;\n        });\n\n        return res;\n    }\n\n\n    /**\n     * Return a list of all reflections exposed by the files within this directory.\n     *\n     * @returns An aggregated list of all [[DeclarationReflection]] defined in the\n     * files of this directory.\n     */\n    getAllReflections():Reflection[] {\n        var reflections:Reflection[] = [];\n        this.files.forEach((file) => {\n            reflections.push.apply(reflections, file.reflections);\n        });\n\n        // reflections.sort(Factories.GroupHandler.sortCallback);\n        return reflections;\n    }\n}\n"]}