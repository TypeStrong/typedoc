{"version":3,"file":"ReflectionGroup.js","sourceRoot":"","sources":["../../src/lib/models/ReflectionGroup.ts"],"names":[],"mappings":";AAWA;IA+DI,yBAAY,KAAY,EAAE,IAAmB;QA/DjD,iBAwGC;QAzFG,aAAQ,GAAgB,EAAE,CAAC;QAiDvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,0BAA0B,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,6BAA6B,EAAE,EAApC,CAAoC,CAAC,CAAC;IACnF,CAAC;IAMO,uDAA6B,GAArC;QACI,IAAI,gBAAgB,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;YACxB,gBAAgB,GAAG,gBAAgB,IAAI,KAAK,CAAC,cAAc,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,gBAAgB,CAAC;IAC5B,CAAC;IAMD,kCAAQ,GAAR;QACI,IAAI,MAAM,GAAG;YACT,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAG,IAAI,CAAC,IAAI;SACnB,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,QAAQ,GAAS,EAAE,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;gBACxB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YAC3B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,sBAAC;AAAD,CAAC,AAxGD,IAwGC;AAxGY,uBAAe,kBAwG3B,CAAA","sourcesContent":["import {Reflection, ReflectionKind} from \"./reflections/abstract\";\nimport {DeclarationReflection} from \"./reflections/declaration\";\n\n\n/**\n * A group of reflections. All reflections in a group are of the same kind.\n *\n * Reflection groups are created by the ´GroupHandler´ in the resolving phase\n * of the dispatcher. The main purpose of groups is to be able to more easily\n * render human readable children lists in templates.\n */\nexport class ReflectionGroup\n{\n    /**\n     * The title, a string representation of the typescript kind, of this group.\n     */\n    title:string;\n\n    /**\n     * The original typescript kind of the children of this group.\n     */\n    kind:ReflectionKind;\n\n    /**\n     * All reflections of this group.\n     */\n    children:Reflection[] = [];\n\n    /**\n     * A list of generated css classes that should be applied to representations of this\n     * group in the generated markup.\n     */\n    cssClasses:string;\n\n    /**\n     * Do all children of this group have a separate document?\n     *\n     * A bound representation of the ´ReflectionGroup.getAllChildrenHaveOwnDocument´\n     * that can be used within templates.\n     */\n    allChildrenHaveOwnDocument:Function;\n\n    /**\n     * Are all children inherited members?\n     */\n    allChildrenAreInherited:boolean;\n\n    /**\n     * Are all children private members?\n     */\n    allChildrenArePrivate:boolean;\n\n    /**\n     * Are all children private or protected members?\n     */\n    allChildrenAreProtectedOrPrivate:boolean;\n\n    /**\n     * Are all children external members?\n     */\n    allChildrenAreExternal:boolean;\n\n    /**\n     * Are any children exported declarations?\n     */\n    someChildrenAreExported:boolean;\n\n\n    /**\n     * Create a new ReflectionGroup instance.\n     *\n     * @param title The title of this group.\n     * @param kind  The original typescript kind of the children of this group.\n     */\n    constructor(title:string, kind:ReflectionKind) {\n        this.title = title;\n        this.kind = kind;\n\n        this.allChildrenHaveOwnDocument = (() => this.getAllChildrenHaveOwnDocument());\n    }\n\n\n    /**\n     * Do all children of this group have a separate document?\n     */\n    private getAllChildrenHaveOwnDocument():boolean {\n        var onlyOwnDocuments = true;\n        this.children.forEach((child) => {\n            onlyOwnDocuments = onlyOwnDocuments && child.hasOwnDocument;\n        });\n\n        return onlyOwnDocuments;\n    }\n\n\n    /**\n     * Return a raw object representation of this reflection group.\n     */\n    toObject():any {\n        var result = {\n            title: this.title,\n            kind:  this.kind\n        };\n\n        if (this.children) {\n            var children:any[] = [];\n            this.children.forEach((child) => {\n                children.push(child.id)\n            });\n\n            result['children'] = children;\n        }\n\n        return result;\n    }\n}\n"]}