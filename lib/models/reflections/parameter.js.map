{"version":3,"file":"parameter.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/parameter.ts"],"names":[],"mappings":";;;;;;AACA,sBAAmC,gBAAgB,CAAC,CAAA;AACpD,yBAAsG,YAAY,CAAC,CAAA;AAInH;IAAyC,uCAAU;IAAnD;QAAyC,8BAAU;IAkDnD,CAAC;IAjCG,sCAAQ,GAAR,UAAS,QAA0B;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,YAAY,sBAAc,CAAC,CAAC,CAAC;YACtC,QAAQ,CAAkB,IAAI,CAAC,IAAK,CAAC,WAAW,EAAE,2BAAgB,CAAC,WAAW,CAAC,CAAC;QACpF,CAAC;QAED,gBAAK,CAAC,QAAQ,YAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAMD,sCAAQ,GAAR;QACI,IAAI,MAAM,GAAG,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAMD,sCAAQ,GAAR;QACI,MAAM,CAAC,gBAAK,CAAC,QAAQ,WAAE,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAI,EAAE,CAAC,CAAC;IAC7E,CAAC;IACL,0BAAC;AAAD,CAAC,AAlDD,CAAyC,qBAAU,GAkDlD;AAlDY,2BAAmB,sBAkD/B,CAAA","sourcesContent":["import {SourceFile} from \"../sources/file\";\nimport {Type, ReflectionType} from \"../types/index\";\nimport {Reflection, IDefaultValueContainer, ITypeContainer, ITraverseCallback, TraverseProperty} from \"./abstract\";\nimport {SignatureReflection} from \"./signature\";\n\n\nexport class ParameterReflection extends Reflection implements IDefaultValueContainer, ITypeContainer\n{\n    parent:SignatureReflection;\n\n    defaultValue:string;\n\n    type:Type;\n\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback:ITraverseCallback) {\n        if (this.type instanceof ReflectionType) {\n            callback((<ReflectionType>this.type).declaration, TraverseProperty.TypeLiteral);\n        }\n\n        super.traverse(callback);\n    }\n\n\n    /**\n     * Return a raw object representation of this reflection.\n     */\n    toObject():any {\n        var result = super.toObject();\n\n        if (this.type) {\n            result.type = this.type.toObject();\n        }\n\n        if (this.defaultValue) {\n            result.defaultValue = this.defaultValue;\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString() {\n        return super.toString() + (this.type ? ':' + this.type.toString() :  '');\n    }\n}\n"]}