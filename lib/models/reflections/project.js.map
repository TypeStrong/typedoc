{"version":3,"file":"project.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/project.ts"],"names":[],"mappings":";;;;;;AAAA,sBAA0C,kBAAkB,CAAC,CAAA;AAC7D,yBAAyC,YAAY,CAAC,CAAA;AAEtD,0BAAkC,aAAa,CAAC,CAAA;AAShD;IAAuC,qCAAmB;IA0CtD,2BAAY,IAAW;QACnB,kBAAM,IAAI,EAAE,IAAI,EAAE,yBAAc,CAAC,MAAM,CAAC,CAAC;QAtC7C,gBAAW,GAA4B,EAAE,CAAC;QAE1C,kBAAa,GAA8B,EAAE,CAAC;QAK9C,cAAS,GAAmB,IAAI,uBAAe,EAAE,CAAC;QAKlD,UAAK,GAAgB,EAAE,CAAC;IA2BxB,CAAC;IAMD,qCAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IASD,gDAAoB,GAApB,UAAqB,IAAmB;QACpC,IAAI,MAAM,GAAgB,EAAE,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9B,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAkBD,gDAAoB,GAApB,UAAqB,GAAO;QACxB,IAAI,KAAK,GAAY,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAEvB,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACvC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC;gBAAC,QAAQ,CAAC;YAEtC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,UAAU,CAAC;YACxB,OAAO,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;gBAC1B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;oBAAC,QAAQ,CAAC,MAAM,CAAC;gBACjD,KAAK,IAAI,CAAC,CAAC;YACf,CAAC;YAED,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,wBAAC;AAAD,CAAC,AA9GD,CAAuC,+BAAmB,GA8GzD;AA9GY,yBAAiB,oBA8G7B,CAAA","sourcesContent":["import {SourceFile, SourceDirectory} from \"../sources/index\";\nimport {Reflection, ReflectionKind} from \"./abstract\";\nimport {DeclarationReflection} from \"./declaration\";\nimport {ContainerReflection} from \"./container\";\n\n\n/**\n * A reflection that represents the root of the project.\n *\n * The project reflection acts as a global index, one may receive all reflections\n * and source files of the processed project through this reflection.\n */\nexport class ProjectReflection extends ContainerReflection\n{\n    /**\n     * A list of all reflections within the project.\n     */\n    reflections:{[id:number]:Reflection} = {};\n\n    symbolMapping:{[symbolId:number]:number} = {};\n\n    /**\n     * The root directory of the project.\n     */\n    directory:SourceDirectory = new SourceDirectory();\n\n    /**\n     * A list of all source files within the project.\n     */\n    files:SourceFile[] = [];\n\n    /**\n     * The name of the project.\n     *\n     * The name can be passed as a commandline argument or it is read from the package info.\n     */\n    name:string;\n\n    /**\n     * The contents of the readme.md file of the project when found.\n     */\n    readme:string;\n\n    /**\n     * The parsed data of the package.json file of the project when found.\n     */\n    packageInfo:any;\n\n\n    /**\n     * Create a new ProjectReflection instance.\n     *\n     * @param name  The name of the project.\n     */\n    constructor(name:string) {\n        super(null, name, ReflectionKind.Global);\n    }\n\n\n    /**\n     * Return whether this reflection is the root / project reflection.\n     */\n    isProject():boolean {\n        return true;\n    }\n\n\n    /**\n     * Return a list of all reflections in this project of a certain kind.\n     *\n     * @param kind  The desired kind of reflection.\n     * @returns     An array containing all reflections with the desired kind.\n     */\n    getReflectionsByKind(kind:ReflectionKind):Reflection[] {\n        var values:Reflection[] = [];\n        for (var id in this.reflections) {\n            var reflection = this.reflections[id];\n            if (reflection.kindOf(kind)) {\n                values.push(reflection);\n            }\n        }\n\n        return values;\n    }\n\n\n    /**\n     * @param name  The name to look for. Might contain a hierarchy.\n     */\n    findReflectionByName(name:string):Reflection;\n\n    /**\n     * @param names  The name hierarchy to look for.\n     */\n    findReflectionByName(names:string[]):Reflection;\n\n    /**\n     * Try to find a reflection by its name.\n     *\n     * @return The found reflection or null.\n     */\n    findReflectionByName(arg:any):Reflection {\n        var names:string[] = Array.isArray(arg) ? arg : arg.split('.');\n        var name = names.pop();\n\n        search: for (var key in this.reflections) {\n            var reflection = this.reflections[key];\n            if (reflection.name != name) continue;\n\n            var depth = names.length - 1;\n            var target = reflection;\n            while (target && depth >= 0) {\n                target = target.parent;\n                if (target.name != names[depth]) continue search;\n                depth -= 1;\n            }\n\n            return reflection;\n        }\n\n        return null;\n    }\n}\n"]}