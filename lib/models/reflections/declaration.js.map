{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/declaration.ts"],"names":[],"mappings":"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","sourcesContent":["import {SourceFile} from \"../sources/file\";\nimport {IDefaultValueContainer, ITypeContainer, ITypeParameterContainer, ITraverseCallback, TraverseProperty} from \"./abstract\";\nimport {Type, ReflectionType} from \"../types/index\";\nimport {ContainerReflection} from \"./container\";\nimport {SignatureReflection} from \"./signature\";\nimport {TypeParameterReflection} from \"./type-parameter\";\n\n\n/**\n * Stores hierarchical type data.\n *\n * @see [[DeclarationReflection.typeHierarchy]]\n */\nexport interface IDeclarationHierarchy\n{\n    /**\n     * The types represented by this node in the hierarchy.\n     */\n    types:Type[];\n\n    /**\n     * The next hierarchy level.\n     */\n    next?:IDeclarationHierarchy;\n\n    /**\n     * Is this the entry containing the target type?\n     */\n    isTarget?:boolean;\n}\n\n\n/**\n * A reflection that represents a single declaration emitted by the TypeScript compiler.\n *\n * All parts of a project are represented by DeclarationReflection instances. The actual\n * kind of a reflection is stored in its ´kind´ member.\n */\nexport class DeclarationReflection extends ContainerReflection implements IDefaultValueContainer, ITypeContainer, ITypeParameterContainer\n{\n    /**\n     * The type of the reflection.\n     *\n     * If the reflection represents a variable or a property, this is the value type.<br />\n     * If the reflection represents a signature, this is the return type.\n     */\n    type:Type;\n\n    typeParameters:TypeParameterReflection[];\n\n    /**\n     * A list of call signatures attached to this declaration.\n     *\n     * TypeDoc creates one declaration per function that may contain ore or more\n     * signature reflections.\n     */\n    signatures:SignatureReflection[];\n\n    /**\n     * The index signature of this declaration.\n     */\n    indexSignature:SignatureReflection;\n\n    /**\n     * The get signature of this declaration.\n     */\n    getSignature:SignatureReflection;\n\n    /**\n     * The set signature of this declaration.\n     */\n    setSignature:SignatureReflection;\n\n    /**\n     * The default value of this reflection.\n     *\n     * Applies to function parameters.\n     */\n    defaultValue:string;\n\n    /**\n     * A type that points to the reflection that has been overwritten by this reflection.\n     *\n     * Applies to interface and class members.\n     */\n    overwrites:Type;\n\n    /**\n     * A type that points to the reflection this reflection has been inherited from.\n     *\n     * Applies to interface and class members.\n     */\n    inheritedFrom:Type;\n\n    /**\n     * A type that points to the reflection this reflection is the implementation of.\n     *\n     * Applies to class members.\n     */\n    implementationOf:Type;\n\n    /**\n     * A list of all types this reflection extends (e.g. the parent classes).\n     */\n    extendedTypes:Type[];\n\n    /**\n     * A list of all types that extend this reflection (e.g. the subclasses).\n     */\n    extendedBy:Type[];\n\n    /**\n     * A list of all types this reflection implements.\n     */\n    implementedTypes:Type[];\n\n    /**\n     * A list of all types that implement this reflection.\n     */\n    implementedBy:Type[];\n\n    /**\n     * Contains a simplified representation of the type hierarchy suitable for being\n     * rendered in templates.\n     */\n    typeHierarchy:IDeclarationHierarchy;\n\n\n    hasGetterOrSetter():boolean {\n        return !!this.getSignature || !!this.setSignature;\n    }\n\n\n    getAllSignatures():SignatureReflection[] {\n        var result:SignatureReflection[] = [];\n\n        if (this.signatures) result = result.concat(this.signatures);\n        if (this.indexSignature) result.push(this.indexSignature);\n        if (this.getSignature) result.push(this.getSignature);\n        if (this.setSignature) result.push(this.setSignature);\n\n        return result;\n    }\n\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback:ITraverseCallback) {\n        if (this.typeParameters) {\n            this.typeParameters.forEach((parameter) => callback(parameter, TraverseProperty.TypeParameter));\n        }\n\n        if (this.type instanceof ReflectionType) {\n            callback((<ReflectionType>this.type).declaration, TraverseProperty.TypeLiteral);\n        }\n\n        if (this.signatures) {\n            this.signatures.forEach((signature) => callback(signature, TraverseProperty.Signatures));\n        }\n\n        if (this.indexSignature) {\n            callback(this.indexSignature, TraverseProperty.IndexSignature);\n        }\n\n        if (this.getSignature) {\n            callback(this.getSignature, TraverseProperty.GetSignature);\n        }\n\n        if (this.setSignature) {\n            callback(this.setSignature, TraverseProperty.SetSignature);\n        }\n\n        super.traverse(callback);\n    }\n\n\n    /**\n     * Return a raw object representation of this reflection.\n     */\n    toObject():any {\n        var result = super.toObject();\n\n        if (this.type) {\n            result.type = this.type.toObject();\n        }\n\n        if (this.defaultValue) {\n            result.defaultValue = this.defaultValue;\n        }\n\n        if (this.overwrites) {\n            result.overwrites = this.overwrites.toObject();\n        }\n\n        if (this.inheritedFrom) {\n            result.inheritedFrom = this.inheritedFrom.toObject();\n        }\n\n        if (this.extendedTypes) {\n            result.extendedTypes = this.extendedTypes.map((t) => t.toObject());\n        }\n\n        if (this.extendedBy) {\n            result.extendedBy = this.extendedBy.map((t) => t.toObject());\n        }\n\n        if (this.implementedTypes) {\n            result.implementedTypes = this.implementedTypes.map((t) => t.toObject());\n        }\n\n        if (this.implementedBy) {\n            result.implementedBy = this.implementedBy.map((t) => t.toObject());\n        }\n\n        if (this.implementationOf) {\n            result.implementationOf = this.implementationOf.toObject();\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString():string {\n        var result = super.toString();\n\n        if (this.typeParameters) {\n            var parameters:string[] = [];\n            this.typeParameters.forEach((parameter) => {\n                parameters.push(parameter.name)\n            });\n            result += '<' + parameters.join(', ') + '>';\n        }\n\n        if (this.type) {\n            result += ':' + this.type.toString();\n        }\n\n        return result;\n    }\n}\n"]}