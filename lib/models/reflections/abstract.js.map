{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/abstract.ts"],"names":[],"mappings":"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","sourcesContent":["import {SourceFile, ISourceReference} from \"../sources/file\";\nimport {Type} from \"../types/index\";\nimport {Comment} from \"../comments/comment\";\nimport {TypeParameterReflection} from \"./type-parameter\";\nimport {ProjectReflection} from \"./project\";\n\n\n/**\n * Holds all data models used by TypeDoc.\n *\n * The [[BaseReflection]] is base class of all reflection models. The subclass [[ProjectReflection]]\n * serves as the root container for the current project while [[DeclarationReflection]] instances\n * form the structure of the project. Most of the other classes in this namespace are referenced by this\n * two base classes.\n *\n * The models [[NavigationItem]] and [[UrlMapping]] are special as they are only used by the [[Renderer]]\n * while creating the final output.\n */\n\n/**\n * Current reflection id.\n */\nvar REFLECTION_ID:number = 0;\n\n/**\n * Reset the reflection id.\n *\n * Used by the test cases to ensure the reflection ids won't change between runs.\n */\nexport function resetReflectionID() {\n    REFLECTION_ID = 0;\n}\n\n/**\n * Defines the available reflection kinds.\n */\nexport enum ReflectionKind\n{\n    Global = 0,\n    ExternalModule = 1,\n    Module = 2,\n    Enum = 4,\n    EnumMember = 16,\n    Variable = 32,\n    Function = 64,\n    Class = 128,\n    Interface = 256,\n    Constructor = 512,\n    Property = 1024,\n    Method = 2048,\n    CallSignature = 4096,\n    IndexSignature = 8192,\n    ConstructorSignature = 16384,\n    Parameter = 32768,\n    TypeLiteral = 65536,\n    TypeParameter = 131072,\n    Accessor = 262144,\n    GetSignature = 524288,\n    SetSignature = 1048576,\n    ObjectLiteral = 2097152,\n    TypeAlias = 4194304,\n    Event = 8388608,\n\n    ClassOrInterface = Class | Interface,\n    VariableOrProperty = Variable | Property,\n    FunctionOrMethod = Function | Method,\n    SomeSignature = CallSignature | IndexSignature | ConstructorSignature | GetSignature | SetSignature,\n    SomeModule = Module | ExternalModule\n}\n\n\nexport enum ReflectionFlag\n{\n    Private = 1,\n    Protected = 2,\n    Public = 4,\n    Static = 8,\n    Exported = 16,\n    ExportAssignment = 32,\n    External = 64,\n    Optional = 128,\n    DefaultValue = 256,\n    Rest = 512,\n    ConstructorProperty = 1024\n}\n\n\nvar relevantFlags:ReflectionFlag[] = [\n    ReflectionFlag.Private,\n    ReflectionFlag.Protected,\n    ReflectionFlag.Static,\n    ReflectionFlag.ExportAssignment,\n    ReflectionFlag.Optional,\n    ReflectionFlag.DefaultValue,\n    ReflectionFlag.Rest\n];\n\n\nexport interface IReflectionFlags extends Array<string>\n{\n    flags?:ReflectionFlag;\n\n    /**\n     * Is this a private member?\n     */\n    isPrivate?:boolean;\n\n    /**\n     * Is this a protected member?\n     */\n    isProtected?:boolean;\n\n    /**\n     * Is this a public member?\n     */\n    isPublic?:boolean;\n\n    /**\n     * Is this a static member?\n     */\n    isStatic?:boolean;\n\n    /**\n     * Is this member exported?\n     */\n    isExported?:boolean;\n\n    /**\n     * Is this a declaration from an external document?\n     */\n    isExternal?:boolean;\n\n    /**\n     * Whether this reflection is an optional component or not.\n     *\n     * Applies to function parameters and object members.\n     */\n    isOptional?:boolean;\n\n\n    /**\n     * Whether it's a rest parameter, like `foo(...params);`.\n     */\n    isRest?: boolean;\n\n    /**\n     *\n     */\n    hasExportAssignment?:boolean;\n\n    isConstructorProperty?:boolean;\n}\n\n\nexport interface IDefaultValueContainer extends Reflection\n{\n    defaultValue:string;\n}\n\n\nexport interface ITypeContainer extends Reflection\n{\n    type:Type;\n}\n\n\nexport interface ITypeParameterContainer extends Reflection\n{\n    typeParameters:TypeParameterReflection[];\n}\n\n\nexport enum TraverseProperty {\n    Children,\n    Parameters,\n    TypeLiteral,\n    TypeParameter,\n    Signatures,\n    IndexSignature,\n    GetSignature,\n    SetSignature\n}\n\n\nexport interface ITraverseCallback\n{\n    (reflection:Reflection, property:TraverseProperty):void;\n}\n\n\n/**\n * Defines the usage of a decorator.\n */\nexport interface IDecorator\n{\n    /**\n     * The name of the decorator being applied.\n     */\n    name:string;\n\n    /**\n     * The type declaring the decorator.\n     * Usually a ReferenceType instance pointing to the decorator function.\n     */\n    type?:Type;\n\n    /**\n     * A named map of arguments the decorator is applied with.\n     */\n    arguments?:any;\n}\n\n\n/**\n * Base class for all reflection classes.\n *\n * While generating a documentation, TypeDoc generates an instance of [[ProjectReflection]]\n * as the root for all reflections within the project. All other reflections are represented\n * by the [[DeclarationReflection]] class.\n *\n * This base class exposes the basic properties one may use to traverse the reflection tree.\n * You can use the [[children]] and [[parent]] properties to walk the tree. The [[groups]] property\n * contains a list of all children grouped and sorted for being rendered.\n */\nexport abstract class Reflection\n{\n    /**\n     * Unique id of this reflection.\n     */\n    id:number;\n\n    /**\n     * The symbol name of this reflection.\n     */\n    name:string = '';\n\n    /**\n     * The original name of the TypeScript declaration.\n     */\n    originalName:string;\n\n    /**\n     * The kind of this reflection.\n     */\n    kind:ReflectionKind;\n\n    /**\n     * The human readable string representation of the kind of this reflection.\n     */\n    kindString:string;\n\n    flags:IReflectionFlags = [];\n\n    /**\n     * The reflection this reflection is a child of.\n     */\n    parent:Reflection;\n\n    /**\n     * The parsed documentation comment attached to this reflection.\n     */\n    comment:Comment;\n\n    /**\n     * A list of all source files that contributed to this reflection.\n     */\n    sources:ISourceReference[];\n\n    /**\n     * A list of all decorators attached to this reflection.\n     */\n    decorators:IDecorator[];\n\n    /**\n     * A list of all types that are decorated by this reflection.\n     */\n    decorates:Type[];\n\n    /**\n     * The url of this reflection in the generated documentation.\n     */\n    url:string;\n\n    /**\n     * The name of the anchor of this child.\n     */\n    anchor:string;\n\n    /**\n     * Is the url pointing to an individual document?\n     *\n     * When FALSE, the url points to an anchor tag on a page of a different reflection.\n     */\n    hasOwnDocument:boolean;\n\n    /**\n     * A list of generated css classes that should be applied to representations of this\n     * reflection in the generated markup.\n     */\n    cssClasses:string;\n\n    /**\n     * Url safe alias for this reflection.\n     *\n     * @see [[BaseReflection.getAlias]]\n     */\n    private _alias:string;\n\n    private _aliases:string[];\n\n\n\n    /**\n     * Create a new BaseReflection instance.\n     */\n    constructor(parent?:Reflection, name?:string, kind?:ReflectionKind) {\n        this.id     = REFLECTION_ID++;\n        this.parent = parent;\n        this.name   = name;\n        this.originalName = name;\n        this.kind   = kind;\n    }\n\n\n    /**\n     * @param kind  The kind to test for.\n     */\n    kindOf(kind:ReflectionKind):boolean;\n\n    /**\n     * @param kind  An array of kinds to test for.\n     */\n    kindOf(kind:ReflectionKind[]):boolean;\n\n    /**\n     * Test whether this reflection is of the given kind.\n     */\n    kindOf(kind:any):boolean {\n        if (Array.isArray(kind)) {\n            for (var i = 0, c = kind.length; i < c; i++) {\n                if ((this.kind & kind[i]) !== 0) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return (this.kind & kind) !== 0;\n        }\n    }\n\n\n    /**\n     * Return the full name of this reflection.\n     *\n     * The full name contains the name of this reflection and the names of all parent reflections.\n     *\n     * @param separator  Separator used to join the names of the reflections.\n     * @returns The full name of this reflection.\n     */\n    getFullName(separator:string = '.'):string {\n        if (this.parent && !this.parent.isProject()) {\n            return this.parent.getFullName(separator) + separator + this.name;\n        } else {\n            return this.name;\n        }\n    }\n\n\n    /**\n     * Set a flag on this reflection.\n     */\n    setFlag(flag:ReflectionFlag, value:boolean = true) {\n        var name:string, index:number;\n        if (relevantFlags.indexOf(flag) != -1) {\n            name = ReflectionFlag[flag];\n            name = name.replace(/(.)([A-Z])/g, (m, a, b) => a + ' ' + b.toLowerCase());\n            index = this.flags.indexOf(name);\n        }\n\n        if (value) {\n            this.flags.flags |= flag;\n            if (name && index == -1) {\n                this.flags.push(name);\n            }\n        } else {\n            this.flags.flags &= ~flag;\n            if (name && index != -1) {\n                this.flags.splice(index, 1);\n            }\n        }\n\n        switch (flag) {\n            case ReflectionFlag.Private:\n                this.flags.isPrivate = value;\n                if (value) {\n                    this.setFlag(ReflectionFlag.Protected, false);\n                    this.setFlag(ReflectionFlag.Public, false);\n                }\n                break;\n            case ReflectionFlag.Protected:\n                this.flags.isProtected = value;\n                if (value) {\n                    this.setFlag(ReflectionFlag.Private, false);\n                    this.setFlag(ReflectionFlag.Public, false);\n                }\n                break;\n            case ReflectionFlag.Public:\n                this.flags.isPublic = value;\n                if (value) {\n                    this.setFlag(ReflectionFlag.Private, false);\n                    this.setFlag(ReflectionFlag.Protected, false);\n                }\n                break;\n            case ReflectionFlag.Static:\n                this.flags.isStatic = value;\n                break;\n            case ReflectionFlag.Exported:\n                this.flags.isExported = value;\n                break;\n            case ReflectionFlag.External:\n                this.flags.isExternal = value;\n                break;\n            case ReflectionFlag.Optional:\n                this.flags.isOptional = value;\n                break;\n            case ReflectionFlag.Rest:\n                this.flags.isRest = value;\n                break;\n            case ReflectionFlag.ExportAssignment:\n                this.flags.hasExportAssignment = value;\n                break;\n            case ReflectionFlag.ConstructorProperty:\n                this.flags.isConstructorProperty = value;\n                break;\n        }\n    }\n\n\n    /**\n     * Return an url safe alias for this reflection.\n     */\n    getAlias():string {\n        if (!this._alias) {\n            var alias = this.name.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n            if (alias == '') {\n                alias = 'reflection-' + this.id;\n            }\n\n            var target = <Reflection>this;\n            while (target.parent && !target.parent.isProject() && !target.hasOwnDocument) {\n                target = target.parent;\n            }\n\n            if (!target._aliases) target._aliases = [];\n            var suffix = '', index = 0;\n            while (target._aliases.indexOf(alias + suffix) != -1) {\n                suffix = '-' + (++index).toString();\n            }\n\n            alias += suffix;\n            target._aliases.push(alias);\n            this._alias = alias;\n        }\n\n        return this._alias;\n    }\n\n\n    /**\n     * Has this reflection a visible comment?\n     *\n     * @returns TRUE when this reflection has a visible comment.\n     */\n    hasComment():boolean {\n        return <boolean>(this.comment && this.comment.hasVisibleComponent());\n    }\n\n\n    hasGetterOrSetter():boolean {\n        return false;\n    }\n\n\n    /**\n     * @param name  The name of the child to look for. Might contain a hierarchy.\n     */\n    getChildByName(name:string):Reflection;\n\n    /**\n     * @param names  The name hierarchy of the child to look for.\n     */\n    getChildByName(names:string[]):Reflection;\n\n    /**\n     * Return a child by its name.\n     *\n     * @returns The found child or NULL.\n     */\n    getChildByName(arg:any):Reflection {\n        var names:string[] = Array.isArray(arg) ? arg : arg.split('.');\n        var name = names[0];\n        var result:Reflection = null;\n\n        this.traverse((child) => {\n            if (child.name == name) {\n                if (names.length <= 1) {\n                    result = child;\n                } else if (child) {\n                    result = child.getChildByName(names.slice(1));\n                }\n            }\n        });\n\n        return result;\n    }\n\n\n    /**\n     * Return whether this reflection is the root / project reflection.\n     */\n    isProject():boolean { //:this is ProjectReflection\n        return false;\n    }\n\n\n    /**\n     * @param name  The name to look for. Might contain a hierarchy.\n     */\n    findReflectionByName(name:string):Reflection;\n\n    /**\n     * @param names  The name hierarchy to look for.\n     */\n    findReflectionByName(names:string[]):Reflection;\n\n    /**\n     * Try to find a reflection by its name.\n     *\n     * @return The found reflection or null.\n     */\n    findReflectionByName(arg:any):Reflection {\n        var names:string[] = Array.isArray(arg) ? arg : arg.split('.');\n\n        var reflection = this.getChildByName(names);\n        if (reflection) {\n            return reflection;\n        } else {\n            return this.parent.findReflectionByName(names);\n        }\n    }\n\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback:ITraverseCallback) { }\n\n\n    /**\n     * Return a raw object representation of this reflection.\n     */\n    toObject():any {\n        var result:any = {\n            id:         this.id,\n            name:       this.name,\n            kind:       this.kind,\n            kindString: this.kindString,\n            flags:      {}\n        };\n\n        if (this.originalName != this.name) {\n            result.originalName = this.originalName;\n        }\n\n        if (this.comment) {\n            result.comment = this.comment.toObject();\n        }\n\n        for (var key in this.flags) {\n            if (parseInt(key) == <any>key || key == 'flags') continue;\n            if (this.flags[key]) result.flags[key] = true;\n        }\n\n        if (this.decorates) {\n            result.decorates = this.decorates.map((type) => type.toObject());\n        }\n\n        if (this.decorators) {\n            result.decorators = this.decorators.map((decorator) => {\n                var result:any = { name:decorator.name };\n                if (decorator.type) result.type = decorator.type.toObject();\n                if (decorator.arguments) result.arguments = decorator.arguments;\n                return result;\n            });\n        }\n\n        this.traverse((child, property) => {\n            if (property == TraverseProperty.TypeLiteral) return;\n            var name = TraverseProperty[property];\n            name = name.substr(0, 1).toLowerCase() + name.substr(1);\n            if (!result[name]) result[name] = [];\n            result[name].push(child.toObject());\n        });\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString():string {\n        return ReflectionKind[this.kind] + ' ' + this.name;\n    }\n\n\n    /**\n     * Return a string representation of this reflection and all of its children.\n     *\n     * @param indent  Used internally to indent child reflections.\n     */\n    toStringHierarchy(indent:string = '') {\n        var lines = [indent + this.toString()];\n\n        indent += '  ';\n        this.traverse((child, property) => {\n            lines.push(child.toStringHierarchy(indent));\n        });\n\n        return lines.join('\\n');\n    }\n}\n"]}