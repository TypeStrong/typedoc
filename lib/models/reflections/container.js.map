{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/container.ts"],"names":[],"mappings":";;;;;;AAAA,yBAA8E,YAAY,CAAC,CAAA;AAK3F;IAAyC,uCAAU;IAAnD;QAAyC,8BAAU;IA+EnD,CAAC;IA3DG,+CAAiB,GAAjB,UAAkB,IAAmB;QACjC,IAAI,MAAM,GAA2B,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAWD,sCAAQ,GAAR,UAAS,QAA0B;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAA2B;gBAC9C,QAAQ,CAAC,KAAK,EAAE,2BAAgB,CAAC,QAAQ,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAMD,sCAAQ,GAAR;QACI,IAAI,MAAM,GAAG,gBAAK,CAAC,QAAQ,WAAE,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,MAAM,GAAS,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;gBACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;YACjC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;QAC9B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,OAAO,GAAS,EAAE,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACxB,OAAO,CAAC,IAAI,CAAC;oBACX,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC5B,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;QAC9B,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,0BAAC;AAAD,CAAC,AA/ED,CAAyC,qBAAU,GA+ElD;AA/EY,2BAAmB,sBA+E/B,CAAA","sourcesContent":["import {Reflection, ReflectionKind, ITraverseCallback, TraverseProperty} from \"./abstract\";\nimport {ReflectionGroup} from \"../ReflectionGroup\";\nimport {DeclarationReflection} from \"./declaration\";\n\n\nexport class ContainerReflection extends Reflection\n{\n    /**\n     * The children of this reflection.\n     */\n    children:DeclarationReflection[];\n\n    /**\n     * All children grouped by their kind.\n     */\n    groups:ReflectionGroup[];\n\n\n\n    /**\n     * Return a list of all children of a certain kind.\n     *\n     * @param kind  The desired kind of children.\n     * @returns     An array containing all children with the desired kind.\n     */\n    getChildrenByKind(kind:ReflectionKind):DeclarationReflection[] {\n        var values:DeclarationReflection[] = [];\n        for (var key in this.children) {\n            var child = this.children[key];\n            if (child.kindOf(kind)) {\n                values.push(child);\n            }\n        }\n        return values;\n    }\n\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback:ITraverseCallback) {\n        if (this.children) {\n            this.children.forEach((child:DeclarationReflection) => {\n                callback(child, TraverseProperty.Children);\n            });\n        }\n    }\n\n\n    /**\n     * Return a raw object representation of this reflection.\n     */\n    toObject():any {\n        var result = super.toObject();\n\n        if (this.groups) {\n            var groups:any[] = [];\n            this.groups.forEach((group) => {\n                groups.push(group.toObject())\n            });\n\n            result['groups'] = groups;\n        }\n\n        if (this.sources) {\n          var sources:any[] = [];\n          this.sources.forEach((source) => {\n              sources.push({\n                fileName: source.fileName,\n                line: source.line,\n                character: source.character\n              });\n          });\n\n          result['sources'] = sources;\n        }\n\n        return result;\n    }\n}\n"]}