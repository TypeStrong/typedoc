{"version":3,"file":"signature.js","sourceRoot":"","sources":["../../../src/lib/models/reflections/signature.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type, ReflectionType} from \"../types/index\";\nimport {Reflection, ITypeContainer, ITypeParameterContainer, TraverseProperty, ITraverseCallback} from \"./abstract\";\nimport {ContainerReflection} from \"./container\";\nimport {ParameterReflection} from \"./parameter\";\nimport {TypeParameterReflection} from \"./type-parameter\";\n\n\nexport class SignatureReflection extends Reflection implements ITypeContainer, ITypeParameterContainer\n{\n    parent:ContainerReflection;\n\n    parameters:ParameterReflection[];\n\n    typeParameters:TypeParameterReflection[];\n\n    type:Type;\n\n    /**\n     * A type that points to the reflection that has been overwritten by this reflection.\n     *\n     * Applies to interface and class members.\n     */\n    overwrites:Type;\n\n    /**\n     * A type that points to the reflection this reflection has been inherited from.\n     *\n     * Applies to interface and class members.\n     */\n    inheritedFrom:Type;\n\n    /**\n     * A type that points to the reflection this reflection is the implementation of.\n     *\n     * Applies to class members.\n     */\n    implementationOf:Type;\n\n\n\n    /**\n     * Return an array of the parameter types.\n     */\n    getParameterTypes():Type[] {\n        if (!this.parameters) return [];\n        return this.parameters.map((parameter:ParameterReflection) => parameter.type);\n    }\n\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback:ITraverseCallback) {\n        if (this.type instanceof ReflectionType) {\n            callback((<ReflectionType>this.type).declaration, TraverseProperty.TypeLiteral);\n        }\n\n        if (this.typeParameters) {\n            this.typeParameters.forEach((parameter) => callback(parameter, TraverseProperty.TypeParameter));\n        }\n\n        if (this.parameters) {\n            this.parameters.forEach((parameter) => callback(parameter, TraverseProperty.Parameters));\n        }\n\n        super.traverse(callback);\n    }\n\n\n    /**\n     * Return a raw object representation of this reflection.\n     */\n    toObject():any {\n        var result = super.toObject();\n\n        if (this.type) {\n            result.type = this.type.toObject();\n        }\n\n        if (this.overwrites) {\n            result.overwrites = this.overwrites.toObject();\n        }\n\n        if (this.inheritedFrom) {\n            result.inheritedFrom = this.inheritedFrom.toObject();\n        }\n\n        if (this.implementationOf) {\n            result.implementationOf = this.implementationOf.toObject();\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString():string {\n        var result = super.toString();\n\n        if (this.typeParameters) {\n            var parameters:string[] = [];\n            this.typeParameters.forEach((parameter) => parameters.push(parameter.name));\n            result += '<' + parameters.join(', ') + '>';\n        }\n\n        if (this.type) {\n            result += ':' + this.type.toString();\n        }\n\n        return result;\n    }\n}\n"]}