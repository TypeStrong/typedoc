{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../../../src/lib/output/utils/resources/stack.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAkB7B,uBAAuB,IAAW;IAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AACzD,CAAC;AAGD;IASI,kBAAY,MAA0B,EAAE,IAAW,EAAE,QAAe;QAChE,IAAI,CAAC,MAAM,GAAK,MAAM,CAAC;QACvB,IAAI,CAAC,IAAI,GAAO,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAGD,0BAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACL,eAAC;AAAD,CAAC,AAnBD,IAmBC;AAnBqB,gBAAQ,WAmB7B,CAAA;AAGD;IAWI,wBAAY,KAAsB,EAAE,IAAW,EAAE,IAAW;QAHpD,cAAS,GAAmB,EAAE,CAAC;QAInC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAI,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAI,IAAI,CAAC;QAElB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAGD,uCAAc,GAAd,UAAe,MAAsB;QACjC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC/B,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC;gBAAC,QAAQ,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IAGD,oCAAW,GAAX,UAAY,IAAW;QACnB,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC;IAClC,CAAC;IAGD,oCAAW,GAAX,UAAY,IAAW;QACnB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAGD,gCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGO,sCAAa,GAArB,UAAsB,GAAW;QAC7B,IAAI,aAAa,GAAK,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACpD,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;QACtD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,EAAE,CAAC,CAAC,GAAG,CAAC;YAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAErC,GAAG,CAAC,CAAiB,UAAoB,EAApB,KAAA,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,EAApB,cAAoB,EAApB,IAAoB,CAAC;YAArC,IAAI,QAAQ,SAAA;YACb,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAEzC,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,IAAI,GAAU,aAAa,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACnE,CAAC;SACJ;IACL,CAAC;IACL,qBAAC;AAAD,CAAC,AAjED,IAiEC;AAjEY,sBAAc,iBAiE1B,CAAA;AAGD;IAcI,uBAAY,cAAgC,EAAE,eAAuB;QAH7D,YAAO,GAAuB,EAAE,CAAC;QAIrC,IAAI,CAAC,cAAc,GAAI,cAAc,CAAC;QACtC,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,IAAI,CAAC;IACnD,CAAC;IAGD,gCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAGD,kCAAU,GAAV;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAMD,mCAAW,GAAX,UAAY,IAAW;QACnB,IAAI,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAEpC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC;YAChB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAC9C,CAAC;QACL,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC;IAGD,uCAAe,GAAf;QACI,IAAI,SAAS,GAAmB,EAAE,CAAC;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAEpC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAGD,wCAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAGD,0CAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAGD,iCAAS,GAAT,UAAU,IAAW;QACjB,GAAG,CAAC,CAAe,UAAY,EAAZ,KAAA,IAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY,CAAC;YAA3B,IAAI,MAAM,SAAA;YACX,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC;SACJ;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAGD,iCAAS,GAAT,UAAU,IAAW;QACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC;IACzC,CAAC;IAMD,iCAAS,GAAT,UAAU,IAAW,EAAE,IAAW,EAAE,YAAqB;QACrD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;QACxE,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC,CAAC;YACjF,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAAC,CAAC;YACrF,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,cAAc,CAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;IAGD,oCAAY,GAAZ,UAAa,IAAW;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC3C,OAAO,KAAK,GAAG,KAAK,EAAE,CAAC;YACnB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC9B,KAAK,IAAI,CAAC,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAK,IAAI,CAAC,CAAC;YACf,CAAC;QACL,CAAC;IACL,CAAC;IAGD,wCAAgB,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IACL,oBAAC;AAAD,CAAC,AAlJD,IAkJC;AAlJqB,qBAAa,gBAkJlC,CAAA","sourcesContent":["import * as FS from \"fs\";\nimport * as Path from \"path\";\nimport * as Util from \"util\";\n\nimport {normalizePath} from \"../../../utils/fs\";\n\n\nexport interface IResourceClass<T extends Resource> extends Function {\n    new (origin:ResourceOrigin<T>, name:string, fileName:string):T\n}\n\n\nexport interface IResourceMap<T extends Resource> {\n    [name:string]:T\n}\n\n\n/**\n * Normalize the given template name.\n */\nfunction normalizeName(name:string):string {\n    return name.replace('\\\\', '/').replace(/\\.\\w+$/, '');\n}\n\n\nexport abstract class Resource\n{\n    protected origin:ResourceOrigin<any>;\n\n    protected name:string;\n\n    protected fileName:string;\n\n\n    constructor(origin:ResourceOrigin<any>, name:string, fileName:string) {\n        this.origin   = origin;\n        this.name     = name;\n        this.fileName = fileName;\n    }\n\n\n    getName():string {\n        return this.name;\n    }\n}\n\n\nexport class ResourceOrigin<T extends Resource>\n{\n    private stack:ResourceStack<T>;\n\n    private name:string;\n\n    private path:string;\n\n    private resources:IResourceMap<T> = {};\n\n\n    constructor(stack:ResourceStack<T>, name:string, path:string) {\n        this.stack = stack;\n        this.name  = name;\n        this.path  = path;\n\n        this.findResources();\n    }\n\n\n    mergeResources(target:IResourceMap<T>) {\n        var resources = this.resources;\n        for (var name in resources) {\n            if (name in target) continue;\n            target[name] = resources[name];\n        }\n    }\n\n\n    hasResource(name:string):boolean {\n        return name in this.resources;\n    }\n\n\n    getResource(name:string):T {\n        if (name in this.resources) {\n            return this.resources[name];\n        } else {\n            return null;\n        }\n    }\n\n\n    getName():string {\n        return this.name;\n    }\n\n\n    private findResources(dir?:string) {\n        var resourceClass   = this.stack.getResourceClass();\n        var ressourceRegExp = this.stack.getRessourceRegExp();\n        var path = this.path;\n        if (dir) path = Path.join(path, dir);\n\n        for (var fileName of FS.readdirSync(path)) {\n            var fullName = Path.join(path, fileName);\n\n            if (FS.statSync(fullName).isDirectory()) {\n                this.findResources(dir ? Path.join(dir, fileName) : fileName);\n            } else if (ressourceRegExp.test(fileName)) {\n                var name:string = normalizeName(dir ? Path.join(dir, fileName) : fileName);\n                this.resources[name] = new resourceClass(this, name, fullName);\n            }\n        }\n    }\n}\n\n\nexport abstract class ResourceStack<T extends Resource>\n{\n    private isActive:boolean;\n\n    private ressourceClass:IResourceClass<T>;\n\n    private ressourceRegExp:RegExp;\n\n    /**\n     * A list of all source directories.\n     */\n    private origins:ResourceOrigin<T>[] = [];\n\n\n    constructor(ressourceClass:IResourceClass<T>, ressourceRegExp?:RegExp) {\n        this.ressourceClass  = ressourceClass;\n        this.ressourceRegExp = ressourceRegExp || /.*/;\n    }\n\n\n    activate():boolean {\n        if (this.isActive) return false;\n        this.isActive = true;\n        return true;\n    }\n\n\n    deactivate():boolean {\n        if (!this.isActive) return false;\n        this.isActive = false;\n        return true;\n    }\n\n\n    /**\n     * Return a resource by its name.\n     */\n    getResource(name:string):T {\n        var normalizedName = normalizeName(name);\n        var index = this.origins.length - 1;\n\n        while (index >= 0) {\n            var origin = this.origins[index--];\n            if (origin.hasResource(normalizedName)) {\n                return origin.getResource(normalizedName);\n            }\n        }\n\n        throw new Error(Util.format(\"Cannot find resource `%s`.\", name));\n    }\n\n\n    getAllResources():IResourceMap<T> {\n        var resources:IResourceMap<T> = {};\n        var index = this.origins.length - 1;\n\n        while (index >= 0) {\n            this.origins[index--].mergeResources(resources);\n        }\n\n        return resources;\n    }\n\n\n    getResourceClass():IResourceClass<T> {\n        return this.ressourceClass;\n    }\n\n\n    getRessourceRegExp():RegExp {\n        return this.ressourceRegExp;\n    }\n\n\n    getOrigin(name:string):ResourceOrigin<T> {\n        for (var origin of this.origins) {\n            if (origin.getName() == name) {\n                return origin;\n            }\n        }\n\n        return null;\n    }\n\n\n    hasOrigin(name:string):boolean {\n        return this.getOrigin(name) !== null;\n    }\n\n\n    /**\n     * Add a source directory to the resource stack.\n     */\n    addOrigin(name:string, path:string, ignoreErrors?:boolean) {\n        if (this.isActive) {\n            throw new Error(\"Cannot add origins while the resource is active.\");\n        }\n\n        if (this.hasOrigin(name)) {\n            throw new Error(Util.format(\"The origin `%s` is already registered.\", name));\n        }\n\n        path = Path.resolve(path);\n        if (!FS.existsSync(path)) {\n            if (!ignoreErrors) {\n                throw new Error(Util.format(\"The resource path `%s` does not exist.\", path));\n            }\n            return;\n        }\n\n        if (!FS.statSync(path).isDirectory()) {\n            if (!ignoreErrors) {\n                throw new Error(Util.format(\"The resource path `%s` is not a directory.\", path));\n            }\n            return;\n        }\n\n        this.origins.push(new ResourceOrigin<T>(this, name, path));\n    }\n\n\n    removeOrigin(name:string) {\n        if (this.isActive) {\n            throw new Error(\"Cannot remove origins while the resource is active.\");\n        }\n\n        var index = 0, count = this.origins.length;\n        while (index < count) {\n            var origin = this.origins[index];\n            if (origin.getName() === name) {\n                this.origins.splice(index, 1);\n                count -= 1;\n            } else {\n                index += 1;\n            }\n        }\n    }\n\n\n    removeAllOrigins() {\n        if (this.isActive) {\n            throw new Error(\"Cannot remove origins while the resource is active.\");\n        }\n\n        this.origins = [];\n    }\n}\n"]}