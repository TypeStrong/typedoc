{"version":3,"file":"PrettyPrintPlugin.js","sourceRoot":"","sources":["../../../src/lib/output/plugins/PrettyPrintPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, RendererComponent} from \"../components\";\nimport {PageEvent} from \"../events\";\n\n\n/**\n * List of states the parser of [[PrettyPrintPlugin]] can be in.\n */\nenum PrettyPrintState {\n    /**\n     * Default state of the parser. Empty lines will be removed and indention will be adjusted.\n     */\n    Default,\n\n    /**\n     * Comment state, the parser waits for a comment closing tag.\n     */\n    Comment,\n\n    /**\n     * Pre state, the parser waits for the closing tag of the current pre block.\n     */\n    Pre\n}\n\n\n/**\n * A plugin that pretty prints the generated html.\n *\n * This not only aids in making the generated html source code more readable, by removing\n * blank lines and unnecessary whitespaces the size of the documentation is reduced without\n * visual impact.\n *\n * At the point writing this the docs of TypeDoc took 97.8 MB  without and 66.4 MB with this\n * plugin enabled, so it reduced the size to 68% of the original output.\n */\n@Component({name:\"pretty-print\"})\nexport class PrettyPrintPlugin extends RendererComponent\n{\n    /**\n     * Map of all tags that will be ignored.\n     */\n    static IGNORED_TAGS:any = {\n        area:    true,\n        base:    true,\n        br:      true,\n        wbr:     true,\n        col:     true,\n        command: true,\n        embed:   true,\n        hr:      true,\n        img:     true,\n        input:   true,\n        link:    true,\n        meta:    true,\n        param:   true,\n        source:  true\n    };\n\n    /**\n     * Map of all tags that prevent this plugin form modifying the following code.\n     */\n    static PRE_TAGS:any = {\n        pre:      true,\n        code:     true,\n        textarea: true,\n        script:   true,\n        style:    true\n    };\n\n\n    /**\n     * Create a new PrettyPrintPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, PageEvent.END, this.onRendererEndPage, -1024);\n    }\n\n\n    /**\n     * Triggered after a document has been rendered, just before it is written to disc.\n     *\n     * @param event\n     */\n    onRendererEndPage(event:PageEvent) {\n        var match:RegExpMatchArray;\n        var line:string;\n        var lineState:PrettyPrintState;\n        var lineDepth:number;\n        var tagName:string;\n        var preName:string;\n\n        var tagExp       = /<\\s*(\\w+)[^>]*>|<\\/\\s*(\\w+)[^>]*>|<!--|-->/g;\n        var emptyLineExp = /^[\\s]*$/;\n        var minLineDepth = 1;\n        var state        = PrettyPrintState.Default;\n        var stack:string[] = [];\n\n        var lines        = event.contents.split(/\\r\\n?|\\n/);\n        var index        = 0;\n        var count        = lines.length;\n\n        while (index < count) {\n            line = lines[index];\n            if (emptyLineExp.test(line)) {\n                if (state == PrettyPrintState.Default) {\n                    lines.splice(index, 1);\n                    count -= 1;\n                    continue;\n                }\n            } else {\n                lineState = state;\n                lineDepth = stack.length;\n\n                while (match = tagExp.exec(line)) {\n                    if (state == PrettyPrintState.Comment) {\n                        if (match[0] == '-->') {\n                            state = PrettyPrintState.Default;\n                        }\n                    } else if (state == PrettyPrintState.Pre) {\n                        if (match[2] && match[2].toLowerCase() == preName) {\n                            state = PrettyPrintState.Default;\n                        }\n                    } else {\n                        if (match[0] == '<!--') {\n                            state = PrettyPrintState.Comment;\n                        } else if (match[1]) {\n                            tagName = match[1].toLowerCase();\n                            if (tagName in PrettyPrintPlugin.IGNORED_TAGS) continue;\n                            if (tagName in PrettyPrintPlugin.PRE_TAGS) {\n                                state = PrettyPrintState.Pre;\n                                preName = tagName;\n                            } else {\n                                if (tagName == 'body') minLineDepth = 2;\n                                stack.push(tagName);\n                            }\n                        } else if (match[2]) {\n                            tagName = match[2].toLowerCase();\n                            if (tagName in PrettyPrintPlugin.IGNORED_TAGS) continue;\n\n                            var n = stack.lastIndexOf(tagName);\n                            if (n != -1) {\n                                stack.length = n;\n                            }\n                        }\n                    }\n                }\n\n                if (lineState == PrettyPrintState.Default) {\n                    lineDepth = Math.min(lineDepth, stack.length);\n                    line = line.replace(/^\\s+/, '').replace(/\\s+$/, '');\n                    if (lineDepth > minLineDepth) {\n                        line = Array(lineDepth - minLineDepth + 1).join('\\t') + line;\n                    }\n\n                    lines[index] = line;\n                }\n            }\n\n            index++;\n        }\n\n        event.contents = lines.join('\\n');\n    }\n}\n"]}