{"version":3,"file":"MarkedLinksPlugin.js","sourceRoot":"","sources":["../../../src/lib/output/plugins/MarkedLinksPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Util from \"util\";\n\nimport {Reflection} from \"../../models/reflections/abstract\";\nimport {Component, ContextAwareRendererComponent} from \"../components\";\nimport {MarkdownEvent} from \"../events\";\n\n\n/**\n * A plugin that builds links in markdown texts.\n */\n@Component({name:\"marked-links\"})\nexport class MarkedLinksPlugin extends ContextAwareRendererComponent\n{\n    /**\n     * Regular expression for detecting bracket links.\n     */\n    private brackets:RegExp = /\\[\\[([^\\]]+)\\]\\]/g;\n\n    /**\n     * Regular expression for detecting inline tags like {@link ...}.\n     */\n    private inlineTag:RegExp = /(?:\\[(.+?)\\])?\\{@(link|linkcode|linkplain)\\s+((?:.|\\n)+?)\\}/gi;\n\n    /**\n     * Regular expression to test if a string looks like an external url.\n     */\n    private urlPrefix:RegExp = /^(http|ftp)s?:\\/\\//;\n\n\n\n    /**\n     * Create a new MarkedLinksPlugin instance.\n     */\n    initialize() {\n        super.initialize();\n        this.listenTo(this.owner, MarkdownEvent.PARSE, this.onParseMarkdown, 100);\n    }\n\n\n    /**\n     * Find all references to symbols within the given text and transform them into a link.\n     *\n     * This function is aware of the current context and will try to find the symbol within the\n     * current reflection. It will walk up the reflection chain till the symbol is found or the\n     * root reflection is reached. As a last resort the function will search the entire project\n     * for the given symbol.\n     *\n     * @param text  The text that should be parsed.\n     * @returns The text with symbol references replaced by links.\n     */\n    private replaceBrackets(text:string):string {\n        return text.replace(this.brackets, (match:string, content:string):string => {\n            var split = MarkedLinksPlugin.splitLinkText(content);\n            return this.buildLink(match, split.target, split.caption);\n        });\n    }\n\n\n    /**\n     * Find symbol {@link ...} strings in text and turn into html links\n     *\n     * @param text  The string in which to replace the inline tags.\n     * @return      The updated string.\n     */\n    private replaceInlineTags(text:string):string {\n        return text.replace(this.inlineTag, (match:string, leading:string, tagName:string, content:string):string => {\n            var split   = MarkedLinksPlugin.splitLinkText(content);\n            var target  = split.target;\n            var caption = leading || split.caption;\n\n            var monospace:boolean;\n            if (tagName == 'linkcode') monospace = true;\n            if (tagName == 'linkplain') monospace = false;\n\n            return this.buildLink(match, target, caption, monospace);\n        });\n    }\n\n\n    /**\n     * Format a link with the given text and target.\n     *\n     * @param original   The original link string, will be returned if the target cannot be resolved..\n     * @param target     The link target.\n     * @param caption    The caption of the link.\n     * @param monospace  Whether to use monospace formatting or not.\n     * @returns A html link tag.\n     */\n    private buildLink(original:string, target:string, caption:string, monospace?:boolean):string {\n        var attributes = '';\n        if (this.urlPrefix.test(target)) {\n            attributes = ' class=\"external\"';\n        } else {\n            var reflection:Reflection;\n            if (this.reflection) {\n                reflection = this.reflection.findReflectionByName(target);\n            } else if (this.project) {\n                reflection = this.project.findReflectionByName(target);\n            }\n\n            if (reflection && reflection.url) {\n                target = this.getRelativeUrl(reflection.url);\n            } else {\n                return original;\n            }\n        }\n\n        if (monospace) {\n            caption = '<code>' + caption + '</code>';\n        }\n\n        return Util.format('<a href=\"%s\"%s>%s</a>', target, attributes, caption);\n    }\n\n\n    /**\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\n     *\n     * @param event\n     */\n    onParseMarkdown(event:MarkdownEvent) {\n        event.parsedText = this.replaceInlineTags(this.replaceBrackets(event.parsedText));\n    }\n\n\n    /**\n     * Split the given link into text and target at first pipe or space.\n     *\n     * @param text  The source string that should be checked for a split character.\n     * @returns An object containing the link text and target.\n     */\n    static splitLinkText(text:string):{caption:string;target:string;} {\n        var splitIndex = text.indexOf('|');\n        if (splitIndex === -1) {\n            splitIndex = text.search(/\\s/);\n        }\n\n        if (splitIndex !== -1) {\n            return {\n                caption: text.substr(splitIndex + 1).replace(/\\n+/, ' '),\n                target: text.substr(0, splitIndex)\n            };\n        } else {\n            return {\n                caption: text,\n                target: text\n            };\n        }\n    }\n}\n"]}