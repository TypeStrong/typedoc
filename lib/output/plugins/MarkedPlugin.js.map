{"version":3,"file":"MarkedPlugin.js","sourceRoot":"","sources":["../../../src/lib/output/plugins/MarkedPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from \"fs-extra\";\nimport * as Path from \"path\";\nimport * as Marked from \"marked\";\nimport * as HighlightJS from \"highlight.js\";\nimport * as Handlebars from \"handlebars\";\n\nimport {Component, ContextAwareRendererComponent} from \"../components\";\nimport {RendererEvent, MarkdownEvent} from \"../events\";\nimport {Option} from \"../../utils/component\";\nimport {ParameterHint} from \"../../utils/options/declaration\";\n\n\n/**\n * A plugin that exposes the markdown, compact and relativeURL helper to handlebars.\n *\n * Templates should parse all comments with the markdown handler so authors can\n * easily format their documentation. TypeDoc uses the Marked (https://github.com/chjj/marked)\n * markdown parser and HighlightJS (https://github.com/isagalaev/highlight.js) to highlight\n * code blocks within markdown sections. Additionally this plugin allows to link to other symbols\n * using double angle brackets.\n *\n * You can use the markdown helper anywhere in the templates to convert content to html:\n *\n * ```handlebars\n * {{#markdown}}{{{comment.text}}}{{/markdown}}\n * ```\n *\n * The compact helper removes all newlines of its content:\n *\n * ```handlebars\n * {{#compact}}\n *   Compact\n *   this\n * {{/compact}}\n * ```\n *\n * The relativeURL helper simply transforms an absolute url into a relative url:\n *\n * ```handlebars\n * {{#relativeURL url}}\n * ```\n */\n@Component({name:\"marked\"})\nexport class MarkedPlugin extends ContextAwareRendererComponent\n{\n    @Option({\n        name: 'includes',\n        help: 'Specifies the location to look for included documents (use [[include:FILENAME]] in comments).',\n        hint: ParameterHint.Directory\n    })\n    includeSource:string;\n\n    @Option({\n        name: 'media',\n        help: 'Specifies the location with media files that should be copied to the output directory.',\n        hint: ParameterHint.Directory\n    })\n    mediaSource:string;\n\n    /**\n     * The path referenced files are located in.\n     */\n    private includes:string;\n\n    /**\n     * Path to the output media directory.\n     */\n    private mediaDirectory:string;\n\n    /**\n     * The pattern used to find references in markdown.\n     */\n    private includePattern:RegExp = /\\[\\[include:([^\\]]+?)\\]\\]/g;\n\n    /**\n     * The pattern used to find media links.\n     */\n    private mediaPattern:RegExp = /media:\\/\\/([^ \"\\)\\]\\}]+)/g;\n\n\n\n    /**\n     * Create a new MarkedPlugin instance.\n     */\n    initialize() {\n        super.initialize();\n        this.listenTo(this.owner, MarkdownEvent.PARSE, this.onParseMarkdown);\n\n        var that = this;\n        Handlebars.registerHelper('markdown', function(arg:any) { return that.parseMarkdown(arg.fn(this), this); });\n        Handlebars.registerHelper('relativeURL', (url:string) => url ? this.getRelativeUrl(url) : url);\n\n        Marked.setOptions({\n            highlight: (text:any, lang:any) => this.getHighlighted(text, lang)\n        });\n    }\n\n\n    /**\n     * Highlight the synatx of the given text using HighlightJS.\n     *\n     * @param text  The text taht should be highlightes.\n     * @param lang  The language that should be used to highlight the string.\n     * @return A html string with syntax highlighting.\n     */\n    public getHighlighted(text:string, lang?:string):string {\n        try {\n            if (lang) {\n                return HighlightJS.highlight(lang, text).value;\n            } else {\n                return HighlightJS.highlightAuto(text).value;\n            }\n        } catch (error) {\n            this.application.logger.warn(error.message);\n            return text;\n        }\n    }\n\n\n    /**\n     * Parse the given markdown string and return the resulting html.\n     *\n     * @param text  The markdown string that should be parsed.\n     * @param context  The current handlebars context.\n     * @returns The resulting html string.\n     */\n    public parseMarkdown(text:string, context:any) {\n        if (this.includes) {\n            text = text.replace(this.includePattern, (match:string, path:string) => {\n                path = Path.join(this.includes, path.trim());\n                if (FS.existsSync(path) && FS.statSync(path).isFile()) {\n                    var contents = FS.readFileSync(path, 'utf-8');\n                    if (path.substr(-4).toLocaleLowerCase() == '.hbs') {\n                        var template = Handlebars.compile(contents);\n                        return template(context);\n                    } else {\n                        return contents;\n                    }\n                } else {\n                    return '';\n                }\n            });\n        }\n\n        if (this.mediaDirectory) {\n            text = text.replace(this.mediaPattern, (match:string, path:string) => {\n                if (FS.existsSync(Path.join(this.mediaDirectory, path))) {\n                    return this.getRelativeUrl('media') + '/' + path;\n                } else {\n                    return match;\n                }\n            });\n        }\n\n        var event = new MarkdownEvent(MarkdownEvent.PARSE);\n        event.originalText = text;\n        event.parsedText = text;\n\n        this.owner.trigger(event);\n        return event.parsedText;\n    }\n\n\n    /**\n     * Triggered before the renderer starts rendering a project.\n     *\n     * @param event  An event object describing the current render operation.\n     */\n    protected onBeginRenderer(event:RendererEvent) {\n        super.onBeginRenderer(event);\n\n        delete this.includes;\n        if (this.includeSource) {\n            var includes = Path.resolve(this.includeSource);\n            if (FS.existsSync(includes) && FS.statSync(includes).isDirectory()) {\n                this.includes = includes;\n            } else {\n                this.application.logger.warn('Could not find provided includes directory: ' + includes);\n            }\n        }\n\n        if (this.mediaSource) {\n            var media = Path.resolve(this.mediaSource);\n            if (FS.existsSync(media) && FS.statSync(media).isDirectory()) {\n                this.mediaDirectory = Path.join(event.outputDirectory, 'media');\n                FS.copySync(media, this.mediaDirectory);\n            } else {\n                this.mediaDirectory = null;\n                this.application.logger.warn('Could not find provided media directory: ' + media);\n            }\n        }\n    }\n\n\n    /**\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\n     *\n     * @param event\n     */\n    onParseMarkdown(event:MarkdownEvent) {\n        event.parsedText = Marked(event.parsedText);\n    }\n}\n"]}