{"version":3,"file":"AssetsPlugin.js","sourceRoot":"","sources":["../../../src/lib/output/plugins/AssetsPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,EAAE,WAAM,UAAU,CAAC,CAAA;AAE/B,2BAA2C,eAAe,CAAC,CAAA;AAC3D,uBAA4B,WAAW,CAAC,CAAA;AACxC,yBAAuB,aAAa,CAAC,CAAA;AAQrC;IAAkC,gCAAiB;IAAnD;QAAkC,8BAAiB;QAK/C,sBAAiB,GAAW,IAAI,CAAC;IAiCrC,CAAC;IA3BG,iCAAU,GAAV;QACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YACtB,GAAC,sBAAa,CAAC,KAAK,CAAC,GAAE,IAAI,CAAC,eAAe;;SAC9C,CAAC,CAAC;;IACP,CAAC;IAQO,sCAAe,GAAvB,UAAwB,KAAmB;QACvC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAQ,CAAC,eAAe,EAAE,EAAE,QAAQ,CAAC,CAAC;QAClE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QAEpD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,WAAW,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,IAAI,IAAI,WAAW,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAtCL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,QAAQ,EAAC,CAAC;oBAAA;IAuC3B,mBAAC;AAAD,CAAC,AAtCD,CAAkC,8BAAiB,GAsClD;AAtCY,oBAAY,eAsCxB,CAAA","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs-extra\";\n\nimport {Component, RendererComponent} from \"../components\";\nimport {RendererEvent} from \"../events\";\nimport {Renderer} from \"../renderer\";\n\n\n/**\n * A plugin that copies the subdirectory ´assets´ from the current themes\n * source folder to the output directory.\n */\n@Component({name:\"assets\"})\nexport class AssetsPlugin extends RendererComponent\n{\n    /**\n     * Should the default assets always be copied to the output directory?\n     */\n    copyDefaultAssets:boolean = true;\n\n\n    /**\n     * Create a new AssetsPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [RendererEvent.BEGIN]: this.onRendererBegin\n        });\n    }\n\n\n    /**\n     * Triggered before the renderer starts rendering a project.\n     *\n     * @param event  An event object describing the current render operation.\n     */\n    private onRendererBegin(event:RendererEvent) {\n        var fromDefault = Path.join(Renderer.getDefaultTheme(), 'assets');\n        var to = Path.join(event.outputDirectory, 'assets');\n\n        if (this.copyDefaultAssets) {\n            FS.copySync(fromDefault, to);\n        } else {\n            fromDefault = null;\n        }\n\n        var from = Path.join(this.owner.theme.basePath, 'assets');\n        if (from != fromDefault && FS.existsSync(from)) {\n            FS.copySync(from, to);\n        }\n    }\n}\n"]}