{"version":3,"file":"MinimalTheme.js","sourceRoot":"","sources":["../../../src/lib/output/themes/MinimalTheme.ts"],"names":[],"mappings":";;;;;;AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,6BAA2B,gBAAgB,CAAC,CAAA;AAE5C,2BAAyB,sBAAsB,CAAC,CAAA;AAChD,sBAAmE,gCAAgC,CAAC,CAAA;AACpG,uBAAwB,WAAW,CAAC,CAAA;AACpC,+BAA6B,0BAA0B,CAAC,CAAA;AAGxD;IAAkC,gCAAY;IAQ1C,sBAAY,QAAiB,EAAE,QAAe;QAC1C,kBAAM,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAE1B,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACnC,QAAQ,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QAC5C,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACvC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAEhC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,kBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACvE,CAAC;IAUD,wCAAiB,GAAjB,UAAkB,IAAW;QACzB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAUD,8BAAO,GAAP,UAAQ,OAAyB;QAC7B,IAAI,IAAI,GAAgB,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,uBAAU,CAAC,YAAY,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;QAE9D,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC;QAC3B,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACtB,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;QAE9B,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;YAC3B,2BAAY,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAQO,0CAAmB,GAA3B,UAA4B,IAAc;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,kBAAU,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,IAAI,+BAAc,EAAE,CAAC;QAChC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC;IASM,qBAAQ,GAAf,UAAgB,KAA2B,EAAE,MAAqB;QAC9D,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC;QACpC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAA2B;YACzC,IAAI,IAAI,GAAG,+BAAc,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YACtD,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAAC,AArFD,CAAkC,2BAAY,GAqF7C;AArFY,oBAAY,eAqFxB,CAAA","sourcesContent":["import * as FS from \"fs\";\nimport * as Path from \"path\";\n\nimport {DefaultTheme} from \"./DefaultTheme\";\nimport {Renderer} from \"../renderer\";\nimport {UrlMapping} from \"../models/UrlMapping\";\nimport {Reflection, DeclarationReflection, ProjectReflection} from \"../../models/reflections/index\";\nimport {PageEvent} from \"../events\";\nimport {NavigationItem} from \"../models/NavigationItem\";\n\n\nexport class MinimalTheme extends DefaultTheme\n{\n    /**\n     * Create a new DefaultTheme instance.\n     *\n     * @param renderer  The renderer this theme is attached to.\n     * @param basePath  The base path of this theme.\n     */\n    constructor(renderer:Renderer, basePath:string) {\n        super(renderer, basePath);\n\n        renderer.removeComponent('assets');\n        renderer.removeComponent('javascriptIndex');\n        renderer.removeComponent('navigation');\n        renderer.removeComponent('toc');\n\n        this.listenTo(renderer, PageEvent.BEGIN, this.onRendererBeginPage);\n    }\n\n\n    /**\n     * Test whether the given path contains a documentation generated by this theme.\n     *\n     * @param path  The path of the directory that should be tested.\n     * @returns     TRUE if the given path seems to be a previous output directory,\n     *              otherwise FALSE.\n     */\n    isOutputDirectory(path:string):boolean {\n        if (!FS.existsSync(Path.join(path, 'index.html'))) return false;\n        return true;\n    }\n\n\n    /**\n     * Map the models of the given project to the desired output files.\n     *\n     * @param project  The project whose urls should be generated.\n     * @returns        A list of [[UrlMapping]] instances defining which models\n     *                 should be rendered to which files.\n     */\n    getUrls(project:ProjectReflection):UrlMapping[] {\n        var urls:UrlMapping[] = [];\n        urls.push(new UrlMapping('index.html', project, 'index.hbs'));\n\n        project.url = 'index.html';\n        project.anchor = null;\n        project.hasOwnDocument = true;\n\n        project.children.forEach((child) => {\n            DefaultTheme.applyAnchorUrl(child, project);\n        });\n\n        return urls;\n    }\n\n\n    /**\n     * Triggered before a document will be rendered.\n     *\n     * @param page  An event object describing the current render operation.\n     */\n    private onRendererBeginPage(page:PageEvent) {\n        var model = page.model;\n        if (!(model instanceof Reflection)) {\n            return;\n        }\n\n        page.toc = new NavigationItem();\n        MinimalTheme.buildToc(page.model, page.toc);\n    }\n\n\n    /**\n     * Create a toc navigation item structure.\n     *\n     * @param model   The models whose children should be written to the toc.\n     * @param parent  The parent [[Models.NavigationItem]] the toc should be appended to.\n     */\n    static buildToc(model:DeclarationReflection, parent:NavigationItem) {\n        var children = model.children || [];\n        children.forEach((child:DeclarationReflection) => {\n            var item = NavigationItem.create(child, parent, true);\n            MinimalTheme.buildToc(child, item);\n        });\n    }\n}\n"]}