import * as ts from 'typescript';
import * as _ts from '../ts-internal';
import * as path from 'path';

import {EventDispatcher} from '../utils/events';
import {Reflection, Type, ProjectReflection} from '../models/index';
import {Context} from './context';
import {normalizePath} from '../utils/fs';

import * as nodes from './nodes';
import * as types from './types';
import * as plugins from './plugins';

/**
 * Result structure of the [[Converter.convert]] method.
 */
export interface ConverterResult {
    /**
     * An array containing all errors generated by the TypeScript compiler.
     */
    errors: ts.Diagnostic[];

    /**
     * The resulting project reflection.
     */
    project: ProjectReflection;
}

export enum SourceFileMode {
    File, Modules
}

export interface ConverterOptions {
    compilerOptions: ts.CompilerOptions;

    name?: string;
    externalPattern?: string;
    includeDeclarations?: boolean;
    excludeExternals?: boolean;
    excludeNotExported?: boolean;
    excludePrivate?: boolean;
    mode?: SourceFileMode;
    readme?: string;
}

function createCompilerHost(converter: Converter): ts.CompilerHost {
    return {
        getSourceFile(filename: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void): ts.SourceFile {
            let text: string;
            try {
                text = ts.sys.readFile(filename, converter.options.compilerOptions.charset);
            } catch (e) {
                if (onError) {
                    onError(e.number === ERROR_UNSUPPORTED_FILE_ENCODING ? 'Unsupported file encoding' : e.message);
                }
                text = '';
            }

            return text !== undefined ? ts.createSourceFile(filename, text, languageVersion) : undefined;
        },

        getDefaultLibFileName(options: ts.CompilerOptions): string {
            const lib = converter.getDefaultLib();
            const dir = _ts.getDirectoryPath(normalizePath(require.resolve('typescript')));
            return path.join(dir, lib);
        },

        getCurrentDirectory(this: ts.CompilerHost): string {
            const currentDirectory = ts.sys.getCurrentDirectory();
            this.getCurrentDirectory = () => currentDirectory;
            return currentDirectory;
        },

        useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,

        getDirectories: ts.sys.getDirectories,
        fileExists: ts.sys.fileExists,
        directoryExists: ts.sys.directoryExists,
        readFile: ts.sys.readFile,
        getCanonicalFileName: ts.sys.useCaseSensitiveFileNames ?
            (fileName: string) => fileName :
            (fileName: string) => fileName.toLowerCase()
        ,
        getNewLine: () => ts.sys.newLine,

        writeFile(fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) { }
    };
}

/**
 * Return code of ts.sys.readFile when the file encoding is unsupported.
 */
const ERROR_UNSUPPORTED_FILE_ENCODING = -2147024809;

/**
 * Compiles source files using TypeScript and converts compiler symbols to reflections.
 */
export class Converter extends EventDispatcher {
    options: ConverterOptions;

    private compilerHost: ts.CompilerHost;

    private nodeConverters: Map<ts.SyntaxKind, nodes.NodeConverter>;
    private typeNodeConverters: types.NodeTypeConverter[];
    private typeTypeConverters: types.TypeTypeConverter[];
    private plugins: plugins.Plugin[];

    /**
     * General events
     */

    /**
     * Triggered when the converter begins converting a project.
     * The listener should implement [[IConverterCallback]].
     * @event
     */
    static EVENT_BEGIN = 'begin';

    /**
     * Triggered when the converter has finished converting a project.
     * The listener should implement [[IConverterCallback]].
     * @event
     */
    static EVENT_END = 'end';

    /**
     * Factory events
     */

    /**
     * Triggered when the converter begins converting a source file.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_FILE_BEGIN = 'fileBegin';

    /**
     * Triggered when the converter has created a declaration reflection.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_CREATE_DECLARATION = 'createDeclaration';

    /**
     * Triggered when the converter has created a signature reflection.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_CREATE_SIGNATURE = 'createSignature';

    /**
     * Triggered when the converter has created a parameter reflection.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_CREATE_PARAMETER = 'createParameter';

    /**
     * Triggered when the converter has created a type parameter reflection.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_CREATE_TYPE_PARAMETER = 'createTypeParameter';

    /**
     * Triggered when the converter has found a function implementation.
     * The listener should implement [[IConverterNodeCallback]].
     * @event
     */
    static EVENT_FUNCTION_IMPLEMENTATION = 'functionImplementation';

    /**
     * Resolve events
     */

    /**
     * Triggered when the converter begins resolving a project.
     * The listener should implement [[IConverterCallback]].
     * @event
     */
    static EVENT_RESOLVE_BEGIN = 'resolveBegin';

    /**
     * Triggered when the converter resolves a reflection.
     * The listener should implement [[IConverterResolveCallback]].
     * @event
     */
    static EVENT_RESOLVE = 'resolveReflection';

    /**
     * Triggered when the converter has finished resolving a project.
     * The listener should implement [[IConverterCallback]].
     * @event
     */
    static EVENT_RESOLVE_END = 'resolveEnd';

    static nodeConverterClasses: nodes.NodeConverterConstructor[] = [
        nodes.AccessorConverter,
        nodes.AliasConverter,
        nodes.BlockConverter,
        nodes.ClassConverter,
        nodes.ConstructorConverter,
        nodes.EnumConverter,
        nodes.ExportConverter,
        nodes.FunctionConverter,
        nodes.IndexSignatureConverter,
        nodes.InterfaceConverter,
        nodes.ModuleConverter,
        nodes.ObjectLiteralConverter,
        nodes.SignatureConverter,
        nodes.TypeLiteralConverter,
        nodes.VariableStatementConverter,
        nodes.VariableConverter
    ];

    static typeConverterClasses: types.TypeConverterConstructor[] = [
        types.AliasConverter,
        types.ArrayConverter,
        types.BindingArrayConverter,
        types.BindingObjectConverter,
        types.EnumConverter,
        types.IntrinsicConverter,
        types.ReferenceConverter,
        types.StringLiteralConverter,
        types.TupleConverter,
        types.TypeParameterConverter,
        types.UnionConverter,
        types.UnknownConverter
    ];

    static pluginClasses: plugins.PluginConstructor[] = [
        plugins.CommentPlugin,
        plugins.DecoratorPlugin,
        plugins.DeepCommentPlugin,
        plugins.DynamicModulePlugin,
        plugins.GitHubPlugin,
        plugins.GroupPlugin,
        plugins.ImplementsPlugin,
        plugins.PackagePlugin,
        plugins.SourcePlugin,
        plugins.TypePlugin
    ];

    constructor(options: ConverterOptions) {
        super();

        this.options = options;
        this.compilerHost = createCompilerHost(this);

        this.nodeConverters = new Map();
        for (let ctor of Converter.nodeConverterClasses) {
            this.addNodeConverter(ctor);
        }

        this.typeTypeConverters = [];
        this.typeNodeConverters = [];
        for (let ctor of Converter.typeConverterClasses) {
            this.addTypeConverter(ctor);
        }
        this.typeNodeConverters.sort((a, b) => b.priority - a.priority);
        this.typeTypeConverters.sort((a, b) => b.priority - a.priority);

        this.plugins = [];
        for (let ctor of Converter.pluginClasses) {
            this.plugins.push(new ctor(this));
        }
    }

    private addNodeConverter(componentClass: nodes.NodeConverterConstructor) {
        const converter = new componentClass(this);
        for (let kind of componentClass.supports) {
            this.nodeConverters.set(kind, converter);
        }
    }

    private addTypeConverter(converterClass: types.TypeConverterConstructor) {
        const converter = new converterClass(this);

        if (types.isNodeTypeConverter(converter)) {
            this.typeNodeConverters.push(converter);
        }

        if (types.isTypeTypeConverter(converter)) {
            this.typeTypeConverters.push(converter);
        }
    }

    /**
     * Compile the given source files and create a project reflection for them.
     *
     * @param fileNames  Array of the file names that should be compiled.
     */
    convert(fileNames: string[]): ConverterResult {
        for (let i = 0, c = fileNames.length; i < c; i++) {
            fileNames[i] = normalizePath(_ts.normalizeSlashes(fileNames[i]));
        }

        const program = ts.createProgram(fileNames, this.options.compilerOptions, this.compilerHost);
        const checker = program.getTypeChecker();
        const context = new Context(this, fileNames, checker, program);

        this.trigger(Converter.EVENT_BEGIN, context);

        const errors = this.compile(context);
        const project = this.resolve(context);

        this.trigger(Converter.EVENT_END, context);

        return {
            errors: errors,
            project: project
        };
    }

    /**
     * Analyze the given node and create a suitable reflection.
     *
     * This function checks the kind of the node and delegates to the matching function implementation.
     *
     * @param context  The context object describing the current state the converter is in.
     * @param node     The compiler node that should be analyzed.
     * @return The resulting reflection or NULL.
     */
    convertNode(context: Context, node: ts.Node): Reflection {
        if (context.visitStack.indexOf(node) !== -1) {
            return null;
        }

        const oldVisitStack = context.visitStack;
        context.visitStack = oldVisitStack.slice();
        context.visitStack.push(node);

        let result: Reflection;
        if (this.nodeConverters.has(node.kind)) {
            result = this.nodeConverters.get(node.kind).convert(context, node);
        }

        context.visitStack = oldVisitStack;
        return result;
    }

    /**
     * Convert the given TypeScript type into its TypeDoc type reflection.
     *
     * @param context  The context object describing the current state the converter is in.
     * @param node  The node whose type should be reflected.
     * @param type  The type of the node if already known.
     * @returns The TypeDoc type reflection representing the given node and type.
     */
    convertType(context: Context, node?: ts.Node, type?: ts.Type): Type {
        // Run all node based type conversions
        if (node) {
            type = type || context.getTypeAtLocation(node);

            for (let converter of this.typeNodeConverters) {
                if (converter.supportsNode(context, node, type)) {
                    return converter.convertNode(context, node, type);
                }
            }
        }

        // Run all type based type conversions
        if (type) {
            for (let converter of this.typeTypeConverters) {
                if (converter.supportsType(context, type)) {
                    return converter.convertType(context, type);
                }
            }
        }
    }

    /**
     * Compile the files within the given context and convert the compiler symbols to reflections.
     *
     * @param context  The context object describing the current state the converter is in.
     * @returns An array containing all errors generated by the TypeScript compiler.
     */
    private compile(context: Context): ts.Diagnostic[] {
        const program = context.program;

        program.getSourceFiles().forEach((sourceFile) => {
            this.convertNode(context, sourceFile);
        });

        let diagnostics = program.getOptionsDiagnostics();
        if (diagnostics.length) {
            return diagnostics;
        }

        diagnostics = program.getSyntacticDiagnostics();
        if (diagnostics.length) {
            return diagnostics;
        }

        diagnostics = program.getGlobalDiagnostics();
        if (diagnostics.length) {
            return diagnostics;
        }

        diagnostics = program.getSemanticDiagnostics();
        if (diagnostics.length) {
            return diagnostics;
        }

        return [];
    }

    /**
     * Resolve the project within the given context.
     *
     * @param context  The context object describing the current state the converter is in.
     * @returns The final project reflection.
     */
    private resolve(context: Context): ProjectReflection {
        this.trigger(Converter.EVENT_RESOLVE_BEGIN, context);
        const project = context.project;

        for (let id in project.reflections) {
            if (!project.reflections.hasOwnProperty(id)) {
                continue;
            }
            this.trigger(Converter.EVENT_RESOLVE, context, project.reflections[id]);
        }

        this.trigger(Converter.EVENT_RESOLVE_END, context);
        return project;
    }

    /**
     * Return the basename of the default library that should be used.
     *
     * @returns The basename of the default library.
     */
    getDefaultLib(): string {
        return ts.getDefaultLibFileName(this.options.compilerOptions);
    }
}
