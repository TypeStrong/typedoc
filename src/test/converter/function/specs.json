{
  "id": 0,
  "name": "function",
  "variant": "project",
  "kind": 1,
  "flags": {},
  "children": [
    {
      "id": 1,
      "name": "function",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 33,
          "name": "moduleFunction",
          "variant": "declaration",
          "kind": 4,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This is the module extending the function moduleFunction()."
              }
            ]
          },
          "children": [
            {
              "id": 38,
              "name": "functionVariable",
              "variant": "declaration",
              "kind": 32,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This variable is appended to a function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 168,
                  "character": 15,
                  "url": "typedoc://function.ts#L168"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 34,
              "name": "append",
              "variant": "declaration",
              "kind": 64,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 173,
                  "character": 20,
                  "url": "typedoc://function.ts#L173"
                }
              ],
              "signatures": [
                {
                  "id": 35,
                  "name": "append",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This function is appended to another function."
                      }
                    ]
                  },
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 173,
                      "character": 20,
                      "url": "typedoc://function.ts#L173"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            },
            {
              "id": 36,
              "name": "prepend",
              "variant": "declaration",
              "kind": 64,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 178,
                  "character": 20,
                  "url": "typedoc://function.ts#L178"
                }
              ],
              "signatures": [
                {
                  "id": 37,
                  "name": "prepend",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This function is appended to another function."
                      }
                    ]
                  },
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 178,
                      "character": 20,
                      "url": "typedoc://function.ts#L178"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Variables",
              "children": [
                38
              ]
            },
            {
              "title": "Functions",
              "children": [
                34,
                36
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 122,
              "character": 16,
              "url": "typedoc://function.ts#L122"
            },
            {
              "fileName": "function.ts",
              "line": 164,
              "character": 14,
              "url": "typedoc://function.ts#L164"
            }
          ]
        },
        {
          "id": 63,
          "name": "Predicates",
          "variant": "declaration",
          "kind": 128,
          "flags": {},
          "children": [
            {
              "id": 70,
              "name": "constructor",
              "variant": "declaration",
              "kind": 512,
              "flags": {},
              "signatures": [
                {
                  "id": 71,
                  "name": "Predicates",
                  "variant": "signature",
                  "kind": 16384,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": 63,
                    "name": "Predicates",
                    "package": "typedoc"
                  }
                }
              ]
            },
            {
              "id": 74,
              "name": "assertString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 189,
                  "character": 4,
                  "url": "typedoc://function.ts#L189"
                }
              ],
              "signatures": [
                {
                  "id": 75,
                  "name": "assertString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 189,
                      "character": 4,
                      "url": "typedoc://function.ts#L189"
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "this",
                    "asserts": true,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            },
            {
              "id": 72,
              "name": "isString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 185,
                  "character": 4,
                  "url": "typedoc://function.ts#L185"
                }
              ],
              "signatures": [
                {
                  "id": 73,
                  "name": "isString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 185,
                      "character": 4,
                      "url": "typedoc://function.ts#L185"
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "this",
                    "asserts": false,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            },
            {
              "id": 67,
              "name": "assert",
              "variant": "declaration",
              "kind": 2048,
              "flags": {
                "isStatic": true
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 188,
                  "character": 11,
                  "url": "typedoc://function.ts#L188"
                }
              ],
              "signatures": [
                {
                  "id": 68,
                  "name": "assert",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 188,
                      "character": 11,
                      "url": "typedoc://function.ts#L188"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 69,
                      "name": "x",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "x",
                    "asserts": true
                  }
                }
              ]
            },
            {
              "id": 64,
              "name": "isString",
              "variant": "declaration",
              "kind": 2048,
              "flags": {
                "isStatic": true
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 182,
                  "character": 11,
                  "url": "typedoc://function.ts#L182"
                }
              ],
              "signatures": [
                {
                  "id": 65,
                  "name": "isString",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 182,
                      "character": 11,
                      "url": "typedoc://function.ts#L182"
                    }
                  ],
                  "parameters": [
                    {
                      "id": 66,
                      "name": "x",
                      "variant": "param",
                      "kind": 32768,
                      "flags": {},
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ],
                  "type": {
                    "type": "predicate",
                    "name": "x",
                    "asserts": false,
                    "targetType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Constructors",
              "children": [
                70
              ]
            },
            {
              "title": "Methods",
              "children": [
                74,
                72,
                67,
                64
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 181,
              "character": 13,
              "url": "typedoc://function.ts#L181"
            }
          ]
        },
        {
          "id": 76,
          "name": "all",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "Returns true if fn returns true for every item in the iterator\n\nReturns true if the iterator is empty"
              }
            ]
          },
          "sources": [
            {
              "fileName": "function.ts",
              "line": 197,
              "character": 13,
              "url": "typedoc://function.ts#L197"
            }
          ],
          "signatures": [
            {
              "id": 77,
              "name": "all",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 198,
                  "character": 4,
                  "url": "typedoc://function.ts#L198"
                }
              ],
              "typeParameters": [
                {
                  "id": 78,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 79,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 80,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 198,
                          "character": 12,
                          "url": "typedoc://function.ts#L198"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 81,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 198,
                              "character": 12,
                              "url": "typedoc://function.ts#L198"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 82,
                              "name": "item",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 78,
                                "name": "T",
                                "package": "typedoc",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "id": 83,
                  "name": "iterator",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                      "qualifiedName": "Iterable"
                    },
                    "typeArguments": [
                      {
                        "type": "reference",
                        "target": 78,
                        "name": "T",
                        "package": "typedoc",
                        "refersToTypeParameter": true
                      }
                    ],
                    "name": "Iterable",
                    "package": "typescript"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              }
            },
            {
              "id": 84,
              "name": "all",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 199,
                  "character": 4,
                  "url": "typedoc://function.ts#L199"
                }
              ],
              "typeParameters": [
                {
                  "id": 85,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 86,
                  "name": "fn",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 87,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 199,
                          "character": 12,
                          "url": "typedoc://function.ts#L199"
                        }
                      ],
                      "signatures": [
                        {
                          "id": 88,
                          "name": "__type",
                          "variant": "signature",
                          "kind": 4096,
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 199,
                              "character": 12,
                              "url": "typedoc://function.ts#L199"
                            }
                          ],
                          "parameters": [
                            {
                              "id": 89,
                              "name": "item",
                              "variant": "param",
                              "kind": 32768,
                              "flags": {},
                              "type": {
                                "type": "reference",
                                "target": 85,
                                "name": "T",
                                "package": "typedoc",
                                "refersToTypeParameter": true
                              }
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 90,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 199,
                      "character": 35,
                      "url": "typedoc://function.ts#L199"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 91,
                      "name": "__type",
                      "variant": "signature",
                      "kind": 4096,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 199,
                          "character": 35,
                          "url": "typedoc://function.ts#L199"
                        }
                      ],
                      "parameters": [
                        {
                          "id": 92,
                          "name": "iterator",
                          "variant": "param",
                          "kind": 32768,
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "target": {
                              "sourceFileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                              "qualifiedName": "Iterable"
                            },
                            "typeArguments": [
                              {
                                "type": "reference",
                                "target": 85,
                                "name": "T",
                                "package": "typedoc",
                                "refersToTypeParameter": true
                              }
                            ],
                            "name": "Iterable",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "id": 39,
          "name": "assertionFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 131,
              "character": 16,
              "url": "typedoc://function.ts#L131"
            }
          ],
          "signatures": [
            {
              "id": 40,
              "name": "assertionFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is an assertion function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 131,
                  "character": 16,
                  "url": "typedoc://function.ts#L131"
                }
              ],
              "parameters": [
                {
                  "id": 41,
                  "name": "condition",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The condition that is asserted to be true when this function returns."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "condition",
                "asserts": true
              }
            }
          ]
        },
        {
          "id": 45,
          "name": "assertIsNonNull",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 145,
              "character": 16,
              "url": "typedoc://function.ts#L145"
            }
          ],
          "signatures": [
            {
              "id": 46,
              "name": "assertIsNonNull",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Asserts that an argument is not null."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 145,
                  "character": 16,
                  "url": "typedoc://function.ts#L145"
                }
              ],
              "typeParameters": [
                {
                  "id": 47,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 48,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "target": 47,
                        "name": "T",
                        "package": "typedoc",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "arg",
                "asserts": true,
                "targetType": {
                  "type": "reference",
                  "target": 47,
                  "name": "T",
                  "package": "typedoc",
                  "refersToTypeParameter": true
                }
              }
            }
          ]
        },
        {
          "id": 53,
          "name": "boolOrUndef",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 202,
              "character": 16,
              "url": "typedoc://function.ts#L202"
            }
          ],
          "signatures": [
            {
              "id": 54,
              "name": "boolOrUndef",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 202,
                  "character": 16,
                  "url": "typedoc://function.ts#L202"
                }
              ],
              "parameters": [
                {
                  "id": 55,
                  "name": "x",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "intrinsic",
                    "name": "boolean"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 2,
          "name": "exportedFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 4,
              "character": 16,
              "url": "typedoc://function.ts#L4"
            }
          ],
          "signatures": [
            {
              "id": 3,
              "name": "exportedFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a simple exported function."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 4,
                  "character": 16,
                  "url": "typedoc://function.ts#L4"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 13,
          "name": "functionWithDefaults",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 62,
              "character": 16,
              "url": "typedoc://function.ts#L62"
            }
          ],
          "signatures": [
            {
              "id": 14,
              "name": "functionWithDefaults",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a parameter that has a default value."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 62,
                  "character": 16,
                  "url": "typedoc://function.ts#L62"
                }
              ],
              "parameters": [
                {
                  "id": 15,
                  "name": "valueA",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default string value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "defaultValue": "\"defaultValue\""
                },
                {
                  "id": 16,
                  "name": "valueB",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default numeric value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "100"
                },
                {
                  "id": 17,
                  "name": "valueC",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default NaN value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "defaultValue": "Number.NaN"
                },
                {
                  "id": 18,
                  "name": "valueD",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default boolean value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "true"
                },
                {
                  "id": 19,
                  "name": "valueE",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A parameter with a default null value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "defaultValue": "..."
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 9,
          "name": "functionWithOptionalValue",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 47,
              "character": 16,
              "url": "typedoc://function.ts#L47"
            }
          ],
          "signatures": [
            {
              "id": 10,
              "name": "functionWithOptionalValue",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with a parameter that is optional."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 47,
                  "character": 16,
                  "url": "typedoc://function.ts#L47"
                }
              ],
              "parameters": [
                {
                  "id": 11,
                  "name": "requiredParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A normal parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 12,
                  "name": "optionalParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An optional parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 4,
          "name": "functionWithParameters",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 23,
              "character": 16,
              "url": "typedoc://function.ts#L23"
            }
          ],
          "signatures": [
            {
              "id": 5,
              "name": "functionWithParameters",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with multiple arguments and a return value."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 23,
                  "character": 16,
                  "url": "typedoc://function.ts#L23"
                }
              ],
              "parameters": [
                {
                  "id": 6,
                  "name": "paramZ",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a string parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                },
                {
                  "id": 7,
                  "name": "paramG",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a parameter flagged with any.\n    This sentence is placed in the next line."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                },
                {
                  "id": 8,
                  "name": "paramA",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is a **parameter** pointing to an interface.\n\n  "
                      },
                      {
                        "kind": "code",
                        "text": "```\n  const value:BaseClass = new BaseClass('test');\n  functionWithArguments('arg', 0, value);\n  ```"
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Object"
                    },
                    "name": "Object",
                    "package": "typescript"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        },
        {
          "id": 20,
          "name": "functionWithRest",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 78,
              "character": 16,
              "url": "typedoc://function.ts#L78"
            }
          ],
          "signatures": [
            {
              "id": 21,
              "name": "functionWithRest",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function with rest parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 78,
                  "character": 16,
                  "url": "typedoc://function.ts#L78"
                }
              ],
              "parameters": [
                {
                  "id": 22,
                  "name": "rest",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {
                    "isRest": true
                  },
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The rest parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 42,
          "name": "checkerFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 137,
              "character": 16,
              "url": "typedoc://function.ts#L137"
            }
          ],
          "signatures": [
            {
              "id": 43,
              "name": "checkerFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Assertion function with a type."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 137,
                  "character": 16,
                  "url": "typedoc://function.ts#L137"
                }
              ],
              "parameters": [
                {
                  "id": 44,
                  "name": "anything",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "anything",
                "asserts": false,
                "targetType": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            }
          ]
        },
        {
          "id": 49,
          "name": "isNonNull",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 157,
              "character": 16,
              "url": "typedoc://function.ts#L157"
            }
          ],
          "signatures": [
            {
              "id": 50,
              "name": "isNonNull",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Checks that an argument is not null."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 157,
                  "character": 16,
                  "url": "typedoc://function.ts#L157"
                }
              ],
              "typeParameters": [
                {
                  "id": 51,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 52,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "target": 51,
                        "name": "T",
                        "package": "typedoc",
                        "refersToTypeParameter": true
                      }
                    ]
                  }
                }
              ],
              "type": {
                "type": "predicate",
                "name": "arg",
                "asserts": false,
                "targetType": {
                  "type": "reference",
                  "target": 51,
                  "name": "T",
                  "package": "typedoc",
                  "refersToTypeParameter": true
                }
              }
            }
          ]
        },
        {
          "id": 56,
          "name": "merged",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "children": [
            {
              "id": 58,
              "name": "nsFn",
              "variant": "declaration",
              "kind": 2048,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 209,
                  "character": 7,
                  "url": "typedoc://function.ts#L209"
                }
              ],
              "signatures": [
                {
                  "id": 59,
                  "name": "nsFn",
                  "variant": "signature",
                  "kind": 4096,
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function.ts",
                      "line": 209,
                      "character": 14,
                      "url": "typedoc://function.ts#L209"
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  }
                }
              ]
            }
          ],
          "groups": [
            {
              "title": "Methods",
              "children": [
                58
              ]
            }
          ],
          "sources": [
            {
              "fileName": "function.ts",
              "line": 208,
              "character": 16,
              "url": "typedoc://function.ts#L208"
            },
            {
              "fileName": "function.ts",
              "line": 209,
              "character": 0,
              "url": "typedoc://function.ts#L209"
            }
          ],
          "signatures": [
            {
              "id": 57,
              "name": "merged",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 208,
                  "character": 16,
                  "url": "typedoc://function.ts#L208"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              }
            }
          ]
        },
        {
          "id": 30,
          "name": "moduleFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "function.ts",
              "line": 122,
              "character": 16,
              "url": "typedoc://function.ts#L122"
            },
            {
              "fileName": "function.ts",
              "line": 164,
              "character": 14,
              "url": "typedoc://function.ts#L164"
            }
          ],
          "signatures": [
            {
              "id": 31,
              "name": "moduleFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is a function that is extended by a module."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 122,
                  "character": 16,
                  "url": "typedoc://function.ts#L122"
                }
              ],
              "parameters": [
                {
                  "id": 32,
                  "name": "arg",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An argument."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 23,
          "name": "multipleSignatures",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This comment is on the actual implementation of the function.\nTypeDoc used to allow this for providing \"default\" comments that would be\ncopied to each signature. It no longer does this, and instead treats\nthis comment as belonging to the function reflection itself.\nAny "
              },
              {
                "kind": "code",
                "text": "`@param`"
              },
              {
                "kind": "text",
                "text": " or "
              },
              {
                "kind": "code",
                "text": "`@returns`"
              },
              {
                "kind": "text",
                "text": " tags within this comment won't be applied\nto signatures."
              }
            ]
          },
          "sources": [
            {
              "fileName": "function.ts",
              "line": 87,
              "character": 16,
              "url": "typedoc://function.ts#L87"
            },
            {
              "fileName": "function.ts",
              "line": 95,
              "character": 16,
              "url": "typedoc://function.ts#L95"
            },
            {
              "fileName": "function.ts",
              "line": 105,
              "character": 16,
              "url": "typedoc://function.ts#L105"
            }
          ],
          "signatures": [
            {
              "id": 24,
              "name": "multipleSignatures",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is the first signature of a function with multiple signatures."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 87,
                  "character": 16,
                  "url": "typedoc://function.ts#L87"
                }
              ],
              "parameters": [
                {
                  "id": 25,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "The name value."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            {
              "id": 26,
              "name": "multipleSignatures",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "This is the second signature of a function with multiple signatures."
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 95,
                  "character": 16,
                  "url": "typedoc://function.ts#L95"
                }
              ],
              "parameters": [
                {
                  "id": 27,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "An object containing the name value."
                      }
                    ]
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 28,
                      "name": "__type",
                      "variant": "declaration",
                      "kind": 65536,
                      "flags": {},
                      "children": [
                        {
                          "id": 29,
                          "name": "name",
                          "variant": "declaration",
                          "kind": 1024,
                          "flags": {},
                          "comment": {
                            "summary": [
                              {
                                "kind": "text",
                                "text": "A value of the object."
                              }
                            ]
                          },
                          "sources": [
                            {
                              "fileName": "function.ts",
                              "line": 95,
                              "character": 44,
                              "url": "typedoc://function.ts#L95"
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "string"
                          }
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "children": [
                            29
                          ]
                        }
                      ],
                      "sources": [
                        {
                          "fileName": "function.ts",
                          "line": 95,
                          "character": 42,
                          "url": "typedoc://function.ts#L95"
                        }
                      ]
                    }
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ]
        },
        {
          "id": 60,
          "name": "variableFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "comment": {
            "summary": [
              {
                "kind": "text",
                "text": "This is a function that is assigned to a variable."
              }
            ]
          },
          "sources": [
            {
              "fileName": "function.ts",
              "line": 37,
              "character": 13,
              "url": "typedoc://function.ts#L37"
            }
          ],
          "signatures": [
            {
              "id": 61,
              "name": "variableFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "This is the return value of the function."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "function.ts",
                  "line": 37,
                  "character": 32,
                  "url": "typedoc://function.ts#L37"
                }
              ],
              "parameters": [
                {
                  "id": 62,
                  "name": "someParam",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "This is some numeric parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  }
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Namespaces",
          "children": [
            33
          ]
        },
        {
          "title": "Classes",
          "children": [
            63
          ]
        },
        {
          "title": "Functions",
          "children": [
            76,
            39,
            45,
            53,
            2,
            13,
            9,
            4,
            20,
            42,
            49,
            56,
            30,
            23,
            60
          ]
        }
      ],
      "sources": [
        {
          "fileName": "function.ts",
          "line": 1,
          "character": 0,
          "url": "typedoc://function.ts#L1"
        }
      ]
    },
    {
      "id": 93,
      "name": "generic-function",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 98,
          "name": "functionWithGenericArrayParameter",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 18,
              "character": 16,
              "url": "typedoc://generic-function.ts#L18"
            }
          ],
          "signatures": [
            {
              "id": 99,
              "name": "functionWithGenericArrayParameter",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "A function with a generic type array parameter."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "A generic array."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 18,
                  "character": 16,
                  "url": "typedoc://generic-function.ts#L18"
                }
              ],
              "typeParameters": [
                {
                  "id": 100,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {}
                }
              ],
              "parameters": [
                {
                  "id": 101,
                  "name": "param",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A generic parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "target": 100,
                    "name": "T",
                    "package": "typedoc",
                    "refersToTypeParameter": true
                  }
                },
                {
                  "id": 102,
                  "name": "params",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "A generic array parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "target": 100,
                      "name": "T",
                      "package": "typedoc",
                      "refersToTypeParameter": true
                    }
                  }
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "target": 100,
                  "name": "T",
                  "package": "typedoc",
                  "refersToTypeParameter": true
                }
              }
            }
          ]
        },
        {
          "id": 103,
          "name": "functionWithTemplate",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 29,
              "character": 16,
              "url": "typedoc://generic-function.ts#L29"
            }
          ],
          "signatures": [
            {
              "id": 104,
              "name": "functionWithTemplate",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 29,
                  "character": 16,
                  "url": "typedoc://generic-function.ts#L29"
                }
              ],
              "typeParameters": [
                {
                  "id": 105,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "this describes T"
                      }
                    ]
                  }
                }
              ],
              "parameters": [
                {
                  "id": 106,
                  "name": "param",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "this describes param"
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "target": 105,
                    "name": "T",
                    "package": "typedoc",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": 105,
                "name": "T",
                "package": "typedoc",
                "refersToTypeParameter": true
              }
            }
          ]
        },
        {
          "id": 94,
          "name": "genericFunction",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "generic-function.ts",
              "line": 7,
              "character": 16,
              "url": "typedoc://generic-function.ts#L7"
            }
          ],
          "signatures": [
            {
              "id": 95,
              "name": "genericFunction",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "comment": {
                "summary": [
                  {
                    "kind": "text",
                    "text": "Generic function short text."
                  }
                ],
                "blockTags": [
                  {
                    "tag": "@returns",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Generic function return value."
                      }
                    ]
                  }
                ]
              },
              "sources": [
                {
                  "fileName": "generic-function.ts",
                  "line": 7,
                  "character": 16,
                  "url": "typedoc://generic-function.ts#L7"
                }
              ],
              "typeParameters": [
                {
                  "id": 96,
                  "name": "T",
                  "variant": "typeParam",
                  "kind": 131072,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Generic function type parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "target": {
                      "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                      "qualifiedName": "Object"
                    },
                    "name": "Object",
                    "package": "typescript"
                  }
                }
              ],
              "parameters": [
                {
                  "id": 97,
                  "name": "value",
                  "variant": "param",
                  "kind": 32768,
                  "flags": {},
                  "comment": {
                    "summary": [
                      {
                        "kind": "text",
                        "text": "Generic function parameter."
                      }
                    ]
                  },
                  "type": {
                    "type": "reference",
                    "target": 96,
                    "name": "T",
                    "package": "typedoc",
                    "refersToTypeParameter": true
                  }
                }
              ],
              "type": {
                "type": "reference",
                "target": 96,
                "name": "T",
                "package": "typedoc",
                "refersToTypeParameter": true
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Functions",
          "children": [
            98,
            103,
            94
          ]
        }
      ],
      "sources": [
        {
          "fileName": "generic-function.ts",
          "line": 1,
          "character": 0,
          "url": "typedoc://generic-function.ts#L1"
        }
      ]
    },
    {
      "id": 107,
      "name": "implicit-types",
      "variant": "declaration",
      "kind": 2,
      "flags": {},
      "children": [
        {
          "id": 116,
          "name": "BreakpointRange",
          "variant": "declaration",
          "kind": 256,
          "flags": {},
          "children": [
            {
              "id": 118,
              "name": "end",
              "variant": "declaration",
              "kind": 1024,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 3,
                  "character": 4,
                  "url": "typedoc://implicit-types.ts#L3"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 117,
              "name": "start",
              "variant": "declaration",
              "kind": 1024,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 2,
                  "character": 4,
                  "url": "typedoc://implicit-types.ts#L2"
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "children": [
                118,
                117
              ]
            }
          ],
          "sources": [
            {
              "fileName": "implicit-types.ts",
              "line": 1,
              "character": 17,
              "url": "typedoc://implicit-types.ts#L1"
            }
          ]
        },
        {
          "id": 108,
          "name": "getBreakpoints",
          "variant": "declaration",
          "kind": 64,
          "flags": {},
          "sources": [
            {
              "fileName": "implicit-types.ts",
              "line": 14,
              "character": 16,
              "url": "typedoc://implicit-types.ts#L14"
            }
          ],
          "signatures": [
            {
              "id": 109,
              "name": "getBreakpoints",
              "variant": "signature",
              "kind": 4096,
              "flags": {},
              "sources": [
                {
                  "fileName": "implicit-types.ts",
                  "line": 14,
                  "character": 16,
                  "url": "typedoc://implicit-types.ts#L14"
                }
              ],
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 110,
                  "name": "__type",
                  "variant": "declaration",
                  "kind": 65536,
                  "flags": {},
                  "children": [
                    {
                      "id": 113,
                      "name": "large",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 9,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L9"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 116,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 112,
                      "name": "medium",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 8,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L8"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 116,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 111,
                      "name": "small",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 7,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L7"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 116,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 114,
                      "name": "xlarge",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 10,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L10"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 116,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    },
                    {
                      "id": 115,
                      "name": "xxlarge",
                      "variant": "declaration",
                      "kind": 1024,
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "implicit-types.ts",
                          "line": 11,
                          "character": 4,
                          "url": "typedoc://implicit-types.ts#L11"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "target": 116,
                        "name": "BreakpointRange",
                        "package": "typedoc"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "children": [
                        113,
                        112,
                        111,
                        114,
                        115
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "implicit-types.ts",
                      "line": 6,
                      "character": 18,
                      "url": "typedoc://implicit-types.ts#L6"
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "groups": [
        {
          "title": "Interfaces",
          "children": [
            116
          ]
        },
        {
          "title": "Functions",
          "children": [
            108
          ]
        }
      ],
      "sources": [
        {
          "fileName": "implicit-types.ts",
          "line": 1,
          "character": 0,
          "url": "typedoc://implicit-types.ts#L1"
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Modules",
      "children": [
        1,
        93,
        107
      ]
    }
  ],
  "packageName": "typedoc",
  "symbolIdMap": {
    "1": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": ""
    },
    "2": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "exportedFunction"
    },
    "3": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "exportedFunction"
    },
    "4": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithParameters"
    },
    "5": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithParameters"
    },
    "6": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "paramZ"
    },
    "7": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "paramG"
    },
    "8": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "paramA"
    },
    "9": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithOptionalValue"
    },
    "10": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithOptionalValue"
    },
    "11": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "requiredParam"
    },
    "12": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "optionalParam"
    },
    "13": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithDefaults"
    },
    "14": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithDefaults"
    },
    "15": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "valueA"
    },
    "16": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "valueB"
    },
    "17": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "valueC"
    },
    "18": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "valueD"
    },
    "19": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "valueE"
    },
    "20": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithRest"
    },
    "21": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "functionWithRest"
    },
    "22": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "rest"
    },
    "23": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "multipleSignatures"
    },
    "24": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "multipleSignatures"
    },
    "25": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "value"
    },
    "26": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "multipleSignatures"
    },
    "27": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "value"
    },
    "28": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "29": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type.name"
    },
    "30": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction"
    },
    "31": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction"
    },
    "32": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "arg"
    },
    "33": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction"
    },
    "34": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction.append"
    },
    "35": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction.append"
    },
    "36": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction.prepend"
    },
    "37": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction.prepend"
    },
    "38": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "moduleFunction.functionVariable"
    },
    "39": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "assertionFunction"
    },
    "40": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "assertionFunction"
    },
    "41": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "condition"
    },
    "42": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "checkerFunction"
    },
    "43": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "checkerFunction"
    },
    "44": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "anything"
    },
    "45": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "assertIsNonNull"
    },
    "46": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "assertIsNonNull"
    },
    "47": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "T"
    },
    "48": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "arg"
    },
    "49": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "isNonNull"
    },
    "50": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "isNonNull"
    },
    "51": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "T"
    },
    "52": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "arg"
    },
    "53": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "boolOrUndef"
    },
    "54": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "boolOrUndef"
    },
    "55": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "x"
    },
    "56": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "merged"
    },
    "57": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "merged"
    },
    "58": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "merged.nsFn"
    },
    "59": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "merged.nsFn"
    },
    "60": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "variableFunction"
    },
    "61": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "variableFunction"
    },
    "62": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "someParam"
    },
    "63": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates"
    },
    "64": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.isString"
    },
    "65": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.isString"
    },
    "66": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "x"
    },
    "67": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.assert"
    },
    "68": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.assert"
    },
    "69": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "x"
    },
    "72": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.isString"
    },
    "73": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.isString"
    },
    "74": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.assertString"
    },
    "75": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "Predicates.assertString"
    },
    "76": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "all"
    },
    "77": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "all"
    },
    "78": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "T"
    },
    "79": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "fn"
    },
    "80": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "81": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "82": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "item"
    },
    "83": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "iterator"
    },
    "84": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "all"
    },
    "85": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "T"
    },
    "86": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "fn"
    },
    "87": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "88": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "89": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "item"
    },
    "90": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "91": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "__type"
    },
    "92": {
      "sourceFileName": "src/test/converter/function/function.ts",
      "qualifiedName": "iterator"
    },
    "93": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": ""
    },
    "94": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "genericFunction"
    },
    "95": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "genericFunction"
    },
    "96": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "T"
    },
    "97": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "value"
    },
    "98": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "functionWithGenericArrayParameter"
    },
    "99": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "functionWithGenericArrayParameter"
    },
    "100": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "T"
    },
    "101": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "param"
    },
    "102": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "params"
    },
    "103": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "functionWithTemplate"
    },
    "104": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "functionWithTemplate"
    },
    "105": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "T"
    },
    "106": {
      "sourceFileName": "src/test/converter/function/generic-function.ts",
      "qualifiedName": "param"
    },
    "107": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": ""
    },
    "108": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "getBreakpoints"
    },
    "109": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "getBreakpoints"
    },
    "110": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type"
    },
    "111": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type.small"
    },
    "112": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type.medium"
    },
    "113": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type.large"
    },
    "114": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type.xlarge"
    },
    "115": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "__type.xxlarge"
    },
    "116": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "BreakpointRange"
    },
    "117": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "BreakpointRange.start"
    },
    "118": {
      "sourceFileName": "src/test/converter/function/implicit-types.ts",
      "qualifiedName": "BreakpointRange.end"
    }
  },
  "files": {
    "entries": {
      "1": "src/test/converter/function/function.ts",
      "2": "src/test/converter/function/generic-function.ts",
      "3": "src/test/converter/function/implicit-types.ts"
    },
    "reflections": {
      "1": 1,
      "2": 93,
      "3": 107
    }
  }
}
